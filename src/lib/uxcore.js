/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	window["Uxcore"]={
	"Table":__webpack_require__(1),
	"Menu":__webpack_require__(367),
	"Dialog":__webpack_require__(409),
	"EmptyData":__webpack_require__(394),
	"Message":__webpack_require__(419),
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Table Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(2);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Table Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, UXCore Team, Alinw.
	 * All rights reserved.
	 */

	/* eslint-disable react/sort-comp */

	var CellField = __webpack_require__(3);
	var Pagination = __webpack_require__(8);
	var Const = __webpack_require__(168);
	var assign = __webpack_require__(6);
	var deepcopy = __webpack_require__(170);
	var deepEqual = __webpack_require__(282);
	var classnames = __webpack_require__(5);
	var NattyFetch = __webpack_require__(285);
	var Promise = __webpack_require__(287);
	var React = __webpack_require__(7);

	var Mask = __webpack_require__(289);
	var util = __webpack_require__(290);
	var Header = __webpack_require__(293);
	var Tbody = __webpack_require__(300);
	var ActionBar = __webpack_require__(396);
	var methods = __webpack_require__(407);
	var createCellField = __webpack_require__(408);

	var Table = function (_React$Component) {
	  _inherits(Table, _React$Component);

	  function Table(props) {
	    _classCallCheck(this, Table);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.uid = 0;
	    _this.fields = {};
	    _this.state = {
	      data: _this.addValuesInData(deepcopy(_this.props.jsxdata)), // checkbox 内部交互
	      columns: _this.processColumn(), // column 内部交互
	      showMask: props.showMask, // fetchData 时的内部状态改变
	      pageSize: props.pageSize, // pagination 相关
	      currentPage: props.currentPage, // pagination 相关
	      activeColumn: null,
	      scrollLeft: 0,
	      scrollTop: 0,
	      searchTxt: '',
	      expandedKeys: []
	    };
	    _this.handleBodyScroll = _this.handleBodyScroll.bind(_this);
	    _this.hasFixed = util.hasFixColumn(props);
	    return _this;
	  }

	  Table.prototype.componentDidMount = function componentDidMount() {
	    var me = this;
	    if (!!me.state.data && !!me.state.data.datas) {
	      console.warn('Table: "content.data" rather than "content.datas" is recommended, ' + 'the support for "content.datas" will be end from ver. 1.5.0');
	    }
	    if (me.props.subComp) {
	      console.warn('Table: subComp is deprecated, use renderSubComp instead.');
	    }
	    if (this.props.fetchDataOnMount) {
	      this.fetchData();
	    }
	    Object.keys(methods).forEach(function (key) {
	      me[key] = methods[key].bind(me);
	    });
	  };

	  Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var me = this;
	    var newData = {};
	    if (nextProps.jsxdata && !deepEqual(nextProps.jsxdata, me.props.jsxdata)) {
	      // Data has changed, so uid which is used to mark the data should be reset.
	      me.uid = 0;
	      me.fetchData('dataChange', nextProps);
	    }
	    if (nextProps.pageSize !== me.props.pageSize) {
	      newData.pageSize = nextProps.pageSize;
	    }
	    if (nextProps.currentPage !== me.props.currentPage) {
	      newData.currentPage = nextProps.currentPage;
	    }
	    if (!!nextProps.jsxcolumns && !deepEqual(nextProps.jsxcolumns, me.props.jsxcolumns)) {
	      newData.columns = me.processColumn(nextProps);
	      this.hasFixed = util.hasFixColumn(nextProps);
	    }
	    if (nextProps.showMask !== me.props.showMask) {
	      newData.showMask = nextProps.showMask;
	    }
	    if (nextProps.fetchUrl !== me.props.fetchUrl || !deepEqual(nextProps.fetchParams, me.props.fetchParams)) {
	      me.fetchData('propsChange', nextProps);
	    }
	    me.setState(newData);
	  };

	  Table.prototype.renderTbody = function renderTbody(renderBodyProps, bodyHeight) {
	    if (this.hasFixed) {
	      var fixedBodyProps = assign({}, renderBodyProps, {
	        subComp: null
	      });
	      return React.createElement(
	        'div',
	        {
	          className: 'kuma-uxtable-body-wrapper',
	          style: {
	            height: bodyHeight
	          }
	        },
	        React.createElement(Tbody, _extends({}, fixedBodyProps, {
	          fixedColumn: 'fixed',
	          key: 'grid-body-fixed',
	          ref: util.saveRef('bodyFixed', this)
	        })),
	        React.createElement(Tbody, _extends({}, renderBodyProps, {
	          fixedColumn: 'scroll',
	          key: 'grid-body-scroll',
	          onScroll: this.handleBodyScroll
	        })),
	        React.createElement(Mask, { visible: this.state.showMask, text: this.props.loadingText })
	      );
	    }
	    return React.createElement(
	      'div',
	      {
	        className: 'kuma-uxtable-body-wrapper',
	        style: {
	          height: bodyHeight
	        }
	      },
	      React.createElement(Tbody, _extends({}, renderBodyProps, { fixedColumn: 'no', onScroll: this.handleBodyScroll })),
	      React.createElement(Mask, { visible: this.state.showMask, text: this.props.loadingText })
	    );
	  };

	  Table.prototype.renderHeader = function renderHeader(renderHeaderProps) {
	    if (!this.props.showHeader) {
	      return null;
	    }

	    if (this.hasFixed) {
	      return React.createElement(
	        'div',
	        { className: 'kuma-uxtable-header-wrapper' },
	        React.createElement(Header, _extends({}, renderHeaderProps, { fixedColumn: 'fixed', key: 'grid-header-fixed' })),
	        React.createElement(Header, _extends({}, renderHeaderProps, {
	          fixedColumn: 'scroll',
	          key: 'grid-header-scroll',
	          ref: util.saveRef('headerScroll', this)
	        }))
	      );
	    }
	    return React.createElement(
	      'div',
	      { className: 'kuma-uxtable-header-wrapper' },
	      React.createElement(Header, _extends({}, renderHeaderProps, { fixedColumn: 'no', ref: util.saveRef('headerNo', this) }))
	    );
	  };

	  /**
	   * get Query Object by combining data from searchBar, column order, pagination
	   * and fetchParams.
	   * @param from {string} used in props.beforeFetch
	   */

	  Table.prototype.getQueryObj = function getQueryObj(from, props) {
	    var me = this;
	    var queryObj = {};
	    if (props.passedData) {
	      var queryKeys = props.queryKeys;
	      if (!queryKeys) {
	        queryObj = props.passedData;
	      } else {
	        queryKeys.forEach(function (key) {
	          if (props.passedData[key] !== undefined) {
	            queryObj[key] = props.passedData[key];
	          }
	        });
	      }
	    }

	    // pagination
	    queryObj = assign({}, queryObj, {
	      pageSize: me.state.pageSize,
	      currentPage: me.state.currentPage
	    });

	    // column order
	    var activeColumn = me.state.activeColumn;
	    var orderType = me.state.orderType;
	    if (activeColumn) {
	      queryObj = assign({}, queryObj, {
	        orderColumn: activeColumn.dataKey
	      });
	      if (orderType && orderType !== 'none') {
	        queryObj.orderType = orderType;
	      }
	    }

	    // search query
	    var searchTxt = me.state.searchTxt;
	    if (searchTxt) {
	      queryObj = assign({}, queryObj, {
	        searchTxt: searchTxt
	      });
	    }

	    // fetchParams has the top priority
	    if (props.fetchParams) {
	      queryObj = assign({}, queryObj, props.fetchParams);
	    }

	    return props.beforeFetch(queryObj, from);
	  };

	  Table.prototype.onPageChange = function onPageChange(current) {
	    var me = this;
	    me.setState({
	      currentPage: current
	    }, function () {
	      me.fetchData('pagination');
	    });
	  };

	  Table.prototype.getDomNode = function getDomNode() {
	    return this.root;
	  };

	  Table.prototype.getPager = function getPager() {
	    return this.pager;
	  };

	  Table.prototype.getIsSelectAll = function getIsSelectAll(data) {
	    var me = this;
	    var column = me.checkboxColumn;
	    if (!column || data.length === 0) {
	      return false;
	    }
	    var checkboxColumnKey = me.checkboxColumnKey;
	    var isSelectAll = true;
	    for (var i = 0; i < data.length; i++) {
	      if ('isDisable' in column && column.isDisable(data[i]) || column.disable) {
	        isSelectAll = true;
	      } else {
	        isSelectAll = data[i][checkboxColumnKey];
	        if (!isSelectAll) {
	          break;
	        }
	      }
	    }
	    return isSelectAll;
	  };

	  /**
	   * change the checkboxColumnKey of data, passed to the Row
	   * @param checked {boolean} tree checkbox status
	   * @param dataIndex {string} like `1-2-3` means the position of the Row in data
	   */


	  Table.prototype.changeTreeSelected = function changeTreeSelected(checked, dataIndex) {
	    var me = this;
	    var currentLevel = dataIndex.toString().split('-');
	    var levelDepth = currentLevel.length;
	    var data = deepcopy(me.state.data);
	    var current = data.data;
	    // record each tree node for reverse recursion.
	    var treeMap = [];
	    for (var i = 0; i < levelDepth - 1; i++) {
	      treeMap[i] = current;
	      current = current[currentLevel[i]].data;
	    }
	    // check/uncheck current row and all its children
	    current = current[currentLevel[levelDepth - 1]];
	    current[me.checkboxColumnKey] = checked;
	    util.changeValueR(current, me.checkboxColumnKey, checked);

	    // reverse recursion, check/uncheck parents by its children.
	    for (var _i = treeMap.length - 1; _i >= 0; _i--) {
	      treeMap[_i][currentLevel[_i]][me.checkboxColumnKey] = treeMap[_i][currentLevel[_i]].data.every(function (item) {
	        return item[me.checkboxColumnKey] === true;
	      });
	    }

	    me.setState({
	      data: data
	    }, function () {
	      var selectedRows = util.getAllSelectedRows(deepcopy(data), me.checkboxColumnKey);
	      if (me.props.rowSelection && me.props.rowSelection.onSelect) {
	        me.props.rowSelection.onSelect(checked, current, selectedRows);
	      }
	    });
	  };

	  Table.prototype.selectAll = function selectAll(checked) {
	    var me = this;
	    var content = deepcopy(me.state.data);
	    var data = content.datas || content.data;
	    var rowSelection = me.props.rowSelection;

	    var selectedRows = [];
	    for (var i = 0; i < data.length; i++) {
	      var column = me.checkboxColumn;
	      var key = me.checkboxColumnKey;
	      var item = data[i];
	      if ((!('isDisable' in column) || !column.isDisable(item)) && !column.disable) {
	        item[key] = checked;
	        selectedRows.push(item);
	      }
	    }

	    if (!!rowSelection && !!rowSelection.onSelectAll) {
	      rowSelection.onSelectAll.apply(null, [checked, checked ? selectedRows : []]);
	    }
	    me.setState({
	      data: content
	    });
	  };

	  Table.prototype.handleShowSizeChange = function handleShowSizeChange(current, pageSize) {
	    var me = this;
	    me.setState({
	      currentPage: current,
	      pageSize: pageSize
	    }, function () {
	      me.fetchData('pagination');
	    });
	  };

	  Table.prototype.handleColumnPickerChange = function handleColumnPickerChange(checkedKeys, groupName) {
	    var columns = deepcopy(this.state.columns);
	    var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
	    var commonGroupName = util.getConsts().commonGroup;
	    for (var i = 0; i < columns.length; i++) {
	      var item = columns[i];
	      var isGroup = {}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object';
	      // current column is a group and groupName is right
	      if (isGroup && item.group === groupName) {
	        for (var j = 0; j < item.columns.length; j++) {
	          var ele = item.columns[j];
	          if (checkedKeys.indexOf(ele.dataKey) !== -1) {
	            ele.hidden = false;
	          } else {
	            ele.hidden = true;
	          }
	        }
	        break;
	      } else if (groupName === commonGroupName) {
	        // current column is common group
	        if (checkedKeys.indexOf(item.dataKey) !== -1 || notRenderColumns.indexOf(item.dataKey) !== -1) {
	          item.hidden = false;
	        } else {
	          item.hidden = true;
	        }
	      }
	    }

	    var selectedKeys = util.getSelectedKeys(columns);

	    if (selectedKeys.length === 0) {
	      return;
	    }

	    this.setState({
	      columns: columns
	    });
	  };

	  Table.prototype.handleBodyScroll = function handleBodyScroll(scrollLeft, scrollTop) {
	    var me = this;
	    var headerNode = me.hasFixed ? me.headerScroll : me.headerNo;
	    var bodyNode = me.bodyFixed;
	    if (scrollLeft !== undefined) {
	      headerNode.getDomNode().scrollLeft = scrollLeft;
	    }
	    if (scrollTop !== undefined && this.hasFixed) {
	      bodyNode.getDomNode().scrollTop = scrollTop;
	    }
	  };

	  Table.prototype.handleOrderColumnCB = function handleOrderColumnCB(type, column) {
	    var me = this;
	    me.setState({
	      activeColumn: column,
	      orderType: type
	    }, function () {
	      me.fetchData('order');
	    });
	  };

	  Table.prototype.handleActionBarSearch = function handleActionBarSearch(value) {
	    var me = this;
	    this.setState({
	      searchTxt: value
	    }, function () {
	      me.fetchData('search');
	    });
	  };

	  Table.prototype.processColumn = function processColumn(props) {
	    var actualProps = props || this.props;

	    var me = this;
	    var columns = deepcopy(actualProps.jsxcolumns);
	    var hasCheckboxColumn = false;

	    for (var i = 0; i < columns.length; i++) {
	      var item = columns[i];
	      // only one rowSelector can be rendered in Table.
	      if (item.type === 'checkbox' || item.type === 'radioSelector' || item.type === 'checkboxSelector') {
	        if (item.type === 'checkbox') {
	          console.warn("rowSelector using 'type: checkbox' is deprecated," + " use 'type: checkboxSelector' instead.");
	        }
	        hasCheckboxColumn = true;
	        me.checkboxColumn = item;
	        me.checkboxColumnKey = item.dataKey;
	        item.width = item.width || (/kuma-uxtable-border-line/.test(actualProps.className) ? 40 : 32);
	        item.align = item.align || 'left';
	      }
	    }

	    // filter the column which has a dataKey 'jsxchecked' & 'jsxtreeIcon'

	    columns = columns.filter(function (item) {
	      return item.dataKey !== 'jsxchecked' && item.dataKey !== 'jsxtreeIcon';
	    });

	    if (!!actualProps.rowSelection && !hasCheckboxColumn) {
	      me.checkboxColumn = {
	        dataKey: 'jsxchecked',
	        width: 46,
	        type: actualProps.rowSelector,
	        align: 'right'
	      };
	      me.checkboxColumnKey = 'jsxchecked';
	      columns = [me.checkboxColumn].concat(columns);
	    } else if (actualProps.parentHasCheckbox) {
	      // no rowSelection but has parentHasCheckbox, render placeholder
	      columns = [{
	        dataKey: 'jsxwhite',
	        width: 46,
	        type: 'empty'
	      }].concat(columns);
	    }
	    if ((!!actualProps.subComp || !!actualProps.renderSubComp) && actualProps.renderModel !== 'tree') {
	      columns = [{
	        dataKey: 'jsxtreeIcon',
	        width: 36,
	        type: 'treeIcon'
	      }].concat(columns);
	    } else if (actualProps.passedData) {
	      // no subComp but has passedData, means sub mode, parent should has tree icon,
	      // render tree icon placeholder
	      columns = [{
	        dataKey: 'jsxwhite',
	        width: 34,
	        type: 'empty'
	      }].concat(columns);
	    }
	    return columns;
	  };

	  /**
	   * fetch Data via Ajax
	   * @param from {string} tell fetchData where it is invoked, the param will be
	   * passed to props.beforeFetch in order to help the user.
	   */

	  Table.prototype.fetchData = function fetchData(from, nextProps) {
	    var me = this;
	    var props = nextProps || this.props;
	    // reset uid cause table data has changed
	    me.uid = 0;

	    // fetchUrl has the top priority.
	    if (props.fetchUrl) {
	      me.fetchRemoteData(from, props);
	    } else if (props.passedData) {
	      me.fetchPassedData(props);
	    } else if (props.jsxdata) {
	      me.fetchLocalData(from, props);
	    } else {
	      // default will create one row
	      var data = {
	        data: [{
	          jsxid: me.uid,
	          __mode__: Const.MODE.EDIT
	        }],
	        currentPage: 1,
	        totalCount: 0
	      };
	      me.uid += 1;
	      me.data = data;
	      me.setState({
	        data: data
	      });
	    }
	  };

	  Table.prototype.fetchRemoteData = function fetchRemoteData(from, props) {
	    var me = this;
	    if (me.request) {
	      me.request.abort();
	    }
	    if (!me.state.showMask) {
	      me.setState({
	        showMask: true
	      });
	    }
	    var isJsonp = props.isJsonp === undefined ? /\.jsonp/.test(props.fetchUrl) : props.isJsonp;
	    me.request = NattyFetch.create({
	      url: props.fetchUrl,
	      data: me.getQueryObj(from, props),
	      fit: props.fitResponse,
	      jsonp: isJsonp,
	      Promise: Promise
	    });

	    me.request().then(function (content) {
	      var processedData = me.addValuesInData(props.processData(deepcopy(content)));
	      var updateObj = {
	        data: processedData,
	        showMask: false,
	        expandedKeys: util.getDefaultExpandedKeys(processedData.data, props.levels)
	      };
	      if (processedData.currentPage !== undefined) {
	        updateObj.currentPage = processedData.currentPage;
	      }
	      me.data = deepcopy(processedData);
	      me.setState(updateObj);
	    })["catch"](function (err) {
	      props.onFetchError(err);
	    });
	  };

	  Table.prototype.fetchPassedData = function fetchPassedData(props) {
	    console.warn('props subComp is deprecated, use renderSubComp instead.');
	    var me = this;
	    if (!props.queryKeys) {
	      var data = me.addValuesInData(props.processData(deepcopy(props.passedData)));
	      me.setState({
	        data: data
	      });
	      me.data = deepcopy(data);
	    } else {
	      (function () {
	        var data = {};
	        props.queryKeys.forEach(function (key) {
	          if (props.passedData[key] !== undefined) {
	            data[key] = props.passedData[key];
	          }
	        });
	        var processedData = me.addValuesInData(props.processData(deepcopy(data)));
	        me.setState({
	          data: processedData
	        });
	        me.data = deepcopy(processedData);
	      })();
	    }
	  };

	  Table.prototype.fetchLocalData = function fetchLocalData(from, props) {
	    var me = this;
	    if (['pagination', 'order', 'search'].indexOf(from) !== -1) {
	      if (from === 'pagination' && props.onPagerChange) {
	        props.onPagerChange(me.state.currentPage, me.state.pageSize);
	      }

	      if (from === 'order' && props.onOrder) {
	        props.onOrder(me.state.activeColumn, me.state.orderType);
	      }

	      if (from === 'search' && props.onSearch) {
	        props.onSearch(me.state.searchTxt);
	      }
	    } else {
	      var data = this.addValuesInData(deepcopy(props.jsxdata));
	      var currentPage = data && data.currentPage || this.state.currentPage;
	      me.setState({
	        data: data,
	        currentPage: currentPage,
	        expandedKeys: util.getDefaultExpandedKeys(data.data, props.levels)
	      });
	      me.data = deepcopy(data);
	    }
	  };

	  /**
	  * cancel the CellField when it is unmounted.
	  * @param field {element} the cell field to be canceled.
	  */

	  Table.prototype.detachCellField = function detachCellField(name) {
	    delete this.fields[name];
	  };

	  /**
	   * register CellField to Table for the global validation
	   * @param field {element} the cell field to be registered
	   */

	  Table.prototype.attachCellField = function attachCellField(validate, name) {
	    var me = this;
	    if (!name) {
	      console.error('Table: dataKey can not be undefined, check the column config');
	    } else {
	      me.fields[name] = validate;
	    }
	  };

	  /**
	   * For inline edit
	   * receive changes from cell field and change state.data
	   * inform users of the change with dataKey & pass
	   */

	  Table.prototype.handleDataChange = function handleDataChange(obj) {
	    var me = this;
	    var jsxid = obj.jsxid,
	        column = obj.column,
	        value = obj.value,
	        text = obj.text,
	        pass = obj.pass;

	    var dataKey = column.dataKey;
	    var editKey = column.editKey || dataKey;
	    var data = deepcopy(me.state.data);
	    var changedData = {};
	    for (var i = 0; i < data.data.length; i++) {
	      if (data.data[i].jsxid === jsxid) {
	        data.data[i][dataKey] = text;
	        data.data[i][editKey] = value;
	        changedData = data.data[i];
	      }
	    }

	    me.setState({
	      data: data
	    }, function () {
	      me.props.onChange({
	        data: me.state.data,
	        editKey: editKey,
	        dataKey: dataKey,
	        changedData: changedData,
	        pass: pass
	      });
	    });
	  };

	  /**
	   * change SelectedRows data via checkbox, this function will pass to the Cell
	   * @param checked {boolean} the checkbox status
	   * @param rowIndex {number} the row Index
	   * @param fromMount {boolean} onSelect is called from cell Mount is not expected.
	   */

	  Table.prototype.changeSelected = function changeSelected(checked, rowIndex, fromMount) {
	    var me = this;
	    var content = deepcopy(this.state.data);
	    var _data = content.datas || content.data;

	    if (me.checkboxColumn.type === 'radioSelector') {
	      for (var i = 0; i < _data.length; i++) {
	        var item = _data[i];
	        if (item.jsxid === rowIndex) {
	          item[me.checkboxColumnKey] = checked;
	        } else if (item[me.checkboxColumnKey]) {
	          item[me.checkboxColumnKey] = false;
	        }
	      }
	    } else {
	      for (var _i2 = 0; _i2 < _data.length; _i2++) {
	        var _item = _data[_i2];
	        if (_item.jsxid === rowIndex) {
	          _item[me.checkboxColumnKey] = checked;
	          break;
	        }
	      }
	    }

	    me.setState({
	      data: content
	    }, function () {
	      if (!fromMount) {
	        var data = me.state.data.datas || me.state.data.data;
	        var selectedRows = data.filter(function (item) {
	          return item[me.checkboxColumnKey] === true;
	        });
	        if (me.props.rowSelection && me.props.rowSelection.onSelect) {
	          me.props.rowSelection.onSelect(checked, data[rowIndex], selectedRows);
	        }
	      }
	    });
	  };

	  Table.prototype.renderPager = function renderPager() {
	    var me = this;
	    var _me$state = me.state,
	        data = _me$state.data,
	        currentPage = _me$state.currentPage,
	        pageSize = _me$state.pageSize;
	    var _me$props = me.props,
	        showPagerTotal = _me$props.showPagerTotal,
	        showPager = _me$props.showPager,
	        locale = _me$props.locale,
	        pagerSizeOptions = _me$props.pagerSizeOptions,
	        isMiniPager = _me$props.isMiniPager,
	        showPagerSizeChanger = _me$props.showPagerSizeChanger;

	    if (showPager && data && data.totalCount) {
	      return React.createElement(
	        'div',
	        { className: 'kuma-uxtable-page' },
	        React.createElement(Pagination, {
	          className: classnames({
	            mini: isMiniPager
	          }),
	          ref: util.saveRef('pager', me),
	          locale: locale,
	          showSizeChanger: showPagerSizeChanger,
	          showTotal: showPagerTotal,
	          total: data.totalCount,
	          onShowSizeChange: me.handleShowSizeChange.bind(me),
	          onChange: me.onPageChange.bind(me),
	          current: currentPage,
	          pageSize: pageSize,
	          sizeOptions: pagerSizeOptions
	        })
	      );
	    }
	    return null;
	  };

	  Table.prototype.render = function render() {
	    var _classnames;

	    var me = this;
	    var props = this.props,
	        state = this.state;

	    var bodyHeight = void 0;
	    // if table is in sub mode, people always want to align the parent
	    // and the sub table, so width should not be cared.
	    var headerHeight = props.headerHeight;


	    var data = state.data ? state.data.datas || state.data.data : [];
	    var isSelectAll = me.getIsSelectAll(data);

	    var style = {
	      width: props.passedData ? 'auto' : props.width,
	      height: props.height
	    };
	    var actionBarHeight = props.actionBar || props.showSearch ? props.actionBarHeight : 0;
	    var pagerHeight = props.showPager && this.state.data && this.state.data.totalCount ? 42 : 0;

	    // decide whether the table has column groups
	    var hasGroup = false;
	    for (var i = 0; i < this.state.columns.length; i++) {
	      if ('group' in this.state.columns[i]) {
	        hasGroup = true;
	        break;
	      }
	    }
	    if (props.height === 'auto') {
	      bodyHeight = 'auto';
	    } else {
	      bodyHeight = props.height === '100%' ? props.height : parseInt(props.height, 10) - (headerHeight || (hasGroup ? 100 : 50)) - actionBarHeight - pagerHeight;
	    }
	    var renderBodyProps = {
	      columns: state.columns,
	      mask: state.showMask,
	      expandedKeys: state.expandedKeys,
	      data: data,
	      rowSelection: props.rowSelection,
	      addRowClassName: props.addRowClassName,
	      locale: props.locale,
	      subComp: props.subComp,
	      emptyText: props.emptyText,
	      renderSubComp: props.renderSubComp,
	      rowHeight: props.rowHeight,
	      loadingText: props.loadingText,
	      checkboxColumnKey: me.checkboxColumnKey,
	      height: bodyHeight,
	      width: props.width,
	      mode: props.mode,
	      levels: props.levels,
	      root: this,
	      renderModel: props.renderModel,
	      changeSelected: this.changeSelected.bind(this),
	      handleDataChange: this.handleDataChange.bind(this),
	      attachCellField: this.attachCellField.bind(this),
	      detachCellField: this.detachCellField.bind(this),
	      key: 'grid-body'
	    };
	    var renderHeaderProps = {
	      columns: state.columns,
	      activeColumn: state.activeColumn,
	      orderType: state.orderType,
	      checkboxColumnKey: me.checkboxColumnKey,
	      showHeaderBorder: props.showHeaderBorder,
	      headerHeight: props.headerHeight,
	      renderModel: props.renderModel,
	      width: props.width,
	      mode: props.mode,
	      isSelectAll: isSelectAll,
	      selectAll: this.selectAll.bind(this),
	      orderColumnCB: this.handleOrderColumnCB.bind(this),
	      handleColumnPickerChange: this.handleColumnPickerChange.bind(this),
	      key: 'grid-header'
	    };

	    var actionBar = void 0;

	    if (props.actionBar || props.linkBar || props.showSearch || props.showColumnPicker) {
	      var renderActionProps = {
	        onSearch: this.handleActionBarSearch.bind(this),
	        actionBarConfig: this.props.actionBar,
	        showColumnPicker: this.props.showColumnPicker,
	        locale: this.props.locale,
	        linkBar: this.props.linkBar,
	        checkboxColumnKey: me.checkboxColumnKey,
	        showSearch: this.props.showSearch,
	        handleColumnPickerChange: this.handleColumnPickerChange.bind(this),
	        searchBarPlaceholder: this.props.searchBarPlaceholder,
	        columns: state.columns,
	        width: props.width,
	        key: 'grid-actionbar'
	      };
	      actionBar = React.createElement(ActionBar, renderActionProps);
	    }

	    return React.createElement(
	      'div',
	      {
	        className: classnames((_classnames = {}, _defineProperty(_classnames, props.className, !!props.className), _defineProperty(_classnames, props.prefixCls, true), _defineProperty(_classnames, 'kuma-subgrid-mode', !!props.passedData), _defineProperty(_classnames, props.prefixCls + '-tree-mode', props.renderModel === 'tree'), _classnames)),
	        style: style,
	        ref: util.saveRef('root', this)
	      },
	      actionBar,
	      React.createElement(
	        'div',
	        {
	          className: 'kuma-uxtable-content',
	          style: {
	            width: props.passedData ? 'auto' : props.width
	          }
	        },
	        this.renderHeader(renderHeaderProps),
	        this.renderTbody(renderBodyProps, bodyHeight)
	      ),
	      this.renderPager()
	    );
	  };

	  // Util Method

	  /**
	   * add some specific value for each row data which will be used in manipulating data & rendering.
	   * used in record API.
	   */

	  Table.prototype.addJSXIdsForRecord = function addJSXIdsForRecord(obj) {
	    var me = this;
	    var objAux = deepcopy(obj);
	    if (objAux instanceof Array) {
	      objAux = objAux.map(function (item) {
	        var newItem = deepcopy(item);
	        if (newItem.jsxid === undefined || newItem.jsxid == null) {
	          me.uid += 1;
	          newItem.jsxid = me.uid;
	        }
	        if (!newItem.__mode__) {
	          newItem.__mode__ = Const.MODE.EDIT;
	        }
	        return newItem;
	      });
	    } else {
	      me.uid += 1;
	      objAux.jsxid = me.uid;
	    }
	    return objAux;
	  };

	  /**
	   * add some specific value for each row data which will be used in manipulating data & rendering.
	   * used in method fetchData
	   */

	  Table.prototype.addValuesInData = function addValuesInData(objAux) {
	    if (!objAux || !objAux.datas && !objAux.data) return null;
	    var me = this;
	    var data = objAux.datas || objAux.data;
	    for (var i = 0; i < data.length; i++) {
	      var node = data[i];
	      node.jsxid = me.uid;
	      me.uid += 1;
	      node.__mode__ = node.__mode__ || Const.MODE.VIEW;
	      me.addValuesInData(node);
	    }
	    return objAux;
	  };

	  /**
	   * insert some data into this.state.data & this.data
	   * @param objAux {Array or Object} datum or data need to be inserted
	   */

	  Table.prototype.insertRecords = function insertRecords(obj, cb) {
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return;
	    var me = this;
	    var objAux = deepcopy(obj);
	    if (!(objAux instanceof Array)) {
	      objAux = [objAux];
	    }
	    objAux = me.addJSXIdsForRecord(objAux);
	    var content = util.mergeData(me.state.data, objAux);
	    me.data = content;
	    me.setState({
	      data: content
	    }, function () {
	      if (cb) {
	        cb();
	      }
	    });
	  };

	  /**
	   * update this.state.data using objAux by jsxid
	   * @param {object/array} obj
	   */


	  Table.prototype.updateRecord = function updateRecord(obj, cb) {
	    var stateData = deepcopy(this.state.data);

	    if (!stateData) {
	      return;
	    }

	    var objAux = deepcopy(obj);
	    if (!(objAux instanceof Array)) {
	      objAux = [objAux];
	    }

	    if (stateData.data || stateData.datas) {
	      (function () {
	        var data = stateData.data || stateData.datas;
	        objAux.forEach(function (item) {
	          for (var i = 0; i < data.length; i++) {
	            if (data[i].jsxid === item.jsxid) {
	              data[i] = item;
	              break;
	            }
	          }
	        });
	        if (stateData.data) {
	          stateData.data = data;
	        } else if (stateData.datas) {
	          stateData.datas = data;
	        }
	      })();
	    }
	    this.setState({
	      data: stateData
	    }, function () {
	      if (cb) {
	        cb();
	      }
	    });
	  };

	  /**
	   * update this.state.data & this.data using objAux by jsxid
	   * @param {objtct/array} objAux
	   */

	  Table.prototype.syncRecord = function syncRecord(obj, cb) {
	    var me = this;
	    var data = me.data.data || me.data.datas;
	    var objAux = deepcopy(obj);
	    if (!(objAux instanceof Array)) {
	      objAux = [objAux];
	    }
	    me.updateRecord(objAux, function () {
	      var stateData = deepcopy(me.state.data.data || me.state.data.datas);
	      objAux.forEach(function (item) {
	        for (var i = 0; i < stateData.length; i++) {
	          var element = stateData[i];
	          if (element.jsxid === item.jsxid) {
	            data[i] = element;
	            break;
	          }
	        }
	      });
	      if (cb) {
	        cb();
	      }
	    });
	  };

	  /**
	   * remove some items from this.state.data & this.data
	   * @param {object/array} obj items to be removed
	   */


	  Table.prototype.removeRecords = function removeRecords(obj, cb) {
	    var me = this;
	    var content = deepcopy(me.state.data);
	    var data = content.data || content.datas;
	    var objAux = deepcopy(obj);
	    if (Object.prototype.toString.call(objAux) !== '[object Array]') {
	      objAux = [objAux];
	    }
	    objAux.forEach(function (item) {
	      for (var i = 0; i < data.length; i++) {
	        var element = data[i];
	        if (element.jsxid === item.jsxid) {
	          data.splice(i, 1);
	          break;
	        }
	      }
	    });
	    me.data = content;
	    this.setState({
	      data: content
	    }, function () {
	      if (cb) {
	        cb();
	      }
	    });
	  };

	  return Table;
	}(React.Component);

	Table.defaultProps = {
	  prefixCls: 'kuma-uxtable',
	  jsxcolumns: [],
	  locale: 'zh-cn',
	  showHeader: true,
	  width: 'auto',
	  height: 'auto',
	  mode: Const.MODE.EDIT,
	  renderModel: '',
	  levels: 0,
	  actionBarHeight: 54,
	  fetchDataOnMount: true,
	  doubleClickToEdit: true,
	  rowSelector: 'checkboxSelector',
	  showPager: true,
	  isMiniPager: false,
	  showPagerSizeChanger: true,
	  showColumnPicker: false,
	  showHeaderBorder: false,
	  showPagerTotal: false,
	  showMask: false,
	  showSearch: false,
	  getSavedData: true,
	  pageSize: 10,
	  pagerSizeOptions: [10, 20, 30, 40],
	  rowHeight: 76,
	  fetchParams: {},
	  currentPage: 1,
	  emptyText: React.createElement(
	    'div',
	    { style: { lineHeight: 2 } },
	    '\u6682\u65E0\u6570\u636E'
	  ),
	  searchBarPlaceholder: '搜索表格内容',
	  loadingText: 'loading',
	  fitResponse: function fitResponse(response) {
	    return {
	      content: response.content,
	      success: response.success === undefined ? !response.hasError : response.success,
	      error: {
	        message: response.content || response.errors
	      }
	    };
	  },
	  processData: function processData(data) {
	    return data;
	  },
	  beforeFetch: function beforeFetch(obj) {
	    return obj;
	  },
	  onFetchError: function onFetchError(err) {
	    console.error(err.stack);
	  },
	  addRowClassName: function addRowClassName() {},
	  onChange: function onChange() {}
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Table.propTypes = {
	  /**
	   * @title 国际化
	   */
	  locale: React.PropTypes.string,
	  /**
	   * @title 列配置
	   */
	  jsxcolumns: React.PropTypes.arrayOf(React.PropTypes.object),
	  /**
	   * @title 表格宽度
	   */
	  width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
	  /**
	   * @title 表格高度
	   */
	  height: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
	  /**
	   * @title 表头高度
	   */
	  headerHeight: React.PropTypes.number,
	  /**
	   * @title 每页显示条数
	   */
	  pageSize: React.PropTypes.number,
	  /**
	   * @title 哪些参数传递给 subComp (即将废除)
	   */
	  queryKeys: React.PropTypes.array,
	  /**
	   * @title 是否在初始化时请求数据
	   */
	  fetchDataOnMount: React.PropTypes.bool,
	  /**
	   * @title 是否双击进入编辑模式
	   */
	  doubleClickToEdit: React.PropTypes.bool,
	  /**
	   * @title 是否显示列选择器
	   */
	  showColumnPicker: React.PropTypes.bool,
	  /**
	   * @title 是否显示分页
	   */
	  showPager: React.PropTypes.bool,
	  /**
	   * @title: 是否是小分页
	   */
	  isMiniPager: React.PropTypes.bool,
	  /**
	   * @title 分页中是否显示总条数
	   */
	  showPagerTotal: React.PropTypes.bool,
	  /**
	   * @title  显示的可选 pageSize
	   */
	  pagerSizeOptions: React.PropTypes.array,
	  /**
	   * @title 是否显示表格头
	   */
	  showHeader: React.PropTypes.bool,
	  /**
	   * @title 是否显示遮罩
	   */
	  showMask: React.PropTypes.bool,
	  /**
	   * @title 是否显示搜索框
	   */
	  showSearch: React.PropTypes.bool,
	  /**
	   * @title 搜索框占位符
	   */
	  searchBarPlaceholder: React.PropTypes.string,
	  /**
	   * @title 加载中文案
	   */
	  loadingText: React.PropTypes.string,
	  /**
	   * @title 子组件(即将废除)
	   */
	  subComp: React.PropTypes.element,
	  /**
	   * @title 无数据时的文案
	   */
	  emptyText: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.object]),
	  /**
	   * @title 数据源（手动）
	   */
	  jsxdata: React.PropTypes.object,
	  /**
	   * @title 数据源（url）
	   */
	  fetchUrl: React.PropTypes.string,
	  /**
	   * @title 请求携带的参数
	   */
	  fetchParams: React.PropTypes.object,
	  /**
	   * @title 当前页数
	   */
	  currentPage: React.PropTypes.number,
	  /**
	   * @title 列选择器的类型
	   */
	  rowSelector: React.PropTypes.string,
	  /**
	   * @title 操作栏配置
	   */
	  actionBar: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
	  /**
	   * @title 操作外链配置
	   */
	  linkBar: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
	  fitResponse: React.PropTypes.func,
	  /**
	   * @title 处理数据的回调
	   */
	  processData: React.PropTypes.func,
	  /**
	   * @title 发起请求前的回调
	   */
	  beforeFetch: React.PropTypes.func,
	  /**
	   * @title 请求出错时的回调
	   */
	  onFetchError: React.PropTypes.func,
	  /**
	   * @title 渲染每一行前用于添加特殊类名的回调
	   */
	  addRowClassName: React.PropTypes.func,
	  /**
	   */
	  passedData: React.PropTypes.object,
	  /**
	   * @title getData 获取的是否是保存之后的数据
	   */
	  getSavedData: React.PropTypes.bool,
	  /**
	   * @title 行内编辑时触发的回调
	   */
	  onChange: React.PropTypes.func,
	  /**
	   * @title 是否是树模式
	   */
	  renderModel: React.PropTypes.string,
	  /**
	   * @title 树的层级
	   */
	  levels: React.PropTypes.number

	};

	Table.displayName = 'Table';
	Table.CellField = CellField;
	Table.Constants = Const;
	Table.createCellField = createCellField;

	module.exports = Table;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * CellField Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(4);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/* eslint-disable class-methods-use-this */

	var classnames = __webpack_require__(5);
	var assgin = __webpack_require__(6);
	var React = __webpack_require__(7);

	var CellField = function (_React$Component) {
	  _inherits(CellField, _React$Component);

	  function CellField(props) {
	    _classCallCheck(this, CellField);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      pass: true
	    };
	    return _this;
	  }

	  CellField.prototype.componentDidMount = function componentDidMount() {
	    var me = this;
	    if (!me.props.standalone) {
	      me.props.attachCellField(me.validate.bind(this), me.getName());
	    }
	  };

	  CellField.prototype.componentWillUnmount = function componentWillUnmount() {
	    var me = this;
	    if (!me.props.standalone) {
	      me.props.detachCellField(me.getName());
	    }
	  };

	  CellField.prototype.getName = function getName() {
	    var me = this;
	    return me.props.column.dataKey + '.' + me.props.index;
	  };

	  CellField.prototype.validate = function validate(value, cb) {
	    var me = this;
	    var actualValue = value === undefined ? me.props.value : value;
	    var rowData = me.props.rowData;
	    var rules = me.props.column.rules;

	    var pass = true;
	    var errMsg = '';
	    if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) === 'object' && !Array.isArray(rules)) {
	      pass = !!rules.validator(actualValue, rowData);
	      errMsg = rules.errMsg;
	    } else if (Array.isArray(rules)) {
	      for (var i = 0; i < rules.length; i++) {
	        pass = rules[i].validator(actualValue, rowData);
	        if (!pass) {
	          errMsg = rules[i].errMsg;
	          break;
	        }
	      }
	    } else if (typeof rules === 'function') {
	      // pass should be false if rules return a string which is an errMsg;
	      errMsg = rules(actualValue, rowData);
	      pass = errMsg === true || errMsg === undefined;
	      errMsg = typeof errMsg === 'boolean' ? '' : errMsg;
	    }
	    if (cb) {
	      cb(pass);
	    }
	    me.setState({
	      pass: pass,
	      errMsg: errMsg
	    });
	    return pass;
	  };

	  CellField.prototype.addSpecificClass = function addSpecificClass() {
	    return '';
	  };

	  CellField.prototype.handleDataChange = function handleDataChange(obj) {
	    var me = this;
	    var value = obj.value;

	    me.validate(value, function (pass) {
	      me.props.handleDataChange(assgin({}, obj, {
	        jsxid: me.props.rowData.jsxid,
	        column: me.props.column,
	        pass: pass
	      }));
	    });
	  };

	  CellField.prototype.renderContent = function renderContent() {};

	  CellField.prototype.render = function render() {
	    var _classnames;

	    var me = this;
	    var specificCls = me.addSpecificClass();
	    return React.createElement(
	      'div',
	      {
	        className: classnames((_classnames = {
	          hasError: !me.state.pass
	        }, _defineProperty(_classnames, specificCls, !!specificCls), _defineProperty(_classnames, me.props.prefixCls, true), _defineProperty(_classnames, me.props.className, !!me.props.className), _classnames))
	      },
	      me.renderContent()
	    );
	  };

	  return CellField;
	}(React.Component);

	CellField.displayName = 'CellField';
	CellField.propTypes = {
	  prefixCls: React.PropTypes.string,
	  standalone: React.PropTypes.bool
	};

	CellField.defaultProps = {
	  prefixCls: 'kuma-uxtable-cell-field',
	  standalone: false
	};

	module.exports = CellField;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 6 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = window.React;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Pagination Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(9);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Forked from project rc-pagination
	 * @maintainer eternalsky
	 */

	var Select = __webpack_require__(10);
	var Pager = __webpack_require__(164);
	var Options = __webpack_require__(165);
	var KEYCODE = __webpack_require__(166);
	var React = __webpack_require__(7);
	var ReactDOM = __webpack_require__(56);
	var i18n = __webpack_require__(167);

	function noop() {}

	var Pagination = function (_React$Component) {
	  _inherits(Pagination, _React$Component);

	  function Pagination(props) {
	    _classCallCheck(this, Pagination);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      current: props.current,
	      _current: props.current,
	      pageSize: props.pageSize
	    };

	    ['render', '_handleChange', '_handleKeyUp', '_handleKeyDown', '_changePageSize', '_isValid', '_prev', '_next', '_hasPrev', '_hasNext', '_jumpPrev', '_jumpNext'].forEach(function (method) {
	      return _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  Pagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.current != this.props.current) {
	      this.setState({
	        current: nextProps.current,
	        _current: nextProps.current
	      });
	    }

	    if (nextProps.pageSize != this.props.pageSize) {
	      this.setState({
	        pageSize: nextProps.pageSize
	      });
	    }
	  };

	  Pagination.prototype.renderTotal = function renderTotal() {
	    var prefix = this.props.locale == 'zh-cn' ? "共" : "";
	    if (this.props.showTotal) {
	      return React.createElement(
	        'li',
	        { className: this.props.prefixCls + "-total" },
	        prefix + this.props.total + i18n[this.props.locale]['item']
	      );
	    }
	  };

	  Pagination.prototype.render = function render() {
	    var props = this.props;

	    var prefixCls = props.prefixCls;
	    var allPages = this._calcPage();
	    var pagerList = [];
	    var jumpPrev = null;
	    var jumpNext = null;
	    var firstPager = null;
	    var lastPager = null;

	    if (props.simple) {
	      return React.createElement(
	        'ul',
	        { className: prefixCls + ' ' + prefixCls + '-simple ' + props.className },
	        React.createElement(
	          'div',
	          { title: 'Page ' + this.state.current + ' of ' + allPages, className: prefixCls + '-simple-pager' },
	          React.createElement(
	            'span',
	            { className: prefixCls + '-current' },
	            this.state._current
	          ),
	          React.createElement(
	            'span',
	            { className: prefixCls + '-slash' },
	            '/'
	          ),
	          allPages
	        ),
	        React.createElement(
	          'li',
	          { title: 'Previous Page', onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') },
	          React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-left' })
	        ),
	        React.createElement(
	          'li',
	          { title: 'Next Page', onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') },
	          React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-right' })
	        )
	      );
	    }

	    if (allPages <= 9) {
	      for (var i = 1; i <= allPages; i++) {
	        var active = this.state.current === i;
	        pagerList.push(React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, i), key: i, page: i, active: active }));
	      }
	    } else {
	      jumpPrev = React.createElement(
	        'li',
	        { title: 'Previous 5 Page', key: 'prev', onClick: this._jumpPrev, className: prefixCls + '-jump-prev' },
	        React.createElement('a', null)
	      );
	      jumpNext = React.createElement(
	        'li',
	        { title: 'Next 5 Page', key: 'next', onClick: this._jumpNext, className: prefixCls + '-jump-next' },
	        React.createElement('a', null)
	      );
	      lastPager = React.createElement(Pager, { last: true, rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, allPages), key: allPages, page: allPages, active: false });
	      firstPager = React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, 1), key: 1, page: 1, active: false });

	      var current = this.state.current;

	      var left = Math.max(1, current - 2);
	      var right = Math.min(current + 2, allPages);

	      if (current - 1 <= 2) {
	        right = 1 + 4;
	      }

	      if (allPages - current <= 2) {
	        left = allPages - 4;
	      }

	      for (var _i = left; _i <= right; _i++) {
	        var _active = current === _i;
	        pagerList.push(React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, _i), key: _i, page: _i, active: _active }));
	      }

	      if (current - 1 >= 4) {
	        pagerList.unshift(jumpPrev);
	      }
	      if (allPages - current >= 4) {
	        pagerList.push(jumpNext);
	      }

	      if (left !== 1) {
	        pagerList.unshift(firstPager);
	      }
	      if (right !== allPages) {
	        pagerList.push(lastPager);
	      }
	    }

	    return React.createElement(
	      'ul',
	      { className: prefixCls + ' ' + props.className,
	        unselectable: 'unselectable' },
	      React.createElement(
	        'li',
	        { title: 'Previous Page', onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') },
	        React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-left' })
	      ),
	      pagerList,
	      React.createElement(
	        'li',
	        { title: 'Next Page', onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') },
	        React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-right' })
	      ),
	      this.renderTotal(),
	      React.createElement(Options, { rootPrefixCls: prefixCls,
	        locale: props.locale,
	        selectComponentClass: props.selectComponentClass,
	        selectPrefixCls: props.selectPrefixCls,
	        changeSize: this.props.showSizeChanger ? this._changePageSize.bind(this) : null,
	        current: this.state.current,
	        pageSize: props.pageSize,
	        sizeOptions: props.sizeOptions,
	        quickGo: this.props.showQuickJumper ? this._handleChange.bind(this) : null })
	    );
	  };

	  // private methods

	  Pagination.prototype._calcPage = function _calcPage(p) {
	    var pageSize = p;
	    if (typeof pageSize === 'undefined') {
	      pageSize = this.state.pageSize;
	    }
	    return Math.floor((this.props.total - 1) / pageSize) + 1;
	  };

	  Pagination.prototype._isValid = function _isValid(page) {
	    return typeof page === 'number' && page >= 1 && page !== this.state.current;
	  };

	  Pagination.prototype._handleKeyDown = function _handleKeyDown(evt) {
	    if (evt.keyCode === KEYCODE.ARROW_UP || evt.keyCode === KEYCODE.ARROW_DOWN) {
	      evt.preventDefault();
	    }
	  };

	  Pagination.prototype._handleKeyUp = function _handleKeyUp(evt) {
	    var _val = evt.target.value;
	    var val = void 0;

	    if (_val === '') {
	      val = _val;
	    } else if (isNaN(Number(_val))) {
	      val = this.state._current;
	    } else {
	      val = Number(_val);
	    }

	    this.setState({
	      _current: val
	    });

	    if (evt.keyCode === KEYCODE.ENTER) {
	      this._handleChange(val);
	    } else if (evt.keyCode === KEYCODE.ARROW_UP) {
	      this._handleChange(val - 1);
	    } else if (evt.keyCode === KEYCODE.ARROW_DOWN) {
	      this._handleChange(val + 1);
	    }
	  };

	  Pagination.prototype._changePageSize = function _changePageSize(size) {
	    if (typeof size === 'number') {
	      var current = this.state.current;

	      this.setState({
	        pageSize: size
	      });

	      if (this.state.current > this._calcPage(size)) {
	        current = this._calcPage(size);
	        this.setState({
	          current: current,
	          _current: current
	        });
	      }

	      this.props.onShowSizeChange(current, size);
	    }
	  };

	  Pagination.prototype._handleChange = function _handleChange(p) {
	    var page = p;
	    var me = this;
	    if (this._isValid(page)) {
	      if (page > this._calcPage()) {
	        page = this._calcPage();
	      }
	      this.setState({
	        current: page,
	        _current: page
	      }, function () {
	        me.props.onChange(page);
	      });

	      return page;
	    }

	    return this.state.current;
	  };

	  Pagination.prototype._prev = function _prev() {
	    if (this._hasPrev()) {
	      this._handleChange(this.state.current - 1);
	    }
	  };

	  Pagination.prototype._next = function _next() {
	    if (this._hasNext()) {
	      this._handleChange(this.state.current + 1);
	    }
	  };

	  Pagination.prototype._jumpPrev = function _jumpPrev() {
	    this._handleChange(Math.max(1, this.state.current - 5));
	  };

	  Pagination.prototype._jumpNext = function _jumpNext() {
	    this._handleChange(Math.min(this._calcPage(), this.state.current + 5));
	  };

	  Pagination.prototype._hasPrev = function _hasPrev() {
	    return this.state.current > 1;
	  };

	  Pagination.prototype._hasNext = function _hasNext() {
	    return this.state.current < this._calcPage();
	  };

	  return Pagination;
	}(React.Component);

	Pagination.propTypes = {
	  current: React.PropTypes.number,
	  total: React.PropTypes.number,
	  locale: React.PropTypes.string,
	  showTotal: React.PropTypes.bool,
	  pageSize: React.PropTypes.number,
	  sizeOptions: React.PropTypes.array,
	  onChange: React.PropTypes.func,
	  showSizeChanger: React.PropTypes.bool,
	  onShowSizeChange: React.PropTypes.func,
	  selectComponentClass: React.PropTypes.func,
	  showQuickJumper: React.PropTypes.bool
	};

	Pagination.defaultProps = {
	  current: 1,
	  total: 0,
	  locale: 'zh-cn',
	  showTotal: false,
	  pageSize: 10,
	  sizeOptions: [10, 20, 30, 40],
	  onChange: noop,
	  className: '',
	  selectPrefixCls: 'kuma-select2',
	  prefixCls: 'kuma-page',
	  selectComponentClass: Select,
	  showQuickJumper: false,
	  showSizeChanger: false,
	  onShowSizeChange: noop
	};

	Pagination.displayName = 'Pagination';

	module.exports = Pagination;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Select2 Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(11);

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _rcSelect = __webpack_require__(12);

	var _rcSelect2 = _interopRequireDefault(_rcSelect);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var Select2 = function (_RcSelect) {
	    _inherits(Select2, _RcSelect);

	    function Select2(props) {
	        _classCallCheck(this, Select2);

	        return _possibleConstructorReturn(this, _RcSelect.call(this, props));
	    }

	    return Select2;
	}(_rcSelect2["default"]);

	Select2.displayName = 'Select2';
	Select2.defaultProps = (0, _objectAssign2["default"])({}, _rcSelect2["default"].defaultProps, {
	    prefixCls: 'kuma-select2',
	    optionLabelProp: 'children',
	    transitionName: 'slideUp'
	});

	exports["default"] = Select2;
	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.OptGroup = exports.Option = undefined;

	var _Select = __webpack_require__(13);

	var _Select2 = _interopRequireDefault(_Select);

	var _Option = __webpack_require__(163);

	var _Option2 = _interopRequireDefault(_Option);

	var _OptGroup = __webpack_require__(58);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_Select2["default"].Option = _Option2["default"];
	_Select2["default"].OptGroup = _OptGroup2["default"];
	exports.Option = _Option2["default"];
	exports.OptGroup = _OptGroup2["default"];
	exports["default"] = _Select2["default"];

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _defineProperty2 = __webpack_require__(14);

	var _defineProperty3 = _interopRequireDefault(_defineProperty2);

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _OptGroup = __webpack_require__(58);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	var _rcAnimate = __webpack_require__(104);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _componentClasses = __webpack_require__(110);

	var _componentClasses2 = _interopRequireDefault(_componentClasses);

	var _util = __webpack_require__(113);

	var _SelectTrigger = __webpack_require__(135);

	var _SelectTrigger2 = _interopRequireDefault(_SelectTrigger);

	var _FilterMixin = __webpack_require__(160);

	var _FilterMixin2 = _interopRequireDefault(_FilterMixin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	function filterFn(input, child) {
	  return String((0, _util.getPropValue)(child, this.props.optionFilterProp)).indexOf(input) > -1;
	}

	function saveRef(name, component) {
	  this[name] = component;
	}

	var valueObjectShape = void 0;

	if (_react.PropTypes) {
	  valueObjectShape = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.shape({
	    key: _react.PropTypes.string,
	    label: _react.PropTypes.node
	  })]);
	}

	var Select = _react2["default"].createClass({
	  displayName: 'Select',

	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    filterOption: _react.PropTypes.any,
	    showSearch: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    allowClear: _react.PropTypes.bool,
	    showArrow: _react.PropTypes.bool,
	    tags: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string,
	    optionLabelProp: _react.PropTypes.string,
	    optionFilterProp: _react.PropTypes.string,
	    animation: _react.PropTypes.string,
	    choiceTransitionName: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onBlur: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func,
	    onSearch: _react.PropTypes.func,
	    placeholder: _react.PropTypes.any,
	    onDeselect: _react.PropTypes.func,
	    labelInValue: _react.PropTypes.bool,
	    value: _react.PropTypes.oneOfType([valueObjectShape, _react.PropTypes.arrayOf(valueObjectShape)]),
	    defaultValue: _react.PropTypes.oneOfType([valueObjectShape, _react.PropTypes.arrayOf(valueObjectShape)]),
	    dropdownStyle: _react.PropTypes.object,
	    maxTagTextLength: _react.PropTypes.number
	  },

	  mixins: [_FilterMixin2["default"]],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-select',
	      filterOption: filterFn,
	      defaultOpen: false,
	      labelInValue: false,
	      defaultActiveFirstOption: true,
	      showSearch: true,
	      allowClear: false,
	      placeholder: '',
	      defaultValue: [],
	      onChange: noop,
	      onBlur: noop,
	      onSelect: noop,
	      onSearch: noop,
	      onDeselect: noop,
	      showArrow: true,
	      dropdownMatchSelectWidth: true,
	      dropdownStyle: {},
	      dropdownMenuStyle: {},
	      optionFilterProp: 'value',
	      optionLabelProp: 'value',
	      notFoundContent: 'Not Found'
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var value = [];
	    if ('value' in props) {
	      value = (0, _util.toArray)(props.value);
	    } else {
	      value = (0, _util.toArray)(props.defaultValue);
	    }
	    value = this.addLabelToValue(props, value);
	    var inputValue = '';
	    if (props.combobox) {
	      inputValue = value.length ? String(value[0].key) : '';
	    }
	    this.saveInputRef = saveRef.bind(this, 'inputInstance');
	    this.saveInputMirrorRef = saveRef.bind(this, 'inputMirrorInstance');
	    var open = props.open;
	    if (open === undefined) {
	      open = props.defaultOpen;
	    }
	    return {
	      value: value,
	      inputValue: inputValue,
	      open: open
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      var value = (0, _util.toArray)(nextProps.value);
	      value = this.addLabelToValue(nextProps, value);
	      this.setState({
	        value: value
	      });
	      if (nextProps.combobox) {
	        this.setState({
	          inputValue: value.length ? String(value[0].key) : ''
	        });
	      }
	    }
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    var state = this.state;
	    var props = this.props;

	    if (state.open && (0, _util.isMultipleOrTags)(props)) {
	      var inputNode = this.getInputDOMNode();
	      var mirrorNode = this.getInputMirrorDOMNode();
	      if (inputNode.value) {
	        inputNode.style.width = '';
	        inputNode.style.width = mirrorNode.clientWidth + 'px';
	      } else {
	        inputNode.style.width = '';
	      }
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.clearBlurTime();
	    if (this.dropdownContainer) {
	      _reactDom2["default"].unmountComponentAtNode(this.dropdownContainer);
	      document.body.removeChild(this.dropdownContainer);
	      this.dropdownContainer = null;
	    }
	  },
	  onInputChange: function onInputChange(event) {
	    var val = event.target.value;
	    var props = this.props;

	    this.setInputValue(val);
	    this.setState({
	      open: true
	    });
	    if ((0, _util.isCombobox)(props)) {
	      this.fireChange([{
	        key: val
	      }]);
	    }
	  },
	  onDropdownVisibleChange: function onDropdownVisibleChange(open) {
	    this.setOpenState(open);
	  },


	  // combobox ignore
	  onKeyDown: function onKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var keyCode = event.keyCode;
	    if (this.state.open && !this.getInputDOMNode()) {
	      this.onInputKeyDown(event);
	    } else if (keyCode === _KeyCode2["default"].ENTER || keyCode === _KeyCode2["default"].DOWN) {
	      this.setOpenState(true);
	      event.preventDefault();
	    }
	  },
	  onInputKeyDown: function onInputKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var state = this.state;
	    var keyCode = event.keyCode;
	    if ((0, _util.isMultipleOrTags)(props) && !event.target.value && keyCode === _KeyCode2["default"].BACKSPACE) {
	      event.preventDefault();
	      var value = state.value.concat();
	      if (value.length) {
	        var popValue = value.pop();
	        props.onDeselect(props.labelInValue ? popValue : popValue.key);
	        this.fireChange(value);
	      }
	      return;
	    }
	    if (keyCode === _KeyCode2["default"].DOWN) {
	      if (!state.open) {
	        this.openIfHasChildren();
	        event.preventDefault();
	        event.stopPropagation();
	        return;
	      }
	    } else if (keyCode === _KeyCode2["default"].ESC) {
	      if (state.open) {
	        this.setOpenState(false);
	        event.preventDefault();
	        event.stopPropagation();
	      }
	      return;
	    }

	    if (state.open) {
	      var menu = this.refs.trigger.getInnerMenu();
	      if (menu && menu.onKeyDown(event)) {
	        event.preventDefault();
	        event.stopPropagation();
	      }
	    }
	  },
	  onMenuSelect: function onMenuSelect(_ref) {
	    var item = _ref.item;

	    var value = this.state.value;
	    var props = this.props;
	    var selectedValue = (0, _util.getValuePropValue)(item);
	    var selectedLabel = this.getLabelFromOption(item);
	    var event = selectedValue;
	    if (props.labelInValue) {
	      event = {
	        key: event,
	        label: selectedLabel
	      };
	    }
	    props.onSelect(event, item);
	    if ((0, _util.isMultipleOrTags)(props)) {
	      if ((0, _util.findIndexInValueByKey)(value, selectedValue) !== -1) {
	        return;
	      }
	      value = value.concat([{
	        key: selectedValue,
	        label: selectedLabel
	      }]);
	    } else {
	      if (value.length && value[0].key === selectedValue) {
	        this.setOpenState(false, true);
	        return;
	      }
	      value = [{
	        key: selectedValue,
	        label: selectedLabel
	      }];
	      this.setOpenState(false, true);
	    }
	    this.fireChange(value);
	    var inputValue = void 0;
	    if ((0, _util.isCombobox)(props)) {
	      inputValue = (0, _util.getPropValue)(item, props.optionLabelProp);
	    } else {
	      inputValue = '';
	    }
	    this.setInputValue(inputValue, false);
	  },
	  onMenuDeselect: function onMenuDeselect(_ref2) {
	    var item = _ref2.item;
	    var domEvent = _ref2.domEvent;

	    if (domEvent.type === 'click') {
	      this.removeSelected((0, _util.getValuePropValue)(item));
	    }
	    this.setInputValue('', false);
	  },
	  onArrowClick: function onArrowClick(e) {
	    e.stopPropagation();
	    if (!this.props.disabled) {
	      this.setOpenState(!this.state.open, true);
	    }
	  },
	  onPlaceholderClick: function onPlaceholderClick() {
	    if (this.getInputDOMNode()) {
	      this.getInputDOMNode().focus();
	    }
	  },
	  onOuterFocus: function onOuterFocus() {
	    this.clearBlurTime();
	    this._focused = true;
	    this.updateFocusClassName();
	  },
	  onPopupFocus: function onPopupFocus() {
	    // fix ie scrollbar, focus element again
	    this.maybeFocus(true, true);
	  },
	  onOuterBlur: function onOuterBlur() {
	    var _this = this;

	    this.blurTimer = setTimeout(function () {
	      _this._focused = false;
	      _this.updateFocusClassName();
	      var props = _this.props;
	      var value = _this.state.value;
	      var inputValue = _this.state.inputValue;

	      if ((0, _util.isSingleMode)(props) && props.showSearch && inputValue && props.defaultActiveFirstOption) {
	        var options = _this._options || [];
	        if (options.length) {
	          var firstOption = (0, _util.findFirstMenuItem)(options);
	          if (firstOption) {
	            value = [{
	              key: firstOption.key,
	              label: _this.getLabelFromOption(firstOption)
	            }];
	            _this.fireChange(value);
	          }
	        }
	      } else if ((0, _util.isMultipleOrTags)(props) && inputValue) {
	        _this.state.inputValue = _this.getInputDOMNode().value = '';
	      }
	      props.onBlur(_this.getVLForOnChange(value));
	    }, 10);
	  },
	  onClearSelection: function onClearSelection(event) {
	    var props = this.props;
	    var state = this.state;
	    if (props.disabled) {
	      return;
	    }
	    var inputValue = state.inputValue;
	    var value = state.value;

	    event.stopPropagation();
	    if (inputValue || value.length) {
	      if (value.length) {
	        this.fireChange([]);
	      }
	      this.setOpenState(false, true);
	      if (inputValue) {
	        this.setInputValue('');
	      }
	    }
	  },
	  onChoiceAnimationLeave: function onChoiceAnimationLeave() {
	    this.refs.trigger.refs.trigger.forcePopupAlign();
	  },
	  getLabelBySingleValue: function getLabelBySingleValue(children, value) {
	    var _this2 = this;

	    if (value === undefined) {
	      return null;
	    }
	    var label = null;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2["default"]) {
	        var maybe = _this2.getLabelBySingleValue(child.props.children, value);
	        if (maybe !== null) {
	          label = maybe;
	        }
	      } else if ((0, _util.getValuePropValue)(child) === value) {
	        label = _this2.getLabelFromOption(child);
	      }
	    });
	    return label;
	  },
	  getLabelFromOption: function getLabelFromOption(child) {
	    return (0, _util.getPropValue)(child, this.props.optionLabelProp);
	  },
	  getLabelFromProps: function getLabelFromProps(props, value) {
	    return this.getLabelByValue(props.children, value);
	  },
	  getVLForOnChange: function getVLForOnChange(vls_) {
	    var vls = vls_;
	    if (vls !== undefined) {
	      if (!this.props.labelInValue) {
	        vls = vls.map(function (v) {
	          return v.key;
	        });
	      }
	      return (0, _util.isMultipleOrTags)(this.props) ? vls : vls[0];
	    }
	    return vls;
	  },
	  getLabelByValue: function getLabelByValue(children, value) {
	    var label = this.getLabelBySingleValue(children, value);
	    if (label === null) {
	      return value;
	    }
	    return label;
	  },
	  getDropdownContainer: function getDropdownContainer() {
	    if (!this.dropdownContainer) {
	      this.dropdownContainer = document.createElement('div');
	      document.body.appendChild(this.dropdownContainer);
	    }
	    return this.dropdownContainer;
	  },
	  getPlaceholderElement: function getPlaceholderElement() {
	    var props = this.props;
	    var state = this.state;

	    var hidden = false;
	    if (state.inputValue) {
	      hidden = true;
	    }
	    if (state.value.length) {
	      hidden = true;
	    }
	    if ((0, _util.isCombobox)(props) && state.value.length === 1 && !state.value[0].key) {
	      hidden = false;
	    }
	    var placeholder = props.placeholder;
	    if (placeholder) {
	      return _react2["default"].createElement(
	        'div',
	        (0, _extends3["default"])({
	          onMouseDown: _util.preventDefaultEvent,
	          style: (0, _extends3["default"])({
	            display: hidden ? 'none' : 'block'
	          }, _util.UNSELECTABLE_STYLE)
	        }, _util.UNSELECTABLE_ATTRIBUTE, {
	          onClick: this.onPlaceholderClick,
	          className: props.prefixCls + '-selection__placeholder'
	        }),
	        placeholder
	      );
	    }
	    return null;
	  },
	  getInputElement: function getInputElement() {
	    var props = this.props;
	    return _react2["default"].createElement(
	      'div',
	      { className: props.prefixCls + '-search__field__wrap' },
	      _react2["default"].createElement('input', {
	        ref: this.saveInputRef,
	        onChange: this.onInputChange,
	        onKeyDown: this.onInputKeyDown,
	        value: this.state.inputValue,
	        disabled: props.disabled,
	        className: props.prefixCls + '-search__field'
	      }),
	      _react2["default"].createElement(
	        'span',
	        {
	          ref: this.saveInputMirrorRef,
	          className: props.prefixCls + '-search__field__mirror'
	        },
	        this.state.inputValue
	      )
	    );
	  },
	  getInputDOMNode: function getInputDOMNode() {
	    return this.inputInstance;
	  },
	  getInputMirrorDOMNode: function getInputMirrorDOMNode() {
	    return this.inputMirrorInstance;
	  },
	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDOMNode();
	  },
	  getPopupMenuComponent: function getPopupMenuComponent() {
	    return this.refs.trigger.getInnerMenu();
	  },
	  setOpenState: function setOpenState(open, needFocus) {
	    var _this3 = this;

	    var props = this.props;
	    var state = this.state;

	    if (state.open === open) {
	      this.maybeFocus(open, needFocus);
	      return;
	    }
	    var nextState = {
	      open: open
	    };
	    // clear search input value when open is false in singleMode.
	    if (!open && (0, _util.isSingleMode)(props) && props.showSearch) {
	      this.setInputValue('');
	    }
	    if (!open) {
	      this.maybeFocus(open, needFocus);
	    }
	    this.setState(nextState, function () {
	      if (open) {
	        _this3.maybeFocus(open, needFocus);
	      }
	    });
	  },
	  setInputValue: function setInputValue(inputValue) {
	    var fireSearch = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    this.setState({
	      inputValue: inputValue
	    });
	    if (fireSearch) {
	      this.props.onSearch(inputValue);
	    }
	  },
	  clearBlurTime: function clearBlurTime() {
	    if (this.blurTimer) {
	      clearTimeout(this.blurTimer);
	      this.blurTimer = null;
	    }
	  },
	  updateFocusClassName: function updateFocusClassName() {
	    var refs = this.refs;
	    var props = this.props;
	    // avoid setState and its side effect

	    if (this._focused) {
	      (0, _componentClasses2["default"])(refs.root).add(props.prefixCls + '-focused');
	    } else {
	      (0, _componentClasses2["default"])(refs.root).remove(props.prefixCls + '-focused');
	    }
	  },
	  maybeFocus: function maybeFocus(open, needFocus) {
	    if (needFocus || open) {
	      var input = this.getInputDOMNode();
	      var _document = document;
	      var activeElement = _document.activeElement;

	      if (input && (open || (0, _util.isMultipleOrTagsOrCombobox)(this.props))) {
	        if (activeElement !== input) {
	          input.focus();
	        }
	      } else {
	        var selection = this.refs.selection;
	        if (activeElement !== selection) {
	          selection.focus();
	        }
	      }
	    }
	  },
	  addLabelToValue: function addLabelToValue(props, value_) {
	    var _this4 = this;

	    var value = value_;
	    if (props.labelInValue) {
	      value.forEach(function (v) {
	        v.label = v.label || _this4.getLabelFromProps(props, v.key);
	      });
	    } else {
	      value = value.map(function (v) {
	        return {
	          key: v,
	          label: _this4.getLabelFromProps(props, v)
	        };
	      });
	    }
	    return value;
	  },
	  removeSelected: function removeSelected(selectedKey) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var label = void 0;
	    var value = this.state.value.filter(function (singleValue) {
	      if (singleValue.key === selectedKey) {
	        label = singleValue.label;
	      }
	      return singleValue.key !== selectedKey;
	    });
	    var canMultiple = (0, _util.isMultipleOrTags)(props);

	    if (canMultiple) {
	      var event = selectedKey;
	      if (props.labelInValue) {
	        event = {
	          key: selectedKey,
	          label: label
	        };
	      }
	      props.onDeselect(event);
	    }
	    this.fireChange(value);
	  },
	  openIfHasChildren: function openIfHasChildren() {
	    var props = this.props;
	    if (_react2["default"].Children.count(props.children) || (0, _util.isSingleMode)(props)) {
	      this.setOpenState(true);
	    }
	  },
	  fireChange: function fireChange(value) {
	    var props = this.props;
	    if (!('value' in props)) {
	      this.setState({
	        value: value
	      });
	    }
	    props.onChange(this.getVLForOnChange(value));
	  },
	  renderTopControlNode: function renderTopControlNode() {
	    var _this5 = this;

	    var _state = this.state;
	    var value = _state.value;
	    var open = _state.open;
	    var inputValue = _state.inputValue;

	    var props = this.props;
	    var choiceTransitionName = props.choiceTransitionName;
	    var prefixCls = props.prefixCls;
	    var maxTagTextLength = props.maxTagTextLength;
	    var showSearch = props.showSearch;

	    var className = prefixCls + '-selection__rendered';
	    // search input is inside topControlNode in single, multiple & combobox. 2016/04/13
	    var innerNode = null;
	    if ((0, _util.isSingleMode)(props)) {
	      var selectedValue = null;
	      if (value.length) {
	        var showSelectedValue = false;
	        var opacity = 1;
	        if (!showSearch) {
	          showSelectedValue = true;
	        } else {
	          if (open) {
	            showSelectedValue = !inputValue;
	            if (showSelectedValue) {
	              opacity = 0.4;
	            }
	          } else {
	            showSelectedValue = true;
	          }
	        }
	        selectedValue = _react2["default"].createElement(
	          'div',
	          {
	            key: 'value',
	            className: prefixCls + '-selection-selected-value',
	            title: value[0].label,
	            style: {
	              display: showSelectedValue ? 'block' : 'none',
	              opacity: opacity
	            }
	          },
	          value[0].label
	        );
	      }
	      if (!showSearch) {
	        innerNode = [selectedValue];
	      } else {
	        innerNode = [selectedValue, _react2["default"].createElement(
	          'div',
	          {
	            className: prefixCls + '-search ' + prefixCls + '-search--inline',
	            key: 'input',
	            style: {
	              display: open ? 'block' : 'none'
	            }
	          },
	          this.getInputElement()
	        )];
	      }
	    } else {
	      var selectedValueNodes = [];
	      if ((0, _util.isMultipleOrTags)(props)) {
	        selectedValueNodes = value.map(function (singleValue) {
	          var content = singleValue.label;
	          var title = content;
	          if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
	            content = content.slice(0, maxTagTextLength) + '...';
	          }
	          var disabled = (0, _util.toArray)(props.children).some(function (child) {
	            var childValue = (0, _util.getValuePropValue)(child);
	            return childValue === singleValue.key && child.props && child.props.disabled;
	          });
	          var choiceClassName = disabled ? prefixCls + '-selection__choice ' + prefixCls + '-selection__choice__disabled' : prefixCls + '-selection__choice';
	          return _react2["default"].createElement(
	            'li',
	            (0, _extends3["default"])({
	              style: _util.UNSELECTABLE_STYLE
	            }, _util.UNSELECTABLE_ATTRIBUTE, {
	              onMouseDown: _util.preventDefaultEvent,
	              className: choiceClassName,
	              key: singleValue.key,
	              title: title
	            }),
	            _react2["default"].createElement(
	              'div',
	              { className: prefixCls + '-selection__choice__content' },
	              content
	            ),
	            disabled ? null : _react2["default"].createElement('span', {
	              className: prefixCls + '-selection__choice__remove',
	              onClick: _this5.removeSelected.bind(_this5, singleValue.key)
	            })
	          );
	        });
	      }
	      selectedValueNodes.push(_react2["default"].createElement(
	        'li',
	        {
	          className: prefixCls + '-search ' + prefixCls + '-search--inline',
	          key: '__input'
	        },
	        this.getInputElement()
	      ));

	      if ((0, _util.isMultipleOrTags)(props) && choiceTransitionName) {
	        innerNode = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            onLeave: this.onChoiceAnimationLeave,
	            component: 'ul',
	            transitionName: choiceTransitionName
	          },
	          selectedValueNodes
	        );
	      } else {
	        innerNode = _react2["default"].createElement(
	          'ul',
	          null,
	          selectedValueNodes
	        );
	      }
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: className },
	      this.getPlaceholderElement(),
	      innerNode
	    );
	  },
	  render: function render() {
	    var _rootCls;

	    var props = this.props;
	    var multiple = (0, _util.isMultipleOrTags)(props);
	    var state = this.state;
	    var className = props.className;
	    var disabled = props.disabled;
	    var allowClear = props.allowClear;
	    var prefixCls = props.prefixCls;

	    var ctrlNode = this.renderTopControlNode();
	    var extraSelectionProps = {};
	    var open = this.state.open;

	    var options = [];
	    if (open) {
	      options = this.renderFilterOptions();
	    }
	    this._options = options;
	    if (open && ((0, _util.isMultipleOrTagsOrCombobox)(props) || !props.showSearch) && !options.length) {
	      open = false;
	    }
	    if (!(0, _util.isMultipleOrTagsOrCombobox)(props)) {
	      extraSelectionProps = {
	        onKeyDown: this.onKeyDown,
	        tabIndex: 0
	      };
	    }
	    var rootCls = (_rootCls = {}, (0, _defineProperty3["default"])(_rootCls, className, !!className), (0, _defineProperty3["default"])(_rootCls, prefixCls, 1), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-open', open), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-focused', open || !!this._focused), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-combobox', (0, _util.isCombobox)(props)), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-disabled', disabled), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-enabled', !disabled), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-allow-clear', !!props.allowClear), _rootCls);
	    var clearStyle = (0, _extends3["default"])({}, _util.UNSELECTABLE_STYLE, {
	      display: 'none'
	    });
	    if (state.inputValue || state.value.length) {
	      clearStyle.display = 'block';
	    }
	    var clear = _react2["default"].createElement('span', (0, _extends3["default"])({
	      key: 'clear',
	      onMouseDown: _util.preventDefaultEvent,
	      style: clearStyle
	    }, _util.UNSELECTABLE_ATTRIBUTE, {
	      className: prefixCls + '-selection__clear',
	      onClick: this.onClearSelection
	    }));
	    return _react2["default"].createElement(
	      _SelectTrigger2["default"],
	      {
	        onPopupFocus: this.onPopupFocus,
	        dropdownAlign: props.dropdownAlign,
	        dropdownClassName: props.dropdownClassName,
	        dropdownMatchSelectWidth: props.dropdownMatchSelectWidth,
	        defaultActiveFirstOption: props.defaultActiveFirstOption,
	        dropdownMenuStyle: props.dropdownMenuStyle,
	        transitionName: props.transitionName,
	        animation: props.animation,
	        prefixCls: props.prefixCls,
	        dropdownStyle: props.dropdownStyle,
	        combobox: props.combobox,
	        showSearch: props.showSearch,
	        options: options,
	        multiple: multiple,
	        disabled: disabled,
	        visible: open,
	        inputValue: state.inputValue,
	        value: state.value,
	        onDropdownVisibleChange: this.onDropdownVisibleChange,
	        getPopupContainer: props.getPopupContainer,
	        onMenuSelect: this.onMenuSelect,
	        onMenuDeselect: this.onMenuDeselect,
	        ref: 'trigger'
	      },
	      _react2["default"].createElement(
	        'div',
	        {
	          style: props.style,
	          ref: 'root',
	          onBlur: this.onOuterBlur,
	          onFocus: this.onOuterFocus,
	          className: (0, _classnames2["default"])(rootCls)
	        },
	        _react2["default"].createElement(
	          'div',
	          (0, _extends3["default"])({
	            ref: 'selection',
	            key: 'selection',
	            className: prefixCls + '-selection\n            ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
	            role: 'combobox',
	            'aria-autocomplete': 'list',
	            'aria-haspopup': 'true',
	            'aria-expanded': open
	          }, extraSelectionProps),
	          ctrlNode,
	          allowClear && !multiple ? clear : null,
	          multiple || !props.showArrow ? null : _react2["default"].createElement(
	            'span',
	            (0, _extends3["default"])({
	              key: 'arrow',
	              className: prefixCls + '-arrow',
	              style: _util.UNSELECTABLE_STYLE
	            }, _util.UNSELECTABLE_ATTRIBUTE, {
	              onMouseDown: _util.preventDefaultEvent,
	              onClick: this.onArrowClick
	            }),
	            _react2["default"].createElement('b', null)
	          )
	        )
	      )
	    );
	  }
	});

	exports["default"] = Select;
	module.exports = exports['default'];

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _defineProperty = __webpack_require__(15);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2["default"])(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(16), __esModule: true };

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(17);
	var $Object = __webpack_require__(20).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(18);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(28), 'Object', {defineProperty: __webpack_require__(24).f});

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(19)
	  , core      = __webpack_require__(20)
	  , ctx       = __webpack_require__(21)
	  , hide      = __webpack_require__(23)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 19 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 20 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(22);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(24)
	  , createDesc = __webpack_require__(32);
	module.exports = __webpack_require__(28) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(25)
	  , IE8_DOM_DEFINE = __webpack_require__(27)
	  , toPrimitive    = __webpack_require__(31)
	  , dP             = Object.defineProperty;

	exports.f = __webpack_require__(28) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(26);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(28) && !__webpack_require__(29)(function(){
	  return Object.defineProperty(__webpack_require__(30)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(29)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(26)
	  , document = __webpack_require__(19).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(26);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _assign = __webpack_require__(34);

	var _assign2 = _interopRequireDefault(_assign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _assign2["default"] || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(35), __esModule: true };

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(36);
	module.exports = __webpack_require__(20).Object.assign;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(18);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(37)});

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(38)
	  , gOPS     = __webpack_require__(53)
	  , pIE      = __webpack_require__(54)
	  , toObject = __webpack_require__(55)
	  , IObject  = __webpack_require__(42)
	  , $assign  = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(29)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(39)
	  , enumBugKeys = __webpack_require__(52);

	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(40)
	  , toIObject    = __webpack_require__(41)
	  , arrayIndexOf = __webpack_require__(45)(false)
	  , IE_PROTO     = __webpack_require__(49)('IE_PROTO');

	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 40 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(42)
	  , defined = __webpack_require__(44);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(43);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(41)
	  , toLength  = __webpack_require__(46)
	  , toIndex   = __webpack_require__(48);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(47)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(47)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(50)('keys')
	  , uid    = __webpack_require__(51);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(19)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 51 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 52 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 53 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 54 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(44);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 56 */
/***/ function(module, exports) {

	module.exports = window.ReactDOM || window.React;

/***/ },
/* 57 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function isCharacterKey(keyCode) {
	  if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

	module.exports = KeyCode;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(59);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _possibleConstructorReturn2 = __webpack_require__(60);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(96);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var OptGroup = function (_React$Component) {
	  (0, _inherits3["default"])(OptGroup, _React$Component);

	  function OptGroup() {
	    (0, _classCallCheck3["default"])(this, OptGroup);
	    return (0, _possibleConstructorReturn3["default"])(this, _React$Component.apply(this, arguments));
	  }

	  return OptGroup;
	}(_react2["default"].Component);

	exports["default"] = OptGroup;
	module.exports = exports['default'];

/***/ },
/* 59 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _typeof2 = __webpack_require__(61);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3["default"])(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _iterator = __webpack_require__(62);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _symbol = __webpack_require__(82);

	var _symbol2 = _interopRequireDefault(_symbol);

	var _typeof = typeof _symbol2["default"] === "function" && typeof _iterator2["default"] === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2["default"] === "function" && obj.constructor === _symbol2["default"] && obj !== _symbol2["default"].prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = typeof _symbol2["default"] === "function" && _typeof(_iterator2["default"]) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2["default"] === "function" && obj.constructor === _symbol2["default"] && obj !== _symbol2["default"].prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(63), __esModule: true };

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(64);
	__webpack_require__(77);
	module.exports = __webpack_require__(81).f('iterator');

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(65)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(66)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(47)
	  , defined   = __webpack_require__(44);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(67)
	  , $export        = __webpack_require__(18)
	  , redefine       = __webpack_require__(68)
	  , hide           = __webpack_require__(23)
	  , has            = __webpack_require__(40)
	  , Iterators      = __webpack_require__(69)
	  , $iterCreate    = __webpack_require__(70)
	  , setToStringTag = __webpack_require__(74)
	  , getPrototypeOf = __webpack_require__(76)
	  , ITERATOR       = __webpack_require__(75)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(23);

/***/ },
/* 69 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(71)
	  , descriptor     = __webpack_require__(32)
	  , setToStringTag = __webpack_require__(74)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(23)(IteratorPrototype, __webpack_require__(75)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(25)
	  , dPs         = __webpack_require__(72)
	  , enumBugKeys = __webpack_require__(52)
	  , IE_PROTO    = __webpack_require__(49)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(30)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(73).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(24)
	  , anObject = __webpack_require__(25)
	  , getKeys  = __webpack_require__(38);

	module.exports = __webpack_require__(28) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(19).document && document.documentElement;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(24).f
	  , has = __webpack_require__(40)
	  , TAG = __webpack_require__(75)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(50)('wks')
	  , uid        = __webpack_require__(51)
	  , Symbol     = __webpack_require__(19).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(40)
	  , toObject    = __webpack_require__(55)
	  , IE_PROTO    = __webpack_require__(49)('IE_PROTO')
	  , ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(78);
	var global        = __webpack_require__(19)
	  , hide          = __webpack_require__(23)
	  , Iterators     = __webpack_require__(69)
	  , TO_STRING_TAG = __webpack_require__(75)('toStringTag');

	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(79)
	  , step             = __webpack_require__(80)
	  , Iterators        = __webpack_require__(69)
	  , toIObject        = __webpack_require__(41);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(66)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 79 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 80 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(75);

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(83), __esModule: true };

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(84);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	module.exports = __webpack_require__(20).Symbol;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(19)
	  , has            = __webpack_require__(40)
	  , DESCRIPTORS    = __webpack_require__(28)
	  , $export        = __webpack_require__(18)
	  , redefine       = __webpack_require__(68)
	  , META           = __webpack_require__(85).KEY
	  , $fails         = __webpack_require__(29)
	  , shared         = __webpack_require__(50)
	  , setToStringTag = __webpack_require__(74)
	  , uid            = __webpack_require__(51)
	  , wks            = __webpack_require__(75)
	  , wksExt         = __webpack_require__(81)
	  , wksDefine      = __webpack_require__(86)
	  , keyOf          = __webpack_require__(87)
	  , enumKeys       = __webpack_require__(88)
	  , isArray        = __webpack_require__(89)
	  , anObject       = __webpack_require__(25)
	  , toIObject      = __webpack_require__(41)
	  , toPrimitive    = __webpack_require__(31)
	  , createDesc     = __webpack_require__(32)
	  , _create        = __webpack_require__(71)
	  , gOPNExt        = __webpack_require__(90)
	  , $GOPD          = __webpack_require__(92)
	  , $DP            = __webpack_require__(24)
	  , $keys          = __webpack_require__(38)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(91).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(54).f  = $propertyIsEnumerable;
	  __webpack_require__(53).f = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(67)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(23)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(51)('meta')
	  , isObject = __webpack_require__(26)
	  , has      = __webpack_require__(40)
	  , setDesc  = __webpack_require__(24).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(29)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(19)
	  , core           = __webpack_require__(20)
	  , LIBRARY        = __webpack_require__(67)
	  , wksExt         = __webpack_require__(81)
	  , defineProperty = __webpack_require__(24).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(38)
	  , toIObject = __webpack_require__(41);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(38)
	  , gOPS    = __webpack_require__(53)
	  , pIE     = __webpack_require__(54);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(43);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(41)
	  , gOPN      = __webpack_require__(91).f
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(39)
	  , hiddenKeys = __webpack_require__(52).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(54)
	  , createDesc     = __webpack_require__(32)
	  , toIObject      = __webpack_require__(41)
	  , toPrimitive    = __webpack_require__(31)
	  , has            = __webpack_require__(40)
	  , IE8_DOM_DEFINE = __webpack_require__(27)
	  , gOPD           = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(28) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 93 */
/***/ function(module, exports) {

	

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(86)('asyncIterator');

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(86)('observable');

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _setPrototypeOf = __webpack_require__(97);

	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

	var _create = __webpack_require__(101);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(61);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3["default"])(superClass)));
	  }

	  subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(98), __esModule: true };

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(99);
	module.exports = __webpack_require__(20).Object.setPrototypeOf;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(18);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(100).set});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(26)
	  , anObject = __webpack_require__(25);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(21)(Function.call, __webpack_require__(92).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(102), __esModule: true };

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(103);
	var $Object = __webpack_require__(20).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(18)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(71)});

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	// export this package's api
	'use strict';

	module.exports = __webpack_require__(105);

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _ChildrenUtils = __webpack_require__(106);

	var _AnimateChild = __webpack_require__(107);

	var _AnimateChild2 = _interopRequireDefault(_AnimateChild);

	var _util = __webpack_require__(112);

	var _util2 = _interopRequireDefault(_util);

	var defaultKey = 'rc_animate_' + Date.now();

	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2['default'].isValidElement(children)) {
	    if (!children.key) {
	      return _react2['default'].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop() {}

	var Animate = _react2['default'].createClass({
	  displayName: 'Animate',

	  propTypes: {
	    component: _react2['default'].PropTypes.any,
	    animation: _react2['default'].PropTypes.object,
	    transitionName: _react2['default'].PropTypes.string,
	    transitionEnter: _react2['default'].PropTypes.bool,
	    transitionAppear: _react2['default'].PropTypes.bool,
	    exclusive: _react2['default'].PropTypes.bool,
	    transitionLeave: _react2['default'].PropTypes.bool,
	    onEnd: _react2['default'].PropTypes.func,
	    onEnter: _react2['default'].PropTypes.func,
	    onLeave: _react2['default'].PropTypes.func,
	    onAppear: _react2['default'].PropTypes.func,
	    showProp: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animation: {},
	      component: 'span',
	      transitionEnter: true,
	      transitionLeave: true,
	      transitionAppear: false,
	      onEnd: noop,
	      onEnter: noop,
	      onLeave: noop,
	      onAppear: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    this.currentlyAnimatingKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	    return {
	      children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(this.props))
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      _this.performAppear(child.key);
	    });
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    this.nextProps = nextProps;
	    var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this2.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = undefined;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2['default'].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
	    }

	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });

	    nextChildren.forEach(function (child) {
	      var key = child.key;
	      if (currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this2.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this2.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this2.keysToEnter.push(key);
	      }
	    });

	    currentChildren.forEach(function (child) {
	      var key = child.key;
	      if (currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this2.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this2.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this2.keysToLeave.push(key);
	      }
	    });
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.isMounted()) {
	      var keysToEnter = this.keysToEnter;
	      this.keysToEnter = [];
	      keysToEnter.forEach(this.performEnter);
	      var keysToLeave = this.keysToLeave;
	      this.keysToLeave = [];
	      keysToLeave.forEach(this.performLeave);
	    }
	  },

	  performEnter: function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  },

	  performAppear: function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  },

	  handleDoneAdding: function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2['default'].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2['default'].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  },

	  performLeave: function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  },

	  handleDoneLeaving: function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      if (this.isMounted() && !(0, _ChildrenUtils.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        });
	      }
	      if (_util2['default'].allowLeaveCallback(props)) {
	        props.onLeave(key);
	        props.onEnd(key, false);
	      }
	    }
	  },

	  isValidChildByKey: function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	  },

	  stop: function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  },

	  render: function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2['default'].createElement(
	          _AnimateChild2['default'],
	          {
	            key: child.key,
	            ref: child.key,
	            animation: props.animation,
	            transitionName: props.transitionName,
	            transitionEnter: props.transitionEnter,
	            transitionAppear: props.transitionAppear,
	            transitionLeave: props.transitionLeave },
	          child
	        );
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      return _react2['default'].createElement(
	        Component,
	        this.props,
	        children
	      );
	    }
	    return children[0] || null;
	  }
	});

	exports['default'] = Animate;
	module.exports = exports['default'];

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function toArrayChildren(children) {
	  var ret = [];
	  _react2['default'].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child.key !== child2.key) {
	        same = false;
	      } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	        same = false;
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _cssAnimation = __webpack_require__(108);

	var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

	var _util = __webpack_require__(112);

	var _util2 = _interopRequireDefault(_util);

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var AnimateChild = _react2['default'].createClass({
	  displayName: 'AnimateChild',

	  propTypes: {
	    children: _react2['default'].PropTypes.any
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.stop();
	  },

	  componentWillEnter: function componentWillEnter(done) {
	    if (_util2['default'].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillAppear: function componentWillAppear(done) {
	    if (_util2['default'].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function componentWillLeave(done) {
	    if (_util2['default'].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  transition: function transition(animationType, finishCallback) {
	    var _this = this;

	    var node = _reactDom2['default'].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    this.stop();
	    var end = function end() {
	      _this.stopper = null;
	      finishCallback();
	    };
	    if ((_cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      this.stopper = (0, _cssAnimation2['default'])(node, transitionName + '-' + animationType, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  },

	  stop: function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  },

	  render: function render() {
	    return this.props.children;
	  }
	});

	exports['default'] = AnimateChild;
	module.exports = exports['default'];

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _Event = __webpack_require__(109);

	var _Event2 = _interopRequireDefault(_Event);

	var _componentClasses = __webpack_require__(110);

	var _componentClasses2 = _interopRequireDefault(_componentClasses);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var isCssAnimationSupported = _Event2["default"].endEvents.length !== 0;


	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

	function getStyleProperty(node, name) {
	  var style = window.getComputedStyle(node);

	  var ret = '';
	  for (var i = 0; i < prefixes.length; i++) {
	    ret = style.getPropertyValue(prefixes[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}

	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
	    var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
	    var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
	    var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}

	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}

	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	  var className = nameIsObj ? transitionName.name : transitionName;
	  var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;
	  var nodeClasses = (0, _componentClasses2["default"])(node);

	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }

	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    nodeClasses.remove(className);
	    nodeClasses.remove(activeClassName);

	    _Event2["default"].removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };

	  _Event2["default"].addEndEventListener(node, node.rcEndListener);

	  if (start) {
	    start();
	  }
	  nodeClasses.add(className);

	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    nodeClasses.add(activeClassName);
	    if (active) {
	      setTimeout(active, 0);
	    }
	    fixBrowserByTimeout(node);
	    // 30ms for firefox
	  }, 30);

	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};

	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    _Event2["default"].removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };

	  _Event2["default"].addEndEventListener(node, node.rcEndListener);

	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};

	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};

	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

	exports["default"] = cssAnimation;
	module.exports = exports['default'];

/***/ },
/* 109 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },

	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	      var baseEvents = EVENT_NAME_MAP[baseEventName];
	      for (var styleName in baseEvents) {
	        if (styleName in style) {
	          endEvents.push(baseEvents[styleName]);
	          break;
	        }
	      }
	    }
	  }
	}

	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var TransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },


	  endEvents: endEvents,

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports["default"] = TransitionEvents;
	module.exports = exports['default'];

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	try {
	  var index = __webpack_require__(111);
	} catch (err) {
	  var index = __webpack_require__(111);
	}

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	module.exports = function(el){
	  return new ClassList(el);
	};

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function(name){
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function(name){
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function(re){
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function(name, force){
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function(){
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has =
	ClassList.prototype.contains = function(name){
	  return this.list
	    ? this.list.contains(name)
	    : !! ~index(this.array(), name);
	};


/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = function(arr, obj){
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },

	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};
	exports["default"] = util;
	module.exports = exports["default"];

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_STYLE = undefined;
	exports.getValuePropValue = getValuePropValue;
	exports.getPropValue = getPropValue;
	exports.isCombobox = isCombobox;
	exports.isMultipleOrTags = isMultipleOrTags;
	exports.isMultipleOrTagsOrCombobox = isMultipleOrTagsOrCombobox;
	exports.isSingleMode = isSingleMode;
	exports.toArray = toArray;
	exports.preventDefaultEvent = preventDefaultEvent;
	exports.findIndexInValueByKey = findIndexInValueByKey;
	exports.getSelectKeys = getSelectKeys;
	exports.findFirstMenuItem = findFirstMenuItem;

	var _rcMenu = __webpack_require__(114);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getValuePropValue(child) {
	  var props = child.props;
	  if ('value' in props) {
	    return props.value;
	  }
	  if (child.key) {
	    return child.key;
	  }
	  throw new Error('no key or value for ' + child);
	}

	function getPropValue(child, prop) {
	  if (prop === 'value') {
	    return getValuePropValue(child);
	  }
	  return child.props[prop];
	}

	function isCombobox(props) {
	  return props.combobox;
	}

	function isMultipleOrTags(props) {
	  return props.multiple || props.tags;
	}

	function isMultipleOrTagsOrCombobox(props) {
	  return isMultipleOrTags(props) || isCombobox(props);
	}

	function isSingleMode(props) {
	  return !isMultipleOrTagsOrCombobox(props);
	}

	function toArray(value) {
	  var ret = value;
	  if (value === undefined) {
	    ret = [];
	  } else if (!Array.isArray(value)) {
	    ret = [value];
	  }
	  return ret;
	}

	function preventDefaultEvent(e) {
	  e.preventDefault();
	}

	function findIndexInValueByKey(value, key) {
	  var index = -1;
	  for (var i = 0; i < value.length; i++) {
	    if (value[i].key === key) {
	      index = i;
	      break;
	    }
	  }
	  return index;
	}

	function getSelectKeys(menuItems, value) {
	  if (value === null || value === undefined) {
	    return [];
	  }
	  var selectedKeys = [];
	  _react2["default"].Children.forEach(menuItems, function (item) {
	    if (item.type === _rcMenu.ItemGroup) {
	      selectedKeys = selectedKeys.concat(getSelectKeys(item.props.children, value));
	    } else {
	      var itemValue = getValuePropValue(item);
	      var itemKey = item.key;
	      if (findIndexInValueByKey(value, itemValue) !== -1 && itemKey) {
	        selectedKeys.push(itemKey);
	      }
	    }
	  });
	  return selectedKeys;
	}

	var UNSELECTABLE_STYLE = exports.UNSELECTABLE_STYLE = {
	  userSelect: 'none',
	  WebkitUserSelect: 'none'
	};

	var UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_ATTRIBUTE = {
	  unselectable: 'unselectable'
	};

	function findFirstMenuItem(children) {
	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];
	    if (child.type === _rcMenu.ItemGroup) {
	      var found = findFirstMenuItem(child.props.children);
	      if (found) {
	        return found;
	      }
	    } else if (!child.props.disabled) {
	      return child;
	    }
	  }
	  return null;
	}

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Divider = exports.ItemGroup = exports.MenuItemGroup = exports.MenuItem = exports.Item = exports.SubMenu = undefined;

	var _Menu = __webpack_require__(115);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _SubMenu = __webpack_require__(123);

	var _SubMenu2 = _interopRequireDefault(_SubMenu);

	var _MenuItem = __webpack_require__(132);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _MenuItemGroup = __webpack_require__(133);

	var _MenuItemGroup2 = _interopRequireDefault(_MenuItemGroup);

	var _Divider = __webpack_require__(134);

	var _Divider2 = _interopRequireDefault(_Divider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.SubMenu = _SubMenu2["default"];
	exports.Item = _MenuItem2["default"];
	exports.MenuItem = _MenuItem2["default"];
	exports.MenuItemGroup = _MenuItemGroup2["default"];
	exports.ItemGroup = _MenuItemGroup2["default"];
	exports.Divider = _Divider2["default"];
	exports["default"] = _Menu2["default"];

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _MenuMixin = __webpack_require__(116);

	var _MenuMixin2 = _interopRequireDefault(_MenuMixin);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _util = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var Menu = _react2["default"].createClass({
	  displayName: 'Menu',

	  propTypes: {
	    openSubMenuOnMouseEnter: _react.PropTypes.bool,
	    closeSubMenuOnMouseLeave: _react.PropTypes.bool,
	    selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultOpenKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    openKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    mode: _react.PropTypes.string,
	    onClick: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func,
	    onDeselect: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    openTransitionName: _react.PropTypes.string,
	    openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
	    level: _react.PropTypes.number,
	    eventKey: _react.PropTypes.string,
	    selectable: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },

	  mixins: [_MenuMixin2["default"]],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      openSubMenuOnMouseEnter: true,
	      closeSubMenuOnMouseLeave: true,
	      selectable: true,
	      onClick: _util.noop,
	      onSelect: _util.noop,
	      onOpen: _util.noop,
	      onClose: _util.noop,
	      onDeselect: _util.noop,
	      defaultSelectedKeys: [],
	      defaultOpenKeys: []
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var selectedKeys = props.defaultSelectedKeys;
	    var openKeys = props.defaultOpenKeys;
	    if ('selectedKeys' in props) {
	      selectedKeys = props.selectedKeys || [];
	    }
	    if ('openKeys' in props) {
	      openKeys = props.openKeys || [];
	    }
	    return {
	      selectedKeys: selectedKeys,
	      openKeys: openKeys
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var props = {};
	    if ('selectedKeys' in nextProps) {
	      props.selectedKeys = nextProps.selectedKeys;
	    }
	    if ('openKeys' in nextProps) {
	      props.openKeys = nextProps.openKeys;
	    }
	    this.setState(props);
	  },
	  onDestroy: function onDestroy(key) {
	    var state = this.state;
	    var props = this.props;
	    var selectedKeys = state.selectedKeys;
	    var openKeys = state.openKeys;
	    var index = selectedKeys.indexOf(key);
	    if (!('selectedKeys' in props) && index !== -1) {
	      selectedKeys.splice(index, 1);
	    }
	    index = openKeys.indexOf(key);
	    if (!('openKeys' in props) && index !== -1) {
	      openKeys.splice(index, 1);
	    }
	  },
	  onItemHover: function onItemHover(e) {
	    var _this = this;

	    var item = e.item;
	    // special for top sub menu

	    if (this.props.mode !== 'inline' && !this.props.closeSubMenuOnMouseLeave && item.isSubMenu) {
	      (function () {
	        var activeKey = _this.state.activeKey;
	        var activeItem = _this.getFlatInstanceArray().filter(function (c) {
	          return c && c.props.eventKey === activeKey;
	        })[0];
	        if (activeItem && activeItem.props.open) {
	          _this.onOpenChange({
	            key: item.props.eventKey,
	            item: e.item,
	            open: true
	          });
	        }
	      })();
	    }

	    this.onCommonItemHover(e);
	  },
	  onSelect: function onSelect(selectInfo) {
	    var props = this.props;
	    if (props.selectable) {
	      // root menu
	      var selectedKeys = this.state.selectedKeys;
	      var selectedKey = selectInfo.key;
	      if (props.multiple) {
	        selectedKeys = selectedKeys.concat([selectedKey]);
	      } else {
	        selectedKeys = [selectedKey];
	      }
	      if (!('selectedKeys' in props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onSelect((0, _objectAssign2["default"])({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  },
	  onClick: function onClick(e) {
	    this.props.onClick(e);
	  },
	  onOpenChange: function onOpenChange(e) {
	    var props = this.props;
	    var openKeys = this.state.openKeys;
	    var changed = true;
	    if (e.open) {
	      changed = openKeys.indexOf(e.key) === -1;
	      if (changed) {
	        openKeys = openKeys.concat(e.key);
	      }
	    } else {
	      var index = openKeys.indexOf(e.key);
	      changed = index !== -1;
	      if (changed) {
	        openKeys = openKeys.concat();
	        openKeys.splice(index, 1);
	      }
	    }
	    if (changed) {
	      // hack, synchronous call from onTitleMouseEnter
	      this.state.openKeys = openKeys;
	      if (!('openKeys' in this.props)) {
	        // hack: batch does not update state
	        this.setState({ openKeys: openKeys });
	      }
	      var info = (0, _objectAssign2["default"])({ openKeys: openKeys }, e);
	      if (e.open) {
	        props.onOpen(info);
	      } else {
	        props.onClose(info);
	      }
	    }
	  },
	  onDeselect: function onDeselect(selectInfo) {
	    var props = this.props;
	    if (props.selectable) {
	      var selectedKeys = this.state.selectedKeys.concat();
	      var selectedKey = selectInfo.key;
	      var index = selectedKeys.indexOf(selectedKey);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	      if (!('selectedKeys' in props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onDeselect((0, _objectAssign2["default"])({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  },
	  getOpenTransitionName: function getOpenTransitionName() {
	    var props = this.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  },
	  isInlineMode: function isInlineMode() {
	    return this.props.mode === 'inline';
	  },
	  lastOpenSubMenu: function lastOpenSubMenu() {
	    var _this2 = this;

	    var lastOpen = [];
	    if (this.state.openKeys.length) {
	      lastOpen = this.getFlatInstanceArray().filter(function (c) {
	        return c && _this2.state.openKeys.indexOf(c.props.eventKey) !== -1;
	      });
	    }
	    return lastOpen[0];
	  },
	  renderMenuItem: function renderMenuItem(c, i, subIndex) {
	    if (!c) {
	      return null;
	    }
	    var state = this.state;
	    var extraProps = {
	      openKeys: state.openKeys,
	      selectedKeys: state.selectedKeys,
	      openSubMenuOnMouseEnter: this.props.openSubMenuOnMouseEnter
	    };
	    return this.renderCommonMenuItem(c, i, subIndex, extraProps);
	  },
	  render: function render() {
	    var props = (0, _objectAssign2["default"])({}, this.props);
	    props.className += ' ' + props.prefixCls + '-root';
	    return this.renderRoot(props);
	  }
	});

	exports["default"] = Menu;
	module.exports = exports['default'];

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _createChainedFunction = __webpack_require__(117);

	var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _domScrollIntoView = __webpack_require__(118);

	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _util = __webpack_require__(121);

	var _DOMWrap = __webpack_require__(122);

	var _DOMWrap2 = _interopRequireDefault(_DOMWrap);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function allDisabled(arr) {
	  if (!arr.length) {
	    return true;
	  }
	  return arr.every(function (c) {
	    return !!c.props.disabled;
	  });
	}

	function getActiveKey(props, originalActiveKey) {
	  var activeKey = originalActiveKey;
	  var children = props.children;
	  var eventKey = props.eventKey;
	  if (activeKey) {
	    var found = void 0;
	    (0, _util.loopMenuItem)(children, function (c, i) {
	      if (!c.props.disabled && activeKey === (0, _util.getKeyFromChildrenIndex)(c, eventKey, i)) {
	        found = true;
	      }
	    });
	    if (found) {
	      return activeKey;
	    }
	  }
	  activeKey = null;
	  if (props.defaultActiveFirst) {
	    (0, _util.loopMenuItem)(children, function (c, i) {
	      if (!activeKey && !c.props.disabled) {
	        activeKey = (0, _util.getKeyFromChildrenIndex)(c, eventKey, i);
	      }
	    });
	    return activeKey;
	  }
	  return activeKey;
	}

	function saveRef(index, subIndex, c) {
	  if (c) {
	    if (subIndex !== undefined) {
	      this.instanceArray[index] = this.instanceArray[index] || [];
	      this.instanceArray[index][subIndex] = c;
	    } else {
	      this.instanceArray[index] = c;
	    }
	  }
	}

	var MenuMixin = {
	  propTypes: {
	    focusable: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    defaultActiveFirst: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    activeKey: _react.PropTypes.string,
	    selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultOpenKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    openKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    children: _react.PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-menu',
	      className: '',
	      mode: 'vertical',
	      level: 1,
	      inlineIndent: 24,
	      visible: true,
	      focusable: true,
	      style: {}
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    return {
	      activeKey: getActiveKey(props, props.activeKey)
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var props = void 0;
	    if ('activeKey' in nextProps) {
	      props = {
	        activeKey: getActiveKey(nextProps, nextProps.activeKey)
	      };
	    } else {
	      var originalActiveKey = this.state.activeKey;
	      var activeKey = getActiveKey(nextProps, originalActiveKey);
	      // fix: this.setState(), parent.render(),
	      if (activeKey !== originalActiveKey) {
	        props = {
	          activeKey: activeKey
	        };
	      }
	    }
	    if (props) {
	      this.setState(props);
	    }
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  },
	  componentWillMount: function componentWillMount() {
	    this.instanceArray = [];
	  },


	  // all keyboard events callbacks run from here at first
	  onKeyDown: function onKeyDown(e) {
	    var _this = this;

	    var keyCode = e.keyCode;
	    var handled = void 0;
	    this.getFlatInstanceArray().forEach(function (obj) {
	      if (obj && obj.props.active) {
	        handled = obj.onKeyDown(e);
	      }
	    });
	    if (handled) {
	      return 1;
	    }
	    var activeItem = null;
	    if (keyCode === _KeyCode2["default"].UP || keyCode === _KeyCode2["default"].DOWN) {
	      activeItem = this.step(keyCode === _KeyCode2["default"].UP ? -1 : 1);
	    }
	    if (activeItem) {
	      e.preventDefault();
	      this.setState({
	        activeKey: activeItem.props.eventKey
	      }, function () {
	        (0, _domScrollIntoView2["default"])(_reactDom2["default"].findDOMNode(activeItem), _reactDom2["default"].findDOMNode(_this), {
	          onlyScrollIfNeeded: true
	        });
	      });
	      return 1;
	    } else if (activeItem === undefined) {
	      e.preventDefault();
	      this.setState({
	        activeKey: null
	      });
	      return 1;
	    }
	  },
	  onCommonItemHover: function onCommonItemHover(e) {
	    var mode = this.props.mode;
	    var key = e.key;
	    var hover = e.hover;
	    var trigger = e.trigger;

	    var activeKey = this.state.activeKey;
	    if (!trigger || hover || this.props.closeSubMenuOnMouseLeave || !e.item.isSubMenu || mode === 'inline') {
	      this.setState({
	        activeKey: hover ? key : null
	      });
	    } else {}
	    // keep active for sub menu for click active
	    // empty

	    // clear last open status
	    if (hover && mode !== 'inline') {
	      var activeItem = this.getFlatInstanceArray().filter(function (c) {
	        return c && c.props.eventKey === activeKey;
	      })[0];
	      if (activeItem && activeItem.isSubMenu && activeItem.props.eventKey !== key) {
	        this.onOpenChange({
	          item: activeItem,
	          key: activeItem.props.eventKey,
	          open: false
	        });
	      }
	    }
	  },
	  getFlatInstanceArray: function getFlatInstanceArray() {
	    var instanceArray = this.instanceArray;
	    var hasInnerArray = instanceArray.some(function (a) {
	      return Array.isArray(a);
	    });
	    if (hasInnerArray) {
	      instanceArray = [];
	      this.instanceArray.forEach(function (a) {
	        if (Array.isArray(a)) {
	          instanceArray.push.apply(instanceArray, a);
	        } else {
	          instanceArray.push(a);
	        }
	      });
	      this.instanceArray = instanceArray;
	    }
	    return instanceArray;
	  },
	  renderCommonMenuItem: function renderCommonMenuItem(child, i, subIndex, extraProps) {
	    var state = this.state;
	    var props = this.props;
	    var key = (0, _util.getKeyFromChildrenIndex)(child, props.eventKey, i);
	    var childProps = child.props;
	    var isActive = key === state.activeKey;
	    var newChildProps = (0, _objectAssign2["default"])({
	      mode: props.mode,
	      level: props.level,
	      inlineIndent: props.inlineIndent,
	      renderMenuItem: this.renderMenuItem,
	      rootPrefixCls: props.prefixCls,
	      index: i,
	      parentMenu: this,
	      ref: childProps.disabled ? undefined : (0, _createChainedFunction2["default"])(child.ref, saveRef.bind(this, i, subIndex)),
	      eventKey: key,
	      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,
	      onItemHover: this.onItemHover,
	      active: !childProps.disabled && isActive,
	      multiple: props.multiple,
	      onClick: this.onClick,
	      openTransitionName: this.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      onSelect: this.onSelect
	    }, extraProps);
	    if (props.mode === 'inline') {
	      newChildProps.closeSubMenuOnMouseLeave = newChildProps.openSubMenuOnMouseEnter = false;
	    }
	    return _react2["default"].cloneElement(child, newChildProps);
	  },
	  renderRoot: function renderRoot(props) {
	    var _classes;

	    this.instanceArray = [];
	    var classes = (_classes = {}, _defineProperty(_classes, props.prefixCls, 1), _defineProperty(_classes, props.prefixCls + '-' + props.mode, 1), _defineProperty(_classes, props.className, !!props.className), _classes);
	    var domProps = {
	      className: (0, _classnames2["default"])(classes),
	      role: 'menu',
	      'aria-activedescendant': ''
	    };
	    if (props.id) {
	      domProps.id = props.id;
	    }
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    return(
	      // ESLint is not smart enough to know that the type of `children` was checked.
	      /* eslint-disable */
	      _react2["default"].createElement(
	        _DOMWrap2["default"],
	        _extends({
	          style: props.style,
	          tag: 'ul',
	          hiddenClassName: props.prefixCls + '-hidden',
	          visible: props.visible
	        }, domProps),
	        _react2["default"].Children.map(props.children, this.renderMenuItem)
	      )
	      /*eslint-enable */

	    );
	  },
	  step: function step(direction) {
	    var children = this.getFlatInstanceArray();
	    var activeKey = this.state.activeKey;
	    var len = children.length;
	    if (!len) {
	      return null;
	    }
	    if (direction < 0) {
	      children = children.concat().reverse();
	    }
	    // find current activeIndex
	    var activeIndex = -1;
	    children.every(function (c, ci) {
	      if (c && c.props.eventKey === activeKey) {
	        activeIndex = ci;
	        return false;
	      }
	      return true;
	    });
	    if (!this.props.defaultActiveFirst && activeIndex !== -1) {
	      if (allDisabled(children.slice(activeIndex, len - 1))) {
	        return undefined;
	      }
	    }
	    var start = (activeIndex + 1) % len;
	    var i = start;
	    for (;;) {
	      var child = children[i];
	      if (!child || child.props.disabled) {
	        i = (i + 1 + len) % len;
	        // complete a loop
	        if (i === start) {
	          return null;
	        }
	      } else {
	        return child;
	      }
	    }
	  }
	};

	exports["default"] = MenuMixin;
	module.exports = exports['default'];

/***/ },
/* 117 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = arguments;
	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}

	module.exports = createChainedFunction;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(119);

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(120);

	function scrollIntoView(elem, container, config) {
	  config = config || {};
	  // document 归一化到 window
	  if (container.nodeType === 9) {
	    container = util.getWindow(container);
	  }

	  var allowHorizontalScroll = config.allowHorizontalScroll;
	  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
	  var alignWithTop = config.alignWithTop;
	  var alignWithLeft = config.alignWithLeft;
	  var offsetTop = config.offsetTop || 0;
	  var offsetLeft = config.offsetLeft || 0;
	  var offsetBottom = config.offsetBottom || 0;
	  var offsetRight = config.offsetRight || 0;

	  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;

	  var isWin = util.isWindow(container);
	  var elemOffset = util.offset(elem);
	  var eh = util.outerHeight(elem);
	  var ew = util.outerWidth(elem);
	  var containerOffset = undefined;
	  var ch = undefined;
	  var cw = undefined;
	  var containerScroll = undefined;
	  var diffTop = undefined;
	  var diffBottom = undefined;
	  var win = undefined;
	  var winScroll = undefined;
	  var ww = undefined;
	  var wh = undefined;

	  if (isWin) {
	    win = container;
	    wh = util.height(win);
	    ww = util.width(win);
	    winScroll = {
	      left: util.scrollLeft(win),
	      top: util.scrollTop(win)
	    };
	    // elem 相对 container 可视视窗的距离
	    diffTop = {
	      left: elemOffset.left - winScroll.left - offsetLeft,
	      top: elemOffset.top - winScroll.top - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
	      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
	    };
	    containerScroll = winScroll;
	  } else {
	    containerOffset = util.offset(container);
	    ch = container.clientHeight;
	    cw = container.clientWidth;
	    containerScroll = {
	      left: container.scrollLeft,
	      top: container.scrollTop
	    };
	    // elem 相对 container 可视视窗的距离
	    // 注意边框, offset 是边框到根节点
	    diffTop = {
	      left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
	      top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, 'borderTopWidth')) || 0)) - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, 'borderRightWidth')) || 0)) + offsetRight,
	      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
	    };
	  }

	  if (diffTop.top < 0 || diffBottom.top > 0) {
	    // 强制向上
	    if (alignWithTop === true) {
	      util.scrollTop(container, containerScroll.top + diffTop.top);
	    } else if (alignWithTop === false) {
	      util.scrollTop(container, containerScroll.top + diffBottom.top);
	    } else {
	      // 自动调整
	      if (diffTop.top < 0) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  } else {
	    if (!onlyScrollIfNeeded) {
	      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
	      if (alignWithTop) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  }

	  if (allowHorizontalScroll) {
	    if (diffTop.left < 0 || diffBottom.left > 0) {
	      // 强制向上
	      if (alignWithLeft === true) {
	        util.scrollLeft(container, containerScroll.left + diffTop.left);
	      } else if (alignWithLeft === false) {
	        util.scrollLeft(container, containerScroll.left + diffBottom.left);
	      } else {
	        // 自动调整
	        if (diffTop.left < 0) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    } else {
	      if (!onlyScrollIfNeeded) {
	        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
	        if (alignWithLeft) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    }
	  }
	}

	module.exports = scrollIntoView;

/***/ },
/* 120 */
/***/ function(module, exports) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, computedStyle_) {
	  var val = '';
	  var d = elem.ownerDocument;
	  var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	var getComputedStyleX = undefined;
	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj != null && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, extra) {
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue == null || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  }
	  if (borderBoxValueOrIsBorderBox) {
	    var padding = extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle);
	    return val + (extra === BORDER_INDEX ? 0 : padding);
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay(elem) {
	  var val = undefined;
	  var args = arguments;
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value += 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, val) {
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }

	  var old = getOffset(elem);
	  var ret = {};
	  var current = undefined;
	  var key = undefined;

	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      current = parseFloat(css(elem, key)) || 0;
	      ret[key] = current + offset[key] - old[key];
	    }
	  }
	  css(elem, ret);
	}

	module.exports = _extends({
	  getWindow: function getWindow(node) {
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value);
	    } else {
	      return getOffset(el);
	    }
	  },

	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var ret = {};
	    for (var i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (var i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  scrollLeft: function scrollLeft(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollLeft(w);
	      }
	      window.scrollTo(v, getScrollTop(w));
	    } else {
	      if (v === undefined) {
	        return w.scrollLeft;
	      }
	      w.scrollLeft = v;
	    }
	  },
	  scrollTop: function scrollTop(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollTop(w);
	      }
	      window.scrollTo(getScrollLeft(w), v);
	    } else {
	      if (v === undefined) {
	        return w.scrollTop;
	      }
	      w.scrollTop = v;
	    }
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
	}, domUtils);

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.noop = noop;
	exports.getKeyFromChildrenIndex = getKeyFromChildrenIndex;
	exports.loopMenuItem = loopMenuItem;
	exports.loopMenuItemRecusively = loopMenuItemRecusively;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var now = Date.now();

	function noop() {}

	function getKeyFromChildrenIndex(child, menuEventKey, index) {
	  var prefix = menuEventKey || '';
	  return child.key || prefix + 'item_' + now + '_' + index;
	}

	function loopMenuItem(children, cb) {
	  var index = -1;
	  _react2["default"].Children.forEach(children, function (c) {
	    index++;
	    if (c && c.type.isMenuItemGroup) {
	      _react2["default"].Children.forEach(c.props.children, function (c2) {
	        index++;
	        cb(c2, index);
	      });
	    } else {
	      cb(c, index);
	    }
	  });
	}

	function loopMenuItemRecusively(children, keys, ret) {
	  if (!children || ret.find) {
	    return;
	  }
	  _react2["default"].Children.forEach(children, function (c) {
	    if (ret.find) {
	      return;
	    }
	    if (c) {
	      var construt = c.type;
	      if (!construt || !(construt.isSubMenu || construt.isMenuItem || construt.isMenuItemGroup)) {
	        return;
	      }
	      if (keys.indexOf(c.key) !== -1) {
	        ret.find = true;
	      } else if (c.props.children) {
	        loopMenuItemRecusively(c.props.children, keys, ret);
	      }
	    }
	  });
	}

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var DOMWrap = _react2["default"].createClass({
	  displayName: 'DOMWrap',

	  propTypes: {
	    tag: _react.PropTypes.string,
	    hiddenClassName: _react.PropTypes.string,
	    visible: _react.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      tag: 'div'
	    };
	  },
	  render: function render() {
	    var props = (0, _objectAssign2["default"])({}, this.props);
	    if (!props.visible) {
	      props.className = props.className || '';
	      props.className += ' ' + props.hiddenClassName;
	    }
	    var Tag = props.tag;
	    delete props.tag;
	    delete props.hiddenClassName;
	    delete props.visible;
	    return _react2["default"].createElement(Tag, props);
	  }
	});

	exports["default"] = DOMWrap;
	module.exports = exports['default'];

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _SubPopupMenu = __webpack_require__(124);

	var _SubPopupMenu2 = _interopRequireDefault(_SubPopupMenu);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _guid = __webpack_require__(125);

	var _guid2 = _interopRequireDefault(_guid);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _util = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/* eslint react/no-is-mounted:0 */

	var SubMenu = _react2["default"].createClass({
	  displayName: 'SubMenu',

	  propTypes: {
	    parentMenu: _react.PropTypes.object,
	    title: _react.PropTypes.node,
	    children: _react.PropTypes.any,
	    selectedKeys: _react.PropTypes.array,
	    openKeys: _react.PropTypes.array,
	    onClick: _react.PropTypes.func,
	    onOpenChange: _react.PropTypes.func,
	    rootPrefixCls: _react.PropTypes.string,
	    eventKey: _react.PropTypes.string,
	    multiple: _react.PropTypes.bool,
	    active: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    closeSubMenuOnMouseLeave: _react.PropTypes.bool,
	    openSubMenuOnMouseEnter: _react.PropTypes.bool,
	    onDeselect: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    onItemHover: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func,
	    onTitleMouseEnter: _react.PropTypes.func,
	    onTitleMouseLeave: _react.PropTypes.func,
	    onTitleClick: _react.PropTypes.func
	  },

	  mixins: [__webpack_require__(126)],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onMouseEnter: _util.noop,
	      onMouseLeave: _util.noop,
	      onTitleMouseEnter: _util.noop,
	      onTitleMouseLeave: _util.noop,
	      onTitleClick: _util.noop,
	      title: ''
	    };
	  },
	  getInitialState: function getInitialState() {
	    this.isSubMenu = 1;
	    return {
	      defaultActiveFirst: false
	    };
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	    if (props.parentMenu.subMenuInstance === this) {
	      this.clearSubMenuTimers();
	    }
	  },
	  onDestroy: function onDestroy(key) {
	    this.props.onDestroy(key);
	  },
	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    var menu = this.menuInstance;
	    var isOpen = this.isOpen();

	    if (keyCode === _KeyCode2["default"].ENTER) {
	      this.onTitleClick(e);
	      this.setState({
	        defaultActiveFirst: true
	      });
	      return true;
	    }

	    if (keyCode === _KeyCode2["default"].RIGHT) {
	      if (isOpen) {
	        menu.onKeyDown(e);
	      } else {
	        this.triggerOpenChange(true);
	        this.setState({
	          defaultActiveFirst: true
	        });
	      }
	      return true;
	    }
	    if (keyCode === _KeyCode2["default"].LEFT) {
	      var handled = void 0;
	      if (isOpen) {
	        handled = menu.onKeyDown(e);
	      } else {
	        return undefined;
	      }
	      if (!handled) {
	        this.triggerOpenChange(false);
	        handled = true;
	      }
	      return handled;
	    }

	    if (isOpen && (keyCode === _KeyCode2["default"].UP || keyCode === _KeyCode2["default"].DOWN)) {
	      return menu.onKeyDown(e);
	    }
	  },
	  onOpenChange: function onOpenChange(e) {
	    this.props.onOpenChange(this.addKeyPath(e));
	  },
	  onMouseEnter: function onMouseEnter(e) {
	    var props = this.props;
	    this.clearSubMenuLeaveTimer(props.parentMenu.subMenuInstance !== this);
	    props.onMouseEnter({
	      key: props.eventKey,
	      domEvent: e
	    });
	  },
	  onTitleMouseEnter: function onTitleMouseEnter(e) {
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    this.clearSubMenuTitleLeaveTimer(parentMenu.subMenuInstance !== this);
	    if (parentMenu.menuItemInstance) {
	      parentMenu.menuItemInstance.clearMenuItemMouseLeaveTimer(true);
	    }
	    props.onItemHover({
	      key: props.eventKey,
	      item: this,
	      hover: true,
	      trigger: 'mouseenter'
	    });
	    if (props.openSubMenuOnMouseEnter) {
	      this.triggerOpenChange(true);
	    }
	    this.setState({
	      defaultActiveFirst: false
	    });
	    props.onTitleMouseEnter({
	      key: props.eventKey,
	      domEvent: e
	    });
	  },
	  onTitleMouseLeave: function onTitleMouseLeave(e) {
	    var _this = this;

	    var props = this.props;

	    var parentMenu = props.parentMenu;
	    parentMenu.subMenuInstance = this;
	    parentMenu.subMenuTitleLeaveFn = function () {
	      var eventKey = props.eventKey;
	      if (_this.isMounted()) {
	        // leave whole sub tree
	        // still active
	        if (props.mode === 'inline' && props.active) {
	          props.onItemHover({
	            key: eventKey,
	            item: _this,
	            hover: false,
	            trigger: 'mouseleave'
	          });
	        }
	        props.onTitleMouseLeave({
	          key: props.eventKey,
	          domEvent: e
	        });
	      }
	    };
	    parentMenu.subMenuTitleLeaveTimer = setTimeout(parentMenu.subMenuTitleLeaveFn, 100);
	  },
	  onMouseLeave: function onMouseLeave(e) {
	    var _this2 = this;

	    var props = this.props;

	    var parentMenu = props.parentMenu;
	    parentMenu.subMenuInstance = this;
	    parentMenu.subMenuLeaveFn = function () {
	      var eventKey = props.eventKey;
	      if (_this2.isMounted()) {
	        // leave whole sub tree
	        // still active
	        if (props.mode !== 'inline') {
	          if (props.active) {
	            props.onItemHover({
	              key: eventKey,
	              item: _this2,
	              hover: false,
	              trigger: 'mouseleave'
	            });
	          }
	          if (_this2.isOpen()) {
	            if (props.closeSubMenuOnMouseLeave) {
	              _this2.triggerOpenChange(false);
	            }
	          }
	        }
	        // trigger mouseleave
	        props.onMouseLeave({
	          key: eventKey,
	          domEvent: e
	        });
	      }
	    };
	    // prevent popup menu and submenu gap
	    parentMenu.subMenuLeaveTimer = setTimeout(parentMenu.subMenuLeaveFn, 100);
	  },
	  onTitleClick: function onTitleClick(e) {
	    var props = this.props;

	    props.onTitleClick({
	      key: props.eventKey,
	      domEvent: e
	    });
	    if (props.openSubMenuOnMouseEnter) {
	      return;
	    }
	    this.triggerOpenChange(!this.isOpen(), 'click');
	    this.setState({
	      defaultActiveFirst: false
	    });
	  },
	  onSubMenuClick: function onSubMenuClick(info) {
	    this.props.onClick(this.addKeyPath(info));
	  },
	  onSelect: function onSelect(info) {
	    this.props.onSelect(info);
	  },
	  onDeselect: function onDeselect(info) {
	    this.props.onDeselect(info);
	  },
	  getPrefixCls: function getPrefixCls() {
	    return this.props.rootPrefixCls + '-submenu';
	  },
	  getActiveClassName: function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  },
	  getDisabledClassName: function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  },
	  getSelectedClassName: function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  },
	  getOpenClassName: function getOpenClassName() {
	    return this.props.rootPrefixCls + '-submenu-open';
	  },
	  saveMenuInstance: function saveMenuInstance(c) {
	    this.menuInstance = c;
	  },
	  addKeyPath: function addKeyPath(info) {
	    return _extends({}, info, {
	      keyPath: (info.keyPath || []).concat(this.props.eventKey)
	    });
	  },
	  triggerOpenChange: function triggerOpenChange(open, type) {
	    var key = this.props.eventKey;
	    this.onOpenChange({
	      key: key,
	      item: this,
	      trigger: type,
	      open: open
	    });
	  },
	  clearSubMenuTimers: function clearSubMenuTimers(callFn) {
	    this.clearSubMenuLeaveTimer(callFn);
	    this.clearSubMenuTitleLeaveTimer(callFn);
	  },
	  clearSubMenuTitleLeaveTimer: function clearSubMenuTitleLeaveTimer(callFn) {
	    var parentMenu = this.props.parentMenu;
	    if (parentMenu.subMenuTitleLeaveTimer) {
	      clearTimeout(parentMenu.subMenuTitleLeaveTimer);
	      parentMenu.subMenuTitleLeaveTimer = null;
	      if (callFn && parentMenu.subMenuTitleLeaveFn) {
	        parentMenu.subMenuTitleLeaveFn();
	      }
	      parentMenu.subMenuTitleLeaveFn = null;
	    }
	  },
	  clearSubMenuLeaveTimer: function clearSubMenuLeaveTimer(callFn) {
	    var parentMenu = this.props.parentMenu;
	    if (parentMenu.subMenuLeaveTimer) {
	      clearTimeout(parentMenu.subMenuLeaveTimer);
	      parentMenu.subMenuLeaveTimer = null;
	      if (callFn && parentMenu.subMenuLeaveFn) {
	        parentMenu.subMenuLeaveFn();
	      }
	      parentMenu.subMenuLeaveFn = null;
	    }
	  },
	  isChildrenSelected: function isChildrenSelected() {
	    var ret = { find: false };
	    (0, _util.loopMenuItemRecusively)(this.props.children, this.props.selectedKeys, ret);
	    return ret.find;
	  },
	  isOpen: function isOpen() {
	    return this.props.openKeys.indexOf(this.props.eventKey) !== -1;
	  },
	  renderChildren: function renderChildren(children) {
	    var props = this.props;
	    var baseProps = {
	      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
	      visible: this.isOpen(),
	      level: props.level + 1,
	      inlineIndent: props.inlineIndent,
	      focusable: false,
	      onClick: this.onSubMenuClick,
	      onSelect: this.onSelect,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      selectedKeys: props.selectedKeys,
	      eventKey: props.eventKey + '-menu-',
	      openKeys: props.openKeys,
	      openTransitionName: props.openTransitionName,
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,
	      defaultActiveFirst: this.state.defaultActiveFirst,
	      multiple: props.multiple,
	      prefixCls: props.rootPrefixCls,
	      id: this._menuId,
	      ref: this.saveMenuInstance
	    };
	    return _react2["default"].createElement(
	      _SubPopupMenu2["default"],
	      baseProps,
	      children
	    );
	  },
	  render: function render() {
	    var _classes;

	    var isOpen = this.isOpen();
	    this.haveOpen = this.haveOpen || isOpen;
	    var props = this.props;
	    var prefixCls = this.getPrefixCls();
	    var classes = (_classes = {}, _defineProperty(_classes, props.className, !!props.className), _defineProperty(_classes, prefixCls + '-' + props.mode, 1), _classes);

	    classes[this.getOpenClassName()] = isOpen;
	    classes[this.getActiveClassName()] = props.active;
	    classes[this.getDisabledClassName()] = props.disabled;
	    classes[this.getSelectedClassName()] = this.isChildrenSelected();

	    this._menuId = this._menuId || (0, _guid2["default"])();
	    classes[prefixCls] = true;
	    classes[prefixCls + '-' + props.mode] = 1;
	    var titleClickEvents = {};
	    var mouseEvents = {};
	    var titleMouseEvents = {};
	    if (!props.disabled) {
	      titleClickEvents = {
	        onClick: this.onTitleClick
	      };
	      mouseEvents = {
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };
	      // only works in title, not outer li
	      titleMouseEvents = {
	        onMouseEnter: this.onTitleMouseEnter,
	        onMouseLeave: this.onTitleMouseLeave
	      };
	    }
	    var style = {};
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    return _react2["default"].createElement(
	      'li',
	      _extends({ className: (0, _classnames2["default"])(classes) }, mouseEvents),
	      _react2["default"].createElement(
	        'div',
	        _extends({
	          style: style,
	          className: prefixCls + '-title'
	        }, titleMouseEvents, titleClickEvents, {
	          'aria-open': isOpen,
	          'aria-owns': this._menuId,
	          'aria-haspopup': 'true'
	        }),
	        props.title
	      ),
	      this.renderChildren(props.children)
	    );
	  }
	});

	SubMenu.isSubMenu = 1;

	exports["default"] = SubMenu;
	module.exports = exports['default'];

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _MenuMixin = __webpack_require__(116);

	var _MenuMixin2 = _interopRequireDefault(_MenuMixin);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _rcAnimate = __webpack_require__(104);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var SubPopupMenu = _react2["default"].createClass({
	  displayName: 'SubPopupMenu',

	  propTypes: {
	    onSelect: _react.PropTypes.func,
	    onClick: _react.PropTypes.func,
	    onDeselect: _react.PropTypes.func,
	    onOpenChange: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    openTransitionName: _react.PropTypes.string,
	    openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
	    openKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    closeSubMenuOnMouseLeave: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },

	  mixins: [_MenuMixin2["default"]],

	  onDeselect: function onDeselect(selectInfo) {
	    this.props.onDeselect(selectInfo);
	  },
	  onSelect: function onSelect(selectInfo) {
	    this.props.onSelect(selectInfo);
	  },
	  onClick: function onClick(e) {
	    this.props.onClick(e);
	  },
	  onOpenChange: function onOpenChange(e) {
	    this.props.onOpenChange(e);
	  },
	  onDestroy: function onDestroy(key) {
	    this.props.onDestroy(key);
	  },
	  onItemHover: function onItemHover(e) {
	    this.onCommonItemHover(e);
	  },
	  getOpenTransitionName: function getOpenTransitionName() {
	    return this.props.openTransitionName;
	  },
	  renderMenuItem: function renderMenuItem(c, i, subIndex) {
	    var props = this.props;
	    var extraProps = {
	      openKeys: props.openKeys,
	      selectedKeys: props.selectedKeys,
	      openSubMenuOnMouseEnter: true
	    };
	    return this.renderCommonMenuItem(c, i, subIndex, extraProps);
	  },
	  render: function render() {
	    var renderFirst = this.renderFirst;
	    this.renderFirst = 1;
	    this.haveOpened = this.haveOpened || this.props.visible;
	    if (!this.haveOpened) {
	      return null;
	    }
	    var transitionAppear = true;
	    if (!renderFirst && this.props.visible) {
	      transitionAppear = false;
	    }
	    var props = (0, _objectAssign2["default"])({}, this.props);
	    props.className += ' ' + props.prefixCls + '-sub';
	    var animProps = {};
	    if (props.openTransitionName) {
	      animProps.transitionName = props.openTransitionName;
	    } else if (_typeof(props.openAnimation) === 'object') {
	      animProps.animation = (0, _objectAssign2["default"])({}, props.openAnimation);
	      if (!transitionAppear) {
	        delete animProps.animation.appear;
	      }
	    }
	    return _react2["default"].createElement(
	      _rcAnimate2["default"],
	      _extends({}, animProps, {
	        showProp: 'visible',
	        component: '',
	        transitionAppear: transitionAppear
	      }),
	      this.renderRoot(props)
	    );
	  }
	});

	exports["default"] = SubPopupMenu;
	module.exports = exports['default'];

/***/ },
/* 125 */
/***/ function(module, exports) {

	"use strict";

	var seed = 0;
	module.exports = function guid() {
	  return Date.now() + "_" + seed++;
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _addEventListener = __webpack_require__(127);

	var _addEventListener2 = _interopRequireDefault(_addEventListener);

	var _contains = __webpack_require__(131);

	var _contains2 = _interopRequireDefault(_contains);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = {
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.mode !== 'inline') {
	      if (this.props.open) {
	        this.bindRootCloseHandlers();
	      } else {
	        this.unbindRootCloseHandlers();
	      }
	    }
	  },
	  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
	    if (e.keyCode === _KeyCode2["default"].ESC) {
	      this.props.onItemHover({
	        key: this.props.eventKey,
	        item: this,
	        hover: false
	      });
	    }
	  },
	  handleDocumentClick: function handleDocumentClick(e) {
	    // If the click originated from within this component
	    // don't do anything.
	    if ((0, _contains2["default"])(_reactDom2["default"].findDOMNode(this), e.target)) {
	      return;
	    }
	    var props = this.props;
	    props.onItemHover({
	      hover: false,
	      item: this,
	      key: this.props.eventKey
	    });
	    this.triggerOpenChange(false);
	  },
	  bindRootCloseHandlers: function bindRootCloseHandlers() {
	    if (!this._onDocumentClickListener) {
	      this._onDocumentClickListener = (0, _addEventListener2["default"])(document, 'click', this.handleDocumentClick);
	      this._onDocumentKeyupListener = (0, _addEventListener2["default"])(document, 'keyup', this.handleDocumentKeyUp);
	    }
	  },
	  unbindRootCloseHandlers: function unbindRootCloseHandlers() {
	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	      this._onDocumentClickListener = null;
	    }

	    if (this._onDocumentKeyupListener) {
	      this._onDocumentKeyupListener.remove();
	      this._onDocumentKeyupListener = null;
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.unbindRootCloseHandlers();
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = addEventListenerWrap;

	var _addDomEventListener = __webpack_require__(128);

	var _addDomEventListener2 = _interopRequireDefault(_addDomEventListener);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function addEventListenerWrap(target, eventType, cb) {
	  /* eslint camelcase: 2 */
	  var callback = _reactDom2["default"].unstable_batchedUpdates ? function run(e) {
	    _reactDom2["default"].unstable_batchedUpdates(cb, e);
	  } : cb;
	  return (0, _addDomEventListener2["default"])(target, eventType, callback);
	}
	module.exports = exports['default'];

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = addEventListener;

	var _EventObject = __webpack_require__(129);

	var _EventObject2 = _interopRequireDefault(_EventObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function addEventListener(target, eventType, callback) {
	  function wrapCallback(e) {
	    var ne = new _EventObject2["default"](e);
	    callback.call(target, ne);
	  }

	  if (target.addEventListener) {
	    target.addEventListener(eventType, wrapCallback, false);
	    return {
	      remove: function remove() {
	        target.removeEventListener(eventType, wrapCallback, false);
	      }
	    };
	  } else if (target.attachEvent) {
	    target.attachEvent('on' + eventType, wrapCallback);
	    return {
	      remove: function remove() {
	        target.detachEvent('on' + eventType, wrapCallback);
	      }
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _EventBaseObject = __webpack_require__(130);

	var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * @ignore
	 * event object for dom
	 * @author yiminghe@gmail.com
	 */

	var TRUE = true;
	var FALSE = false;
	var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

	function isNullOrUndefined(w) {
	  return w === null || w === undefined;
	}

	var eventNormalizers = [{
	  reg: /^key/,
	  props: ['char', 'charCode', 'key', 'keyCode', 'which'],
	  fix: function fix(event, nativeEvent) {
	    if (isNullOrUndefined(event.which)) {
	      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
	    }

	    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
	    if (event.metaKey === undefined) {
	      event.metaKey = event.ctrlKey;
	    }
	  }
	}, {
	  reg: /^touch/,
	  props: ['touches', 'changedTouches', 'targetTouches']
	}, {
	  reg: /^hashchange$/,
	  props: ['newURL', 'oldURL']
	}, {
	  reg: /^gesturechange$/i,
	  props: ['rotation', 'scale']
	}, {
	  reg: /^(mousewheel|DOMMouseScroll)$/,
	  props: [],
	  fix: function fix(event, nativeEvent) {
	    var deltaX = void 0;
	    var deltaY = void 0;
	    var delta = void 0;
	    var wheelDelta = nativeEvent.wheelDelta;
	    var axis = nativeEvent.axis;
	    var wheelDeltaY = nativeEvent.wheelDeltaY;
	    var wheelDeltaX = nativeEvent.wheelDeltaX;
	    var detail = nativeEvent.detail;

	    // ie/webkit
	    if (wheelDelta) {
	      delta = wheelDelta / 120;
	    }

	    // gecko
	    if (detail) {
	      // press control e.detail == 1 else e.detail == 3
	      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
	    }

	    // Gecko
	    if (axis !== undefined) {
	      if (axis === event.HORIZONTAL_AXIS) {
	        deltaY = 0;
	        deltaX = 0 - delta;
	      } else if (axis === event.VERTICAL_AXIS) {
	        deltaX = 0;
	        deltaY = delta;
	      }
	    }

	    // Webkit
	    if (wheelDeltaY !== undefined) {
	      deltaY = wheelDeltaY / 120;
	    }
	    if (wheelDeltaX !== undefined) {
	      deltaX = -1 * wheelDeltaX / 120;
	    }

	    // 默认 deltaY (ie)
	    if (!deltaX && !deltaY) {
	      deltaY = delta;
	    }

	    if (deltaX !== undefined) {
	      /**
	       * deltaX of mousewheel event
	       * @property deltaX
	       * @member Event.DomEvent.Object
	       */
	      event.deltaX = deltaX;
	    }

	    if (deltaY !== undefined) {
	      /**
	       * deltaY of mousewheel event
	       * @property deltaY
	       * @member Event.DomEvent.Object
	       */
	      event.deltaY = deltaY;
	    }

	    if (delta !== undefined) {
	      /**
	       * delta of mousewheel event
	       * @property delta
	       * @member Event.DomEvent.Object
	       */
	      event.delta = delta;
	    }
	  }
	}, {
	  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
	  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
	  fix: function fix(event, nativeEvent) {
	    var eventDoc = void 0;
	    var doc = void 0;
	    var body = void 0;
	    var target = event.target;
	    var button = nativeEvent.button;

	    // Calculate pageX/Y if missing and clientX/Y available
	    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
	      eventDoc = target.ownerDocument || document;
	      doc = eventDoc.documentElement;
	      body = eventDoc.body;
	      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // which for click: 1 === left; 2 === middle; 3 === right
	    // do not use button
	    if (!event.which && button !== undefined) {
	      if (button & 1) {
	        event.which = 1;
	      } else if (button & 2) {
	        event.which = 3;
	      } else if (button & 4) {
	        event.which = 2;
	      } else {
	        event.which = 0;
	      }
	    }

	    // add relatedTarget, if necessary
	    if (!event.relatedTarget && event.fromElement) {
	      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
	    }

	    return event;
	  }
	}];

	function retTrue() {
	  return TRUE;
	}

	function retFalse() {
	  return FALSE;
	}

	function DomEventObject(nativeEvent) {
	  var type = nativeEvent.type;

	  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

	  _EventBaseObject2["default"].call(this);

	  this.nativeEvent = nativeEvent;

	  // in case dom event has been mark as default prevented by lower dom node
	  var isDefaultPrevented = retFalse;
	  if ('defaultPrevented' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
	  } else if ('getPreventDefault' in nativeEvent) {
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
	    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
	  } else if ('returnValue' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
	  }

	  this.isDefaultPrevented = isDefaultPrevented;

	  var fixFns = [];
	  var fixFn = void 0;
	  var l = void 0;
	  var prop = void 0;
	  var props = commonProps.concat();

	  eventNormalizers.forEach(function (normalizer) {
	    if (type.match(normalizer.reg)) {
	      props = props.concat(normalizer.props);
	      if (normalizer.fix) {
	        fixFns.push(normalizer.fix);
	      }
	    }
	  });

	  l = props.length;

	  // clone properties of the original event object
	  while (l) {
	    prop = props[--l];
	    this[prop] = nativeEvent[prop];
	  }

	  // fix target property, if necessary
	  if (!this.target && isNative) {
	    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
	  }

	  // check if target is a text node (safari)
	  if (this.target && this.target.nodeType === 3) {
	    this.target = this.target.parentNode;
	  }

	  l = fixFns.length;

	  while (l) {
	    fixFn = fixFns[--l];
	    fixFn(this, nativeEvent);
	  }

	  this.timeStamp = nativeEvent.timeStamp || Date.now();
	}

	var EventBaseObjectProto = _EventBaseObject2["default"].prototype;

	(0, _objectAssign2["default"])(DomEventObject.prototype, EventBaseObjectProto, {
	  constructor: DomEventObject,

	  preventDefault: function preventDefault() {
	    var e = this.nativeEvent;

	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    } else {
	      // otherwise set the returnValue property of the original event to FALSE (IE)
	      e.returnValue = FALSE;
	    }

	    EventBaseObjectProto.preventDefault.call(this);
	  },
	  stopPropagation: function stopPropagation() {
	    var e = this.nativeEvent;

	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    } else {
	      // otherwise set the cancelBubble property of the original event to TRUE (IE)
	      e.cancelBubble = TRUE;
	    }

	    EventBaseObjectProto.stopPropagation.call(this);
	  }
	});

	exports["default"] = DomEventObject;
	module.exports = exports['default'];

/***/ },
/* 130 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * @ignore
	 * base event object for custom and dom event.
	 * @author yiminghe@gmail.com
	 */

	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	}

	function EventBaseObject() {
	  this.timeStamp = Date.now();
	  this.target = undefined;
	  this.currentTarget = undefined;
	}

	EventBaseObject.prototype = {
	  isEventObject: 1,

	  constructor: EventBaseObject,

	  isDefaultPrevented: returnFalse,

	  isPropagationStopped: returnFalse,

	  isImmediatePropagationStopped: returnFalse,

	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;
	  },
	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;
	  },
	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    // fixed 1.2
	    // call stopPropagation implicitly
	    this.stopPropagation();
	  },
	  halt: function halt(immediate) {
	    if (immediate) {
	      this.stopImmediatePropagation();
	    } else {
	      this.stopPropagation();
	    }
	    this.preventDefault();
	  }
	};

	exports["default"] = EventBaseObject;
	module.exports = exports['default'];

/***/ },
/* 131 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function contains(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _util = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/* eslint react/no-is-mounted:0 */

	var MenuItem = _react2["default"].createClass({
	  displayName: 'MenuItem',

	  propTypes: {
	    rootPrefixCls: _react.PropTypes.string,
	    eventKey: _react.PropTypes.string,
	    active: _react.PropTypes.bool,
	    children: _react.PropTypes.any,
	    selectedKeys: _react.PropTypes.array,
	    disabled: _react.PropTypes.bool,
	    title: _react.PropTypes.string,
	    onSelect: _react.PropTypes.func,
	    onClick: _react.PropTypes.func,
	    onDeselect: _react.PropTypes.func,
	    parentMenu: _react.PropTypes.object,
	    onItemHover: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onSelect: _util.noop,
	      onMouseEnter: _util.noop,
	      onMouseLeave: _util.noop
	    };
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	    if (props.parentMenu.menuItemInstance === this) {
	      this.clearMenuItemMouseLeaveTimer();
	    }
	  },
	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    if (keyCode === _KeyCode2["default"].ENTER) {
	      this.onClick(e);
	      return true;
	    }
	  },
	  onMouseLeave: function onMouseLeave(e) {
	    var _this = this;

	    var props = this.props;
	    var eventKey = props.eventKey;
	    var parentMenu = props.parentMenu;
	    parentMenu.menuItemInstance = this;
	    parentMenu.menuItemMouseLeaveFn = function () {
	      if (_this.isMounted() && props.active) {
	        props.onItemHover({
	          key: eventKey,
	          item: _this,
	          hover: false,
	          trigger: 'mouseleave'
	        });
	      }
	    };
	    parentMenu.menuItemMouseLeaveTimer = setTimeout(parentMenu.menuItemMouseLeaveFn, 30);
	    props.onMouseLeave({
	      key: eventKey,
	      domEvent: e
	    });
	  },
	  onMouseEnter: function onMouseEnter(e) {
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    this.clearMenuItemMouseLeaveTimer(parentMenu.menuItemInstance !== this);
	    if (parentMenu.subMenuInstance) {
	      parentMenu.subMenuInstance.clearSubMenuTimers(true);
	    }
	    var eventKey = props.eventKey;
	    props.onItemHover({
	      key: eventKey,
	      item: this,
	      hover: true,
	      trigger: 'mouseenter'
	    });
	    props.onMouseEnter({
	      key: eventKey,
	      domEvent: e
	    });
	  },
	  onClick: function onClick(e) {
	    var props = this.props;
	    var selected = this.isSelected();
	    var eventKey = props.eventKey;
	    var info = {
	      key: eventKey,
	      keyPath: [eventKey],
	      item: this,
	      domEvent: e
	    };
	    props.onClick(info);
	    if (props.multiple) {
	      if (selected) {
	        props.onDeselect(info);
	      } else {
	        props.onSelect(info);
	      }
	    } else if (!selected) {
	      props.onSelect(info);
	    }
	  },
	  getPrefixCls: function getPrefixCls() {
	    return this.props.rootPrefixCls + '-item';
	  },
	  getActiveClassName: function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  },
	  getSelectedClassName: function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  },
	  getDisabledClassName: function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  },
	  clearMenuItemMouseLeaveTimer: function clearMenuItemMouseLeaveTimer(callFn) {
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    if (parentMenu.menuItemMouseLeaveTimer) {
	      clearTimeout(parentMenu.menuItemMouseLeaveTimer);
	      parentMenu.menuItemMouseLeaveTimer = null;
	      if (callFn && parentMenu.menuItemMouseLeaveFn) {
	        parentMenu.menuItemMouseLeaveFn();
	      }
	      parentMenu.menuItemMouseLeaveFn = null;
	    }
	  },
	  isSelected: function isSelected() {
	    return this.props.selectedKeys.indexOf(this.props.eventKey) !== -1;
	  },
	  render: function render() {
	    var props = this.props;
	    var selected = this.isSelected();
	    var classes = {};
	    classes[this.getActiveClassName()] = !props.disabled && props.active;
	    classes[this.getSelectedClassName()] = selected;
	    classes[this.getDisabledClassName()] = props.disabled;
	    classes[this.getPrefixCls()] = true;
	    classes[props.className] = !!props.className;
	    var attrs = _extends({}, props.attribute, {
	      title: props.title,
	      className: (0, _classnames2["default"])(classes),
	      role: 'menuitem',
	      'aria-selected': selected,
	      'aria-disabled': props.disabled
	    });
	    var mouseEvent = {};
	    if (!props.disabled) {
	      mouseEvent = {
	        onClick: this.onClick,
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };
	    }
	    var style = _extends({}, props.style);
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    return _react2["default"].createElement(
	      'li',
	      _extends({
	        style: style
	      }, attrs, mouseEvent),
	      props.children
	    );
	  }
	});

	MenuItem.isMenuItem = 1;

	exports["default"] = MenuItem;
	module.exports = exports['default'];

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var MenuItemGroup = _react2["default"].createClass({
	  displayName: 'MenuItemGroup',

	  propTypes: {
	    renderMenuItem: _react.PropTypes.func,
	    index: _react.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: true
	    };
	  },
	  renderInnerMenuItem: function renderInnerMenuItem(item, subIndex) {
	    var renderMenuItem = this.props.renderMenuItem;
	    return renderMenuItem(item, this.props.index, subIndex);
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className || '';
	    var rootPrefixCls = props.rootPrefixCls;

	    className += ' ' + rootPrefixCls + '-item-group';
	    var titleClassName = rootPrefixCls + '-item-group-title';
	    var listClassName = rootPrefixCls + '-item-group-list';
	    return _react2["default"].createElement(
	      'li',
	      { className: className },
	      _react2["default"].createElement(
	        'div',
	        { className: titleClassName },
	        props.title
	      ),
	      _react2["default"].createElement(
	        'ul',
	        { className: listClassName },
	        _react2["default"].Children.map(props.children, this.renderInnerMenuItem)
	      )
	    );
	  }
	});

	MenuItemGroup.isMenuItemGroup = true;

	exports["default"] = MenuItemGroup;
	module.exports = exports['default'];

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var Divider = _react2["default"].createClass({
	  displayName: 'Divider',
	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: true
	    };
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className || '';
	    var rootPrefixCls = props.rootPrefixCls;
	    className += ' ' + (rootPrefixCls + '-item-divider');
	    return _react2["default"].createElement('li', { className: className });
	  }
	});

	exports["default"] = Divider;
	module.exports = exports['default'];

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _defineProperty2 = __webpack_require__(14);

	var _defineProperty3 = _interopRequireDefault(_defineProperty2);

	var _objectWithoutProperties2 = __webpack_require__(136);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _rcTrigger = __webpack_require__(137);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DropdownMenu = __webpack_require__(159);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _util = __webpack_require__(113);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var BUILT_IN_PLACEMENTS = {
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    offset: [0, 4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    offset: [0, -4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  }
	};

	var SelectTrigger = _react2["default"].createClass({
	  displayName: 'SelectTrigger',

	  propTypes: {
	    onPopupFocus: _react.PropTypes.func,
	    dropdownMatchSelectWidth: _react.PropTypes.bool,
	    dropdownAlign: _react.PropTypes.object,
	    visible: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    showSearch: _react.PropTypes.bool,
	    dropdownClassName: _react.PropTypes.string,
	    multiple: _react.PropTypes.bool,
	    inputValue: _react.PropTypes.string,
	    filterOption: _react.PropTypes.any,
	    options: _react.PropTypes.any,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    children: _react.PropTypes.any
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    var _props = this.props;
	    var visible = _props.visible;
	    var dropdownMatchSelectWidth = _props.dropdownMatchSelectWidth;

	    if (visible) {
	      var dropdownDOMNode = this.getPopupDOMNode();
	      if (dropdownDOMNode) {
	        var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
	        dropdownDOMNode.style[widthProp] = _reactDom2["default"].findDOMNode(this).offsetWidth + 'px';
	      }
	    }
	  },
	  getInnerMenu: function getInnerMenu() {
	    return this.popupMenu && this.popupMenu.refs.menu;
	  },
	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDomNode();
	  },
	  getDropdownElement: function getDropdownElement(newProps) {
	    var props = this.props;
	    return _react2["default"].createElement(_DropdownMenu2["default"], (0, _extends3["default"])({
	      ref: this.saveMenu
	    }, newProps, {
	      prefixCls: this.getDropdownPrefixCls(),
	      onMenuSelect: props.onMenuSelect,
	      onMenuDeselect: props.onMenuDeselect,
	      value: props.value,
	      defaultActiveFirstOption: props.defaultActiveFirstOption,
	      dropdownMenuStyle: props.dropdownMenuStyle
	    }));
	  },
	  getDropdownTransitionName: function getDropdownTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  getDropdownPrefixCls: function getDropdownPrefixCls() {
	    return this.props.prefixCls + '-dropdown';
	  },
	  saveMenu: function saveMenu(menu) {
	    this.popupMenu = menu;
	  },
	  render: function render() {
	    var _popupClassName;

	    var _props2 = this.props;
	    var onPopupFocus = _props2.onPopupFocus;
	    var props = (0, _objectWithoutProperties3["default"])(_props2, ['onPopupFocus']);
	    var multiple = props.multiple;
	    var visible = props.visible;
	    var inputValue = props.inputValue;
	    var dropdownAlign = props.dropdownAlign;
	    var disabled = props.disabled;
	    var showSearch = props.showSearch;
	    var dropdownClassName = props.dropdownClassName;

	    var dropdownPrefixCls = this.getDropdownPrefixCls();
	    var popupClassName = (_popupClassName = {}, (0, _defineProperty3["default"])(_popupClassName, dropdownClassName, !!dropdownClassName), (0, _defineProperty3["default"])(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
	    var popupElement = this.getDropdownElement({
	      menuItems: props.options,
	      onPopupFocus: onPopupFocus,
	      multiple: multiple,
	      inputValue: inputValue,
	      visible: visible
	    });
	    var hideAction = void 0;
	    if (disabled) {
	      hideAction = [];
	    } else if ((0, _util.isSingleMode)(props) && !showSearch) {
	      hideAction = ['click'];
	    } else {
	      hideAction = ['blur'];
	    }
	    return _react2["default"].createElement(
	      _rcTrigger2["default"],
	      (0, _extends3["default"])({}, props, {
	        showAction: disabled ? [] : ['click'],
	        hideAction: hideAction,
	        ref: 'trigger',
	        popupPlacement: 'bottomLeft',
	        builtinPlacements: BUILT_IN_PLACEMENTS,
	        prefixCls: dropdownPrefixCls,
	        popupTransitionName: this.getDropdownTransitionName(),
	        onPopupVisibleChange: props.onDropdownVisibleChange,
	        popup: popupElement,
	        popupAlign: dropdownAlign,
	        popupVisible: visible,
	        getPopupContainer: props.getPopupContainer,
	        popupClassName: (0, _classnames2["default"])(popupClassName),
	        popupStyle: props.dropdownStyle
	      }),
	      props.children
	    );
	  }
	});

	exports["default"] = SelectTrigger;
	module.exports = exports['default'];

/***/ },
/* 136 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(138);

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _contains = __webpack_require__(139);

	var _contains2 = _interopRequireDefault(_contains);

	var _addEventListener = __webpack_require__(140);

	var _addEventListener2 = _interopRequireDefault(_addEventListener);

	var _Popup = __webpack_require__(141);

	var _Popup2 = _interopRequireDefault(_Popup);

	var _utils = __webpack_require__(157);

	var _getContainerRenderMixin = __webpack_require__(158);

	var _getContainerRenderMixin2 = _interopRequireDefault(_getContainerRenderMixin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	function returnEmptyString() {
	  return '';
	}

	var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur'];

	var Trigger = _react2["default"].createClass({
	  displayName: 'Trigger',

	  propTypes: {
	    children: _react.PropTypes.any,
	    action: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.arrayOf(_react.PropTypes.string)]),
	    showAction: _react.PropTypes.any,
	    hideAction: _react.PropTypes.any,
	    getPopupClassNameFromAlign: _react.PropTypes.any,
	    onPopupVisibleChange: _react.PropTypes.func,
	    afterPopupVisibleChange: _react.PropTypes.func,
	    popup: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]).isRequired,
	    popupStyle: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    popupPlacement: _react.PropTypes.string,
	    builtinPlacements: _react.PropTypes.object,
	    popupTransitionName: _react.PropTypes.string,
	    popupAnimation: _react.PropTypes.any,
	    mouseEnterDelay: _react.PropTypes.number,
	    mouseLeaveDelay: _react.PropTypes.number,
	    zIndex: _react.PropTypes.number,
	    focusDelay: _react.PropTypes.number,
	    blurDelay: _react.PropTypes.number,
	    getPopupContainer: _react.PropTypes.func,
	    destroyPopupOnHide: _react.PropTypes.bool,
	    mask: _react.PropTypes.bool,
	    maskClosable: _react.PropTypes.bool,
	    onPopupAlign: _react.PropTypes.func,
	    popupAlign: _react.PropTypes.object,
	    popupVisible: _react.PropTypes.bool,
	    maskTransitionName: _react.PropTypes.string,
	    maskAnimation: _react.PropTypes.string
	  },

	  mixins: [(0, _getContainerRenderMixin2["default"])({
	    autoMount: false,

	    isVisible: function isVisible(instance) {
	      return instance.state.popupVisible;
	    },
	    getContainer: function getContainer(instance) {
	      var popupContainer = document.createElement('div');
	      var mountNode = instance.props.getPopupContainer ? instance.props.getPopupContainer((0, _reactDom.findDOMNode)(instance)) : document.body;
	      mountNode.appendChild(popupContainer);
	      return popupContainer;
	    }
	  })],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-trigger-popup',
	      getPopupClassNameFromAlign: returnEmptyString,
	      onPopupVisibleChange: noop,
	      afterPopupVisibleChange: noop,
	      onPopupAlign: noop,
	      popupClassName: '',
	      mouseEnterDelay: 0,
	      mouseLeaveDelay: 0.1,
	      focusDelay: 0,
	      blurDelay: 0.15,
	      popupStyle: {},
	      destroyPopupOnHide: false,
	      popupAlign: {},
	      defaultPopupVisible: false,
	      mask: false,
	      maskClosable: true,
	      action: [],
	      showAction: [],
	      hideAction: []
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var popupVisible = void 0;
	    if ('popupVisible' in props) {
	      popupVisible = !!props.popupVisible;
	    } else {
	      popupVisible = !!props.defaultPopupVisible;
	    }
	    return {
	      popupVisible: popupVisible
	    };
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    ALL_HANDLERS.forEach(function (h) {
	      _this['fire' + h] = function (e) {
	        _this.fireEvents(h, e);
	      };
	    });
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate({}, {
	      popupVisible: this.state.popupVisible
	    });
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	    var popupVisible = _ref.popupVisible;

	    if (popupVisible !== undefined) {
	      this.setState({
	        popupVisible: popupVisible
	      });
	    }
	  },
	  componentDidUpdate: function componentDidUpdate(_, prevState) {
	    var props = this.props;
	    var state = this.state;
	    this.renderComponent(null, function () {
	      if (prevState.popupVisible !== state.popupVisible) {
	        props.afterPopupVisibleChange(state.popupVisible);
	      }
	    });
	    if (this.isClickToHide()) {
	      if (state.popupVisible) {
	        if (!this.clickOutsideHandler) {
	          this.clickOutsideHandler = (0, _addEventListener2["default"])(document, 'mousedown', this.onDocumentClick);
	          this.touchOutsideHandler = (0, _addEventListener2["default"])(document, 'touchstart', this.onDocumentClick);
	        }
	        return;
	      }
	    }
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.touchOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	      this.touchOutsideHandler = null;
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.clearDelayTimer();
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.touchOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	      this.touchOutsideHandler = null;
	    }
	  },
	  onMouseEnter: function onMouseEnter(e) {
	    this.fireEvents('onMouseEnter', e);
	    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);
	  },
	  onMouseLeave: function onMouseLeave(e) {
	    this.fireEvents('onMouseLeave', e);
	    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
	  },
	  onPopupMouseEnter: function onPopupMouseEnter() {
	    this.clearDelayTimer();
	  },
	  onPopupMouseLeave: function onPopupMouseLeave(e) {
	    // https://github.com/react-component/trigger/pull/13
	    // react bug?
	    if (e.relatedTarget && !e.relatedTarget.setTimeout && this._component && (0, _contains2["default"])(this._component.getPopupDomNode(), e.relatedTarget)) {
	      return;
	    }
	    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
	  },
	  onFocus: function onFocus(e) {
	    this.fireEvents('onFocus', e);
	    // incase focusin and focusout
	    this.clearDelayTimer();
	    if (this.isFocusToShow()) {
	      this.focusTime = Date.now();
	      this.delaySetPopupVisible(true, this.props.focusDelay);
	    }
	  },
	  onMouseDown: function onMouseDown(e) {
	    this.fireEvents('onMouseDown', e);
	    this.preClickTime = Date.now();
	  },
	  onTouchStart: function onTouchStart(e) {
	    this.fireEvents('onTouchStart', e);
	    this.preTouchTime = Date.now();
	  },
	  onBlur: function onBlur(e) {
	    this.fireEvents('onBlur', e);
	    this.clearDelayTimer();
	    if (this.isBlurToHide()) {
	      this.delaySetPopupVisible(false, this.props.blurDelay);
	    }
	  },
	  onClick: function onClick(event) {
	    this.fireEvents('onClick', event);
	    // focus will trigger click
	    if (this.focusTime) {
	      var preTime = void 0;
	      if (this.preClickTime && this.preTouchTime) {
	        preTime = Math.min(this.preClickTime, this.preTouchTime);
	      } else if (this.preClickTime) {
	        preTime = this.preClickTime;
	      } else if (this.preTouchTime) {
	        preTime = this.preTouchTime;
	      }
	      if (Math.abs(preTime - this.focusTime) < 20) {
	        return;
	      }
	      this.focusTime = 0;
	    }
	    this.preClickTime = 0;
	    this.preTouchTime = 0;
	    event.preventDefault();
	    var nextVisible = !this.state.popupVisible;
	    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
	      this.setPopupVisible(!this.state.popupVisible);
	    }
	  },
	  onDocumentClick: function onDocumentClick(event) {
	    if (this.props.mask && !this.props.maskClosable) {
	      return;
	    }
	    var target = event.target;
	    var root = (0, _reactDom.findDOMNode)(this);
	    var popupNode = this.getPopupDomNode();
	    if (!(0, _contains2["default"])(root, target) && !(0, _contains2["default"])(popupNode, target)) {
	      this.close();
	    }
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    // for test
	    if (this._component) {
	      return this._component.isMounted() ? this._component.getPopupDomNode() : null;
	    }
	    return null;
	  },
	  getRootDomNode: function getRootDomNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {
	    var className = [];
	    var props = this.props;
	    var popupPlacement = props.popupPlacement,
	        builtinPlacements = props.builtinPlacements,
	        prefixCls = props.prefixCls;

	    if (popupPlacement && builtinPlacements) {
	      className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));
	    }
	    if (props.getPopupClassNameFromAlign) {
	      className.push(props.getPopupClassNameFromAlign(align));
	    }
	    return className.join(' ');
	  },
	  getPopupAlign: function getPopupAlign() {
	    var props = this.props;
	    var popupPlacement = props.popupPlacement,
	        popupAlign = props.popupAlign,
	        builtinPlacements = props.builtinPlacements;

	    if (popupPlacement && builtinPlacements) {
	      return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);
	    }
	    return popupAlign;
	  },
	  getComponent: function getComponent() {
	    var props = this.props,
	        state = this.state;

	    var mouseProps = {};
	    if (this.isMouseEnterToShow()) {
	      mouseProps.onMouseEnter = this.onPopupMouseEnter;
	    }
	    if (this.isMouseLeaveToHide()) {
	      mouseProps.onMouseLeave = this.onPopupMouseLeave;
	    }
	    return _react2["default"].createElement(
	      _Popup2["default"],
	      (0, _extends3["default"])({
	        prefixCls: props.prefixCls,
	        destroyPopupOnHide: props.destroyPopupOnHide,
	        visible: state.popupVisible,
	        className: props.popupClassName,
	        action: props.action,
	        align: this.getPopupAlign(),
	        onAlign: props.onPopupAlign,
	        animation: props.popupAnimation,
	        getClassNameFromAlign: this.getPopupClassNameFromAlign
	      }, mouseProps, {
	        getRootDomNode: this.getRootDomNode,
	        style: props.popupStyle,
	        mask: props.mask,
	        zIndex: props.zIndex,
	        transitionName: props.popupTransitionName,
	        maskAnimation: props.maskAnimation,
	        maskTransitionName: props.maskTransitionName
	      }),
	      typeof props.popup === 'function' ? props.popup() : props.popup
	    );
	  },
	  setPopupVisible: function setPopupVisible(popupVisible) {
	    this.clearDelayTimer();
	    if (this.state.popupVisible !== popupVisible) {
	      if (!('popupVisible' in this.props)) {
	        this.setState({
	          popupVisible: popupVisible
	        });
	      }
	      this.props.onPopupVisibleChange(popupVisible);
	    }
	  },
	  delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {
	    var _this2 = this;

	    var delay = delayS * 1000;
	    this.clearDelayTimer();
	    if (delay) {
	      this.delayTimer = setTimeout(function () {
	        _this2.setPopupVisible(visible);
	        _this2.clearDelayTimer();
	      }, delay);
	    } else {
	      this.setPopupVisible(visible);
	    }
	  },
	  clearDelayTimer: function clearDelayTimer() {
	    if (this.delayTimer) {
	      clearTimeout(this.delayTimer);
	      this.delayTimer = null;
	    }
	  },
	  createTwoChains: function createTwoChains(event) {
	    var childPros = this.props.children.props;
	    var props = this.props;
	    if (childPros[event] && props[event]) {
	      return this['fire' + event];
	    }
	    return childPros[event] || props[event];
	  },
	  isClickToShow: function isClickToShow() {
	    var _props = this.props,
	        action = _props.action,
	        showAction = _props.showAction;

	    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	  },
	  isClickToHide: function isClickToHide() {
	    var _props2 = this.props,
	        action = _props2.action,
	        hideAction = _props2.hideAction;

	    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	  },
	  isMouseEnterToShow: function isMouseEnterToShow() {
	    var _props3 = this.props,
	        action = _props3.action,
	        showAction = _props3.showAction;

	    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	  },
	  isMouseLeaveToHide: function isMouseLeaveToHide() {
	    var _props4 = this.props,
	        action = _props4.action,
	        hideAction = _props4.hideAction;

	    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	  },
	  isFocusToShow: function isFocusToShow() {
	    var _props5 = this.props,
	        action = _props5.action,
	        showAction = _props5.showAction;

	    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	  },
	  isBlurToHide: function isBlurToHide() {
	    var _props6 = this.props,
	        action = _props6.action,
	        hideAction = _props6.hideAction;

	    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	  },
	  forcePopupAlign: function forcePopupAlign() {
	    if (this.state.popupVisible && this.popupInstance && this.popupInstance.alignInstance) {
	      this.popupInstance.alignInstance.forceAlign();
	    }
	  },
	  fireEvents: function fireEvents(type, e) {
	    var childCallback = this.props.children.props[type];
	    if (childCallback) {
	      childCallback(e);
	    }
	    var callback = this.props[type];
	    if (callback) {
	      callback(e);
	    }
	  },
	  close: function close() {
	    this.setPopupVisible(false);
	  },
	  render: function render() {
	    var props = this.props;
	    var children = props.children;
	    var child = _react2["default"].Children.only(children);
	    var newChildProps = {};

	    if (this.isClickToHide() || this.isClickToShow()) {
	      newChildProps.onClick = this.onClick;
	      newChildProps.onMouseDown = this.onMouseDown;
	      newChildProps.onTouchStart = this.onTouchStart;
	    } else {
	      newChildProps.onClick = this.createTwoChains('onClick');
	      newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
	      newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
	    }
	    if (this.isMouseEnterToShow()) {
	      newChildProps.onMouseEnter = this.onMouseEnter;
	    } else {
	      newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
	    }
	    if (this.isMouseLeaveToHide()) {
	      newChildProps.onMouseLeave = this.onMouseLeave;
	    } else {
	      newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
	    }
	    if (this.isFocusToShow() || this.isBlurToHide()) {
	      newChildProps.onFocus = this.onFocus;
	      newChildProps.onBlur = this.onBlur;
	    } else {
	      newChildProps.onFocus = this.createTwoChains('onFocus');
	      newChildProps.onBlur = this.createTwoChains('onBlur');
	    }

	    return _react2["default"].cloneElement(child, newChildProps);
	  }
	});

	exports["default"] = Trigger;
	module.exports = exports['default'];

/***/ },
/* 139 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = contains;
	function contains(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 140 */
127,
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcAlign = __webpack_require__(142);

	var _rcAlign2 = _interopRequireDefault(_rcAlign);

	var _rcAnimate = __webpack_require__(104);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _PopupInner = __webpack_require__(155);

	var _PopupInner2 = _interopRequireDefault(_PopupInner);

	var _LazyRenderBox = __webpack_require__(156);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var Popup = _react2["default"].createClass({
	  displayName: 'Popup',

	  propTypes: {
	    visible: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    getClassNameFromAlign: _react.PropTypes.func,
	    onAlign: _react.PropTypes.func,
	    getRootDomNode: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    align: _react.PropTypes.any,
	    destroyPopupOnHide: _react.PropTypes.bool,
	    className: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    onMouseLeave: _react.PropTypes.func
	  },

	  componentDidMount: function componentDidMount() {
	    this.rootNode = this.getPopupDomNode();
	  },
	  onAlign: function onAlign(popupDomNode, align) {
	    var props = this.props;
	    var alignClassName = props.getClassNameFromAlign(props.align);
	    var currentAlignClassName = props.getClassNameFromAlign(align);
	    if (alignClassName !== currentAlignClassName) {
	      this.currentAlignClassName = currentAlignClassName;
	      popupDomNode.className = this.getClassName(currentAlignClassName);
	    }
	    props.onAlign(popupDomNode, align);
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    return _reactDom2["default"].findDOMNode(this.refs.popup);
	  },
	  getTarget: function getTarget() {
	    return this.props.getRootDomNode();
	  },
	  getMaskTransitionName: function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },
	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  getClassName: function getClassName(currentAlignClassName) {
	    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;
	  },
	  getPopupElement: function getPopupElement() {
	    var props = this.props;
	    var align = props.align,
	        style = props.style,
	        visible = props.visible,
	        prefixCls = props.prefixCls,
	        destroyPopupOnHide = props.destroyPopupOnHide;

	    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));
	    var hiddenClassName = prefixCls + '-hidden';
	    if (!visible) {
	      this.currentAlignClassName = null;
	    }
	    var newStyle = (0, _extends3["default"])({}, style, this.getZIndexStyle());
	    var popupInnerProps = {
	      className: className,
	      prefixCls: prefixCls,
	      ref: 'popup',
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      style: newStyle
	    };
	    if (destroyPopupOnHide) {
	      return _react2["default"].createElement(
	        _rcAnimate2["default"],
	        {
	          component: '',
	          exclusive: true,
	          transitionAppear: true,
	          transitionName: this.getTransitionName()
	        },
	        visible ? _react2["default"].createElement(
	          _rcAlign2["default"],
	          {
	            target: this.getTarget,
	            key: 'popup',
	            ref: this.saveAlign,
	            monitorWindowResize: true,
	            align: align,
	            onAlign: this.onAlign
	          },
	          _react2["default"].createElement(
	            _PopupInner2["default"],
	            (0, _extends3["default"])({
	              visible: true
	            }, popupInnerProps),
	            props.children
	          )
	        ) : null
	      );
	    }
	    return _react2["default"].createElement(
	      _rcAnimate2["default"],
	      {
	        component: '',
	        exclusive: true,
	        transitionAppear: true,
	        transitionName: this.getTransitionName(),
	        showProp: 'xVisible'
	      },
	      _react2["default"].createElement(
	        _rcAlign2["default"],
	        {
	          target: this.getTarget,
	          key: 'popup',
	          ref: this.saveAlign,
	          monitorWindowResize: true,
	          xVisible: visible,
	          childrenProps: { visible: 'xVisible' },
	          disabled: !visible,
	          align: align,
	          onAlign: this.onAlign
	        },
	        _react2["default"].createElement(
	          _PopupInner2["default"],
	          (0, _extends3["default"])({
	            hiddenClassName: hiddenClassName
	          }, popupInnerProps),
	          props.children
	        )
	      )
	    );
	  },
	  getZIndexStyle: function getZIndexStyle() {
	    var style = {};
	    var props = this.props;
	    if (props.zIndex !== undefined) {
	      style.zIndex = props.zIndex;
	    }
	    return style;
	  },
	  getMaskElement: function getMaskElement() {
	    var props = this.props;
	    var maskElement = void 0;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = _react2["default"].createElement(_LazyRenderBox2["default"], {
	        style: this.getZIndexStyle(),
	        key: 'mask',
	        className: props.prefixCls + '-mask',
	        hiddenClassName: props.prefixCls + '-mask-hidden',
	        visible: props.visible
	      });
	      if (maskTransition) {
	        maskElement = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            key: 'mask',
	            showProp: 'visible',
	            transitionAppear: true,
	            component: '',
	            transitionName: maskTransition
	          },
	          maskElement
	        );
	      }
	    }
	    return maskElement;
	  },
	  saveAlign: function saveAlign(align) {
	    this.alignInstance = align;
	  },
	  render: function render() {
	    return _react2["default"].createElement(
	      'div',
	      null,
	      this.getMaskElement(),
	      this.getPopupElement()
	    );
	  }
	});

	exports["default"] = Popup;
	module.exports = exports['default'];

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Align = __webpack_require__(143);

	var _Align2 = _interopRequireDefault(_Align);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Align2["default"]; // export this package's api

	module.exports = exports['default'];

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domAlign = __webpack_require__(144);

	var _domAlign2 = _interopRequireDefault(_domAlign);

	var _addEventListener = __webpack_require__(153);

	var _addEventListener2 = _interopRequireDefault(_addEventListener);

	var _isWindow = __webpack_require__(154);

	var _isWindow2 = _interopRequireDefault(_isWindow);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function buffer(fn, ms) {
	  var timer = void 0;

	  function clear() {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  }

	  function bufferFn() {
	    clear();
	    timer = setTimeout(fn, ms);
	  }

	  bufferFn.clear = clear;

	  return bufferFn;
	}

	var Align = _react2["default"].createClass({
	  displayName: 'Align',

	  propTypes: {
	    childrenProps: _react.PropTypes.object,
	    align: _react.PropTypes.object.isRequired,
	    target: _react.PropTypes.func,
	    onAlign: _react.PropTypes.func,
	    monitorBufferTime: _react.PropTypes.number,
	    monitorWindowResize: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      target: function target() {
	        return window;
	      },
	      onAlign: function onAlign() {},

	      monitorBufferTime: 50,
	      monitorWindowResize: false,
	      disabled: false
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    var props = this.props;
	    // if parent ref not attached .... use document.getElementById
	    this.forceAlign();
	    if (!props.disabled && props.monitorWindowResize) {
	      this.startMonitorWindowResize();
	    }
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var reAlign = false;
	    var props = this.props;

	    if (!props.disabled) {
	      if (prevProps.disabled || prevProps.align !== props.align) {
	        reAlign = true;
	      } else {
	        var lastTarget = prevProps.target();
	        var currentTarget = props.target();
	        if ((0, _isWindow2["default"])(lastTarget) && (0, _isWindow2["default"])(currentTarget)) {
	          reAlign = false;
	        } else if (lastTarget !== currentTarget) {
	          reAlign = true;
	        }
	      }
	    }

	    if (reAlign) {
	      this.forceAlign();
	    }

	    if (props.monitorWindowResize && !props.disabled) {
	      this.startMonitorWindowResize();
	    } else {
	      this.stopMonitorWindowResize();
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.stopMonitorWindowResize();
	  },
	  startMonitorWindowResize: function startMonitorWindowResize() {
	    if (!this.resizeHandler) {
	      this.bufferMonitor = buffer(this.forceAlign, this.props.monitorBufferTime);
	      this.resizeHandler = (0, _addEventListener2["default"])(window, 'resize', this.bufferMonitor);
	    }
	  },
	  stopMonitorWindowResize: function stopMonitorWindowResize() {
	    if (this.resizeHandler) {
	      this.bufferMonitor.clear();
	      this.resizeHandler.remove();
	      this.resizeHandler = null;
	    }
	  },
	  forceAlign: function forceAlign() {
	    var props = this.props;
	    if (!props.disabled) {
	      var source = _reactDom2["default"].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2["default"])(source, props.target(), props.align));
	    }
	  },
	  render: function render() {
	    var _props = this.props,
	        childrenProps = _props.childrenProps,
	        children = _props.children;

	    var child = _react2["default"].Children.only(children);
	    if (childrenProps) {
	      var newProps = {};
	      for (var prop in childrenProps) {
	        if (childrenProps.hasOwnProperty(prop)) {
	          newProps[prop] = this.props[childrenProps[prop]];
	        }
	      }
	      return _react2["default"].cloneElement(child, newProps);
	    }
	    return child;
	  }
	});

	exports["default"] = Align;
	module.exports = exports['default'];

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(145);

	var _utils2 = _interopRequireDefault(_utils);

	var _getOffsetParent = __webpack_require__(147);

	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

	var _getVisibleRectForElement = __webpack_require__(148);

	var _getVisibleRectForElement2 = _interopRequireDefault(_getVisibleRectForElement);

	var _adjustForViewport = __webpack_require__(149);

	var _adjustForViewport2 = _interopRequireDefault(_adjustForViewport);

	var _getRegion = __webpack_require__(150);

	var _getRegion2 = _interopRequireDefault(_getRegion);

	var _getElFuturePos = __webpack_require__(151);

	var _getElFuturePos2 = _interopRequireDefault(_getElFuturePos);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// http://yiminghe.iteye.com/blog/1124720

	/**
	 * align dom node flexibly
	 * @author yiminghe@gmail.com
	 */

	function isFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
	}

	function isFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
	}

	function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
	}

	function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
	}

	function flip(points, reg, map) {
	  var ret = [];
	  _utils2["default"].each(points, function (p) {
	    ret.push(p.replace(reg, function (m) {
	      return map[m];
	    }));
	  });
	  return ret;
	}

	function flipOffset(offset, index) {
	  offset[index] = -offset[index];
	  return offset;
	}

	function convertOffset(str, offsetLen) {
	  var n = void 0;
	  if (/%$/.test(str)) {
	    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
	  } else {
	    n = parseInt(str, 10);
	  }
	  return n || 0;
	}

	function normalizeOffset(offset, el) {
	  offset[0] = convertOffset(offset[0], el.width);
	  offset[1] = convertOffset(offset[1], el.height);
	}

	function domAlign(el, refNode, align) {
	  var points = align.points;
	  var offset = align.offset || [0, 0];
	  var targetOffset = align.targetOffset || [0, 0];
	  var overflow = align.overflow;
	  var target = align.target || refNode;
	  var source = align.source || el;
	  offset = [].concat(offset);
	  targetOffset = [].concat(targetOffset);
	  overflow = overflow || {};
	  var newOverflowCfg = {};

	  var fail = 0;
	  // 当前节点可以被放置的显示区域
	  var visibleRect = (0, _getVisibleRectForElement2["default"])(source);
	  // 当前节点所占的区域, left/top/width/height
	  var elRegion = (0, _getRegion2["default"])(source);
	  // 参照节点所占的区域, left/top/width/height
	  var refNodeRegion = (0, _getRegion2["default"])(target);
	  // 将 offset 转换成数值，支持百分比
	  normalizeOffset(offset, elRegion);
	  normalizeOffset(targetOffset, refNodeRegion);
	  // 当前节点将要被放置的位置
	  var elFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, points, offset, targetOffset);
	  // 当前节点将要所处的区域
	  var newElRegion = _utils2["default"].merge(elRegion, elFuturePos);

	  // 如果可视区域不能完全放置当前节点时允许调整
	  if (visibleRect && (overflow.adjustX || overflow.adjustY)) {
	    if (overflow.adjustX) {
	      // 如果横向不能放下
	      if (isFailX(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[lr]/ig, {
	          l: 'r',
	          r: 'l'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 0);
	        var newTargetOffset = flipOffset(targetOffset, 0);
	        var newElFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);
	        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    if (overflow.adjustY) {
	      // 如果纵向不能放下
	      if (isFailY(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var _newPoints = flip(points, /[tb]/ig, {
	          t: 'b',
	          b: 't'
	        });
	        // 偏移量也反下
	        var _newOffset = flipOffset(offset, 1);
	        var _newTargetOffset = flipOffset(targetOffset, 1);
	        var _newElFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, _newPoints, _newOffset, _newTargetOffset);
	        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = _newPoints;
	          offset = _newOffset;
	          targetOffset = _newTargetOffset;
	        }
	      }
	    }

	    // 如果失败，重新计算当前节点将要被放置的位置
	    if (fail) {
	      elFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, points, offset, targetOffset);
	      _utils2["default"].mix(newElRegion, elFuturePos);
	    }

	    // 检查反下后的位置是否可以放下了
	    // 如果仍然放不下只有指定了可以调整当前方向才调整
	    newOverflowCfg.adjustX = overflow.adjustX && isFailX(elFuturePos, elRegion, visibleRect);

	    newOverflowCfg.adjustY = overflow.adjustY && isFailY(elFuturePos, elRegion, visibleRect);

	    // 确实要调整，甚至可能会调整高度宽度
	    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
	      newElRegion = (0, _adjustForViewport2["default"])(elFuturePos, elRegion, visibleRect, newOverflowCfg);
	    }
	  }

	  // need judge to in case set fixed with in css on height auto element
	  if (newElRegion.width !== elRegion.width) {
	    _utils2["default"].css(source, 'width', _utils2["default"].width(source) + newElRegion.width - elRegion.width);
	  }

	  if (newElRegion.height !== elRegion.height) {
	    _utils2["default"].css(source, 'height', _utils2["default"].height(source) + newElRegion.height - elRegion.height);
	  }

	  // https://github.com/kissyteam/kissy/issues/190
	  // 相对于屏幕位置没变，而 left/top 变了
	  // 例如 <div 'relative'><el absolute></div>
	  _utils2["default"].offset(source, {
	    left: newElRegion.left,
	    top: newElRegion.top
	  }, {
	    useCssRight: align.useCssRight,
	    useCssBottom: align.useCssBottom,
	    useCssTransform: align.useCssTransform
	  });

	  return {
	    points: points,
	    offset: offset,
	    targetOffset: targetOffset,
	    overflow: newOverflowCfg
	  };
	}

	domAlign.__getOffsetParent = _getOffsetParent2["default"];

	domAlign.__getVisibleRectForElement = _getVisibleRectForElement2["default"];

	exports["default"] = domAlign;
	/**
	 *  2012-04-26 yiminghe@gmail.com
	 *   - 优化智能对齐算法
	 *   - 慎用 resizeXX
	 *
	 *  2011-07-13 yiminghe@gmail.com note:
	 *   - 增加智能对齐，以及大小调整选项
	 **/

	module.exports = exports['default'];

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _propertyUtils = __webpack_require__(146);

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	var getComputedStyleX = void 0;

	function force(x, y) {
	  return x + y;
	}

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value = value + 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	function getClientPosition(elem) {
	  var box = void 0;
	  var x = void 0;
	  var y = void 0;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, cs) {
	  var computedStyle = cs;
	  var val = '';
	  var d = elem.ownerDocument;
	  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function getOffsetDirection(dir, option) {
	  if (dir === 'left') {
	    return option.useCssRight ? 'right' : dir;
	  }
	  return option.useCssBottom ? 'bottom' : dir;
	}

	function oppositeOffsetDirection(dir) {
	  if (dir === 'left') {
	    return 'right';
	  } else if (dir === 'right') {
	    return 'left';
	  } else if (dir === 'top') {
	    return 'bottom';
	  } else if (dir === 'bottom') {
	    return 'top';
	  }
	}

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setLeftTop(elem, offset, option) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }
	  var presetH = -999;
	  var presetV = -999;
	  var horizontalProperty = getOffsetDirection('left', option);
	  var verticalProperty = getOffsetDirection('top', option);
	  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
	  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

	  if (horizontalProperty !== 'left') {
	    presetH = 999;
	  }

	  if (verticalProperty !== 'top') {
	    presetV = 999;
	  }
	  var originalTransition = '';
	  var originalOffset = getOffset(elem);
	  if ('left' in offset || 'top' in offset) {
	    originalTransition = (0, _propertyUtils.getTransitionProperty)(elem) || '';
	    (0, _propertyUtils.setTransitionProperty)(elem, 'none');
	  }
	  if ('left' in offset) {
	    elem.style[oppositeHorizontalProperty] = '';
	    elem.style[horizontalProperty] = presetH + 'px';
	  }
	  if ('top' in offset) {
	    elem.style[oppositeVerticalProperty] = '';
	    elem.style[verticalProperty] = presetV + 'px';
	  }
	  var old = getOffset(elem);
	  var originalStyle = {};
	  for (var key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      var dir = getOffsetDirection(key, option);
	      var preset = key === 'left' ? presetH : presetV;
	      var off = originalOffset[key] - old[key];
	      if (dir === key) {
	        originalStyle[dir] = preset + off;
	      } else {
	        originalStyle[dir] = preset - off;
	      }
	    }
	  }
	  css(elem, originalStyle);
	  // force relayout
	  force(elem.offsetTop, elem.offsetLeft);
	  if ('left' in offset || 'top' in offset) {
	    (0, _propertyUtils.setTransitionProperty)(elem, originalTransition);
	  }
	  var ret = {};
	  for (var _key in offset) {
	    if (offset.hasOwnProperty(_key)) {
	      var _dir = getOffsetDirection(_key, option);
	      var _off = offset[_key] - originalOffset[_key];
	      if (_key === _dir) {
	        ret[_dir] = originalStyle[_dir] + _off;
	      } else {
	        ret[_dir] = originalStyle[_dir] - _off;
	      }
	    }
	  }
	  css(elem, ret);
	}

	function setTransform(elem, offset) {
	  var originalOffset = getOffset(elem);
	  var originalXY = (0, _propertyUtils.getTransformXY)(elem);
	  var resultXY = { x: originalXY.x, y: originalXY.y };
	  if ('left' in offset) {
	    resultXY.x = originalXY.x + offset.left - originalOffset.left;
	  }
	  if ('top' in offset) {
	    resultXY.y = originalXY.y + offset.top - originalOffset.top;
	  }
	  (0, _propertyUtils.setTransformXY)(elem, resultXY);
	}

	function setOffset(elem, offset, option) {
	  if (option.useCssRight || option.useCssBottom) {
	    setLeftTop(elem, offset, option);
	  } else if (option.useCssTransform && (0, _propertyUtils.getTransformName)() in document.body.style) {
	    setTransform(elem, offset, option);
	  } else {
	    setLeftTop(elem, offset, option);
	  }
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = void 0;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = void 0;
	  var j = void 0;
	  var i = void 0;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = void 0;
	        if (prop === 'border') {
	          cssProp = '' + prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj !== null && obj !== undefined && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, ex) {
	  var extra = ex;
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  } else if (borderBoxValueOrIsBorderBox) {
	    if (extra === BORDER_INDEX) {
	      return val;
	    }
	    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay() {
	  for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  var val = void 0;
	  var elem = args[0];
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, v) {
	    var val = v;
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	function mix(to, from) {
	  for (var i in from) {
	    if (from.hasOwnProperty(i)) {
	      to[i] = from[i];
	    }
	  }
	  return to;
	}

	var utils = {
	  getWindow: function getWindow(node) {
	    if (node && node.document && node.setTimeout) {
	      return node;
	    }
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value, option) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value, option || {});
	    } else {
	      return getOffset(el);
	    }
	  },

	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var i = void 0;
	    var ret = {};
	    for (i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },

	  mix: mix,
	  getWindowScrollLeft: function getWindowScrollLeft(w) {
	    return getScrollLeft(w);
	  },
	  getWindowScrollTop: function getWindowScrollTop(w) {
	    return getScrollTop(w);
	  },
	  merge: function merge() {
	    var ret = {};

	    for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    for (var i = 0; i < args.length; i++) {
	      utils.mix(ret, args[i]);
	    }
	    return ret;
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
	};

	mix(utils, domUtils);

	exports["default"] = utils;
	module.exports = exports['default'];

/***/ },
/* 146 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getTransformName = getTransformName;
	exports.setTransitionProperty = setTransitionProperty;
	exports.getTransitionProperty = getTransitionProperty;
	exports.getTransformXY = getTransformXY;
	exports.setTransformXY = setTransformXY;
	var vendorPrefix = void 0;

	var jsCssMap = {
	  Webkit: '-webkit-',
	  Moz: '-moz-',
	  // IE did it wrong again ...
	  ms: '-ms-',
	  O: '-o-'
	};

	function getVendorPrefix() {
	  if (vendorPrefix !== undefined) {
	    return vendorPrefix;
	  }
	  vendorPrefix = '';
	  var style = document.createElement('p').style;
	  var testProp = 'Transform';
	  for (var key in jsCssMap) {
	    if (key + testProp in style) {
	      vendorPrefix = key;
	    }
	  }
	  return vendorPrefix;
	}

	function getTransitionName() {
	  return getVendorPrefix() ? getVendorPrefix() + 'TransitionProperty' : 'transitionProperty';
	}

	function getTransformName() {
	  return getVendorPrefix() ? getVendorPrefix() + 'Transform' : 'transform';
	}

	function setTransitionProperty(node, value) {
	  var name = getTransitionName();
	  if (name) {
	    node.style[name] = value;
	    if (name !== 'transitionProperty') {
	      node.style.transitionProperty = value;
	    }
	  }
	}

	function setTransform(node, value) {
	  var name = getTransformName();
	  if (name) {
	    node.style[name] = value;
	    if (name !== 'transform') {
	      node.style.transform = value;
	    }
	  }
	}

	function getTransitionProperty(node) {
	  return node.style.transitionProperty || node.style[getTransitionName()];
	}

	function getTransformXY(node) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
	  if (transform && transform !== 'none') {
	    var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
	    return { x: parseFloat(matrix[12] || matrix[4], 0), y: parseFloat(matrix[13] || matrix[5], 0) };
	  }
	  return {
	    x: 0,
	    y: 0
	  };
	}

	var matrix2d = /matrix\((.*)\)/;
	var matrix3d = /matrix3d\((.*)\)/;

	function setTransformXY(node, xy) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
	  if (transform && transform !== 'none') {
	    var arr = void 0;
	    var match2d = transform.match(matrix2d);
	    if (match2d) {
	      match2d = match2d[1];
	      arr = match2d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[4] = xy.x;
	      arr[5] = xy.y;
	      setTransform(node, 'matrix(' + arr.join(',') + ')');
	    } else {
	      var match3d = transform.match(matrix3d)[1];
	      arr = match3d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[12] = xy.x;
	      arr[13] = xy.y;
	      setTransform(node, 'matrix3d(' + arr.join(',') + ')');
	    }
	  } else {
	    setTransform(node, 'translateX(' + xy.x + 'px) translateY(' + xy.y + 'px) translateZ(0)');
	  }
	}

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(145);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * 得到会导致元素显示不全的祖先元素
	 */

	function getOffsetParent(element) {
	  // ie 这个也不是完全可行
	  /*
	   <div style="width: 50px;height: 100px;overflow: hidden">
	   <div style="width: 50px;height: 100px;position: relative;" id="d6">
	   元素 6 高 100px 宽 50px<br/>
	   </div>
	   </div>
	   */
	  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
	  //  In other browsers it only includes elements with position absolute, relative or
	  // fixed, not elements with overflow set to auto or scroll.
	  //        if (UA.ie && ieMode < 8) {
	  //            return element.offsetParent;
	  //        }
	  // 统一的 offsetParent 方法
	  var doc = element.ownerDocument;
	  var body = doc.body;
	  var parent = void 0;
	  var positionStyle = _utils2["default"].css(element, 'position');
	  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

	  if (!skipStatic) {
	    return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;
	  }

	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    positionStyle = _utils2["default"].css(parent, 'position');
	    if (positionStyle !== 'static') {
	      return parent;
	    }
	  }
	  return null;
	}

	exports["default"] = getOffsetParent;
	module.exports = exports['default'];

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(145);

	var _utils2 = _interopRequireDefault(_utils);

	var _getOffsetParent = __webpack_require__(147);

	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * 获得元素的显示部分的区域
	 */
	function getVisibleRectForElement(element) {
	  var visibleRect = {
	    left: 0,
	    right: Infinity,
	    top: 0,
	    bottom: Infinity
	  };
	  var el = (0, _getOffsetParent2["default"])(element);
	  var scrollX = void 0;
	  var scrollY = void 0;
	  var winSize = void 0;
	  var doc = element.ownerDocument;
	  var win = doc.defaultView || doc.parentWindow;
	  var body = doc.body;
	  var documentElement = doc.documentElement;

	  // Determine the size of the visible rect by climbing the dom accounting for
	  // all scrollable containers.
	  while (el) {
	    // clientWidth is zero for inline block elements in ie.
	    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&
	    // body may have overflow set on it, yet we still get the entire
	    // viewport. In some browsers, el.offsetParent may be
	    // document.documentElement, so check for that too.
	    el !== body && el !== documentElement && _utils2["default"].css(el, 'overflow') !== 'visible') {
	      var pos = _utils2["default"].offset(el);
	      // add border
	      pos.left += el.clientLeft;
	      pos.top += el.clientTop;
	      visibleRect.top = Math.max(visibleRect.top, pos.top);
	      visibleRect.right = Math.min(visibleRect.right,
	      // consider area without scrollBar
	      pos.left + el.clientWidth);
	      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
	      visibleRect.left = Math.max(visibleRect.left, pos.left);
	    } else if (el === body || el === documentElement) {
	      break;
	    }
	    el = (0, _getOffsetParent2["default"])(el);
	  }

	  // Clip by window's viewport.
	  scrollX = _utils2["default"].getWindowScrollLeft(win);
	  scrollY = _utils2["default"].getWindowScrollTop(win);
	  visibleRect.left = Math.max(visibleRect.left, scrollX);
	  visibleRect.top = Math.max(visibleRect.top, scrollY);
	  winSize = {
	    width: _utils2["default"].viewportWidth(win),
	    height: _utils2["default"].viewportHeight(win)
	  };
	  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
	  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
	  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
	}

	exports["default"] = getVisibleRectForElement;
	module.exports = exports['default'];

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(145);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
	  var pos = _utils2["default"].clone(elFuturePos);
	  var size = {
	    width: elRegion.width,
	    height: elRegion.height
	  };

	  if (overflow.adjustX && pos.left < visibleRect.left) {
	    pos.left = visibleRect.left;
	  }

	  // Left edge inside and right edge outside viewport, try to resize it.
	  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
	    size.width -= pos.left + size.width - visibleRect.right;
	  }

	  // Right edge outside viewport, try to move it.
	  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
	    // 保证左边界和可视区域左边界对齐
	    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
	  }

	  // Top edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top < visibleRect.top) {
	    pos.top = visibleRect.top;
	  }

	  // Top edge inside and bottom edge outside viewport, try to resize it.
	  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
	    size.height -= pos.top + size.height - visibleRect.bottom;
	  }

	  // Bottom edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
	    // 保证上边界和可视区域上边界对齐
	    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
	  }

	  return _utils2["default"].mix(pos, size);
	}

	exports["default"] = adjustForViewport;
	module.exports = exports['default'];

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(145);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getRegion(node) {
	  var offset = void 0;
	  var w = void 0;
	  var h = void 0;
	  if (!_utils2["default"].isWindow(node) && node.nodeType !== 9) {
	    offset = _utils2["default"].offset(node);
	    w = _utils2["default"].outerWidth(node);
	    h = _utils2["default"].outerHeight(node);
	  } else {
	    var win = _utils2["default"].getWindow(node);
	    offset = {
	      left: _utils2["default"].getWindowScrollLeft(win),
	      top: _utils2["default"].getWindowScrollTop(win)
	    };
	    w = _utils2["default"].viewportWidth(win);
	    h = _utils2["default"].viewportHeight(win);
	  }
	  offset.width = w;
	  offset.height = h;
	  return offset;
	}

	exports["default"] = getRegion;
	module.exports = exports['default'];

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getAlignOffset = __webpack_require__(152);

	var _getAlignOffset2 = _interopRequireDefault(_getAlignOffset);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
	  var xy = void 0;
	  var diff = void 0;
	  var p1 = void 0;
	  var p2 = void 0;

	  xy = {
	    left: elRegion.left,
	    top: elRegion.top
	  };

	  p1 = (0, _getAlignOffset2["default"])(refNodeRegion, points[1]);
	  p2 = (0, _getAlignOffset2["default"])(elRegion, points[0]);

	  diff = [p2.left - p1.left, p2.top - p1.top];

	  return {
	    left: xy.left - diff[0] + offset[0] - targetOffset[0],
	    top: xy.top - diff[1] + offset[1] - targetOffset[1]
	  };
	}

	exports["default"] = getElFuturePos;
	module.exports = exports['default'];

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * 获取 node 上的 align 对齐点 相对于页面的坐标
	 */

	function getAlignOffset(region, align) {
	  var V = align.charAt(0);
	  var H = align.charAt(1);
	  var w = region.width;
	  var h = region.height;
	  var x = void 0;
	  var y = void 0;

	  x = region.left;
	  y = region.top;

	  if (V === 'c') {
	    y += h / 2;
	  } else if (V === 'b') {
	    y += h;
	  }

	  if (H === 'c') {
	    x += w / 2;
	  } else if (H === 'r') {
	    x += w;
	  }

	  return {
	    left: x,
	    top: y
	  };
	}

	exports["default"] = getAlignOffset;
	module.exports = exports['default'];

/***/ },
/* 153 */
127,
/* 154 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = isWindow;
	function isWindow(obj) {
	  /* eslint no-eq-null: 0 */
	  /* eslint eqeqeq: 0 */
	  return obj != null && obj == obj.window;
	}
	module.exports = exports['default'];

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _LazyRenderBox = __webpack_require__(156);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var PopupInner = _react2["default"].createClass({
	  displayName: 'PopupInner',

	  propTypes: {
	    hiddenClassName: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func,
	    children: _react.PropTypes.any
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className;
	    if (!props.visible) {
	      className += ' ' + props.hiddenClassName;
	    }
	    return _react2["default"].createElement(
	      'div',
	      {
	        className: className,
	        onMouseEnter: props.onMouseEnter,
	        onMouseLeave: props.onMouseLeave,
	        style: props.style
	      },
	      _react2["default"].createElement(
	        _LazyRenderBox2["default"],
	        { className: props.prefixCls + '-content', visible: props.visible },
	        props.children
	      )
	    );
	  }
	});

	exports["default"] = PopupInner;
	module.exports = exports['default'];

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _objectWithoutProperties2 = __webpack_require__(136);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var LazyRenderBox = _react2["default"].createClass({
	  displayName: 'LazyRenderBox',

	  propTypes: {
	    children: _react.PropTypes.any,
	    className: _react.PropTypes.string,
	    visible: _react.PropTypes.bool,
	    hiddenClassName: _react.PropTypes.string
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return nextProps.hiddenClassName || nextProps.visible;
	  },
	  render: function render() {
	    var _props = this.props,
	        hiddenClassName = _props.hiddenClassName,
	        visible = _props.visible,
	        props = (0, _objectWithoutProperties3["default"])(_props, ['hiddenClassName', 'visible']);


	    if (hiddenClassName || _react2["default"].Children.count(props.children) > 1) {
	      if (!visible && hiddenClassName) {
	        props.className += ' ' + hiddenClassName;
	      }
	      return _react2["default"].createElement('div', props);
	    }

	    return _react2["default"].Children.only(props.children);
	  }
	});

	exports["default"] = LazyRenderBox;
	module.exports = exports['default'];

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	exports.getAlignFromPlacement = getAlignFromPlacement;
	exports.getPopupClassNameFromAlign = getPopupClassNameFromAlign;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function isPointsEq(a1, a2) {
	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return (0, _extends3["default"])({}, baseAlign, align);
	}

	function getPopupClassNameFromAlign(builtinPlacements, prefixCls, align) {
	  var points = align.points;
	  for (var placement in builtinPlacements) {
	    if (builtinPlacements.hasOwnProperty(placement)) {
	      if (isPointsEq(builtinPlacements[placement].points, points)) {
	        return prefixCls + '-placement-' + placement;
	      }
	    }
	  }
	  return '';
	}

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = getContainerRenderMixin;

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function defaultGetContainer() {
	  var container = document.createElement('div');
	  document.body.appendChild(container);
	  return container;
	}

	function getContainerRenderMixin(config) {
	  var _config$autoMount = config.autoMount,
	      autoMount = _config$autoMount === undefined ? true : _config$autoMount,
	      _config$autoDestroy = config.autoDestroy,
	      autoDestroy = _config$autoDestroy === undefined ? true : _config$autoDestroy,
	      isVisible = config.isVisible,
	      getComponent = config.getComponent,
	      _config$getContainer = config.getContainer,
	      getContainer = _config$getContainer === undefined ? defaultGetContainer : _config$getContainer;


	  var mixin = void 0;

	  function _renderComponent(instance, componentArg, ready) {
	    if (!isVisible || instance._component || isVisible(instance)) {
	      if (!instance._container) {
	        instance._container = getContainer(instance);
	      }
	      var component = void 0;
	      if (instance.getComponent) {
	        component = instance.getComponent(componentArg);
	      } else {
	        component = getComponent(instance, componentArg);
	      }
	      _reactDom2["default"].unstable_renderSubtreeIntoContainer(instance, component, instance._container, function callback() {
	        instance._component = this;
	        if (ready) {
	          ready.call(this);
	        }
	      });
	    }
	  }

	  if (autoMount) {
	    mixin = _extends({}, mixin, {
	      componentDidMount: function componentDidMount() {
	        _renderComponent(this);
	      },
	      componentDidUpdate: function componentDidUpdate() {
	        _renderComponent(this);
	      }
	    });
	  }

	  if (!autoMount || !autoDestroy) {
	    mixin = _extends({}, mixin, {
	      renderComponent: function renderComponent(componentArg, ready) {
	        _renderComponent(this, componentArg, ready);
	      }
	    });
	  }

	  function _removeContainer(instance) {
	    if (instance._container) {
	      var container = instance._container;
	      _reactDom2["default"].unmountComponentAtNode(container);
	      container.parentNode.removeChild(container);
	      instance._container = null;
	    }
	  }

	  if (autoDestroy) {
	    mixin = _extends({}, mixin, {
	      componentWillUnmount: function componentWillUnmount() {
	        _removeContainer(this);
	      }
	    });
	  } else {
	    mixin = _extends({}, mixin, {
	      removeContainer: function removeContainer() {
	        _removeContainer(this);
	      }
	    });
	  }

	  return mixin;
	}
	module.exports = exports['default'];

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof2 = __webpack_require__(61);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _util = __webpack_require__(113);

	var _rcMenu = __webpack_require__(114);

	var _rcMenu2 = _interopRequireDefault(_rcMenu);

	var _domScrollIntoView = __webpack_require__(118);

	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var DropdownMenu = _react2["default"].createClass({
	  displayName: 'DropdownMenu',

	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    value: _react.PropTypes.any,
	    dropdownMenuStyle: _react.PropTypes.object,
	    multiple: _react.PropTypes.bool,
	    onPopupFocus: _react.PropTypes.func,
	    onMenuDeSelect: _react.PropTypes.func,
	    onMenuSelect: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    menuItems: _react.PropTypes.any,
	    inputValue: _react.PropTypes.string,
	    visible: _react.PropTypes.bool
	  },

	  componentWillMount: function componentWillMount() {
	    this.lastInputValue = this.props.inputValue;
	  },
	  componentDidMount: function componentDidMount() {
	    this.scrollActiveItemToView();
	    this.lastVisible = this.props.visible;
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    if (!nextProps.visible) {
	      this.lastVisible = false;
	    }
	    // freeze when hide
	    return nextProps.visible;
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (!prevProps.visible && props.visible) {
	      this.scrollActiveItemToView();
	    }
	    this.lastVisible = props.visible;
	    this.lastInputValue = props.inputValue;
	  },
	  scrollActiveItemToView: function scrollActiveItemToView() {
	    // scroll into view
	    var itemComponent = (0, _reactDom.findDOMNode)(this.firstActiveItem);
	    if (itemComponent) {
	      (0, _domScrollIntoView2["default"])(itemComponent, (0, _reactDom.findDOMNode)(this.refs.menu), {
	        onlyScrollIfNeeded: true
	      });
	    }
	  },
	  renderMenu: function renderMenu() {
	    var _this = this;

	    var props = this.props;
	    var menuItems = props.menuItems;
	    var defaultActiveFirstOption = props.defaultActiveFirstOption;
	    var value = props.value;
	    var prefixCls = props.prefixCls;
	    var multiple = props.multiple;
	    var onMenuSelect = props.onMenuSelect;
	    var inputValue = props.inputValue;

	    if (menuItems && menuItems.length) {
	      var _ret = function () {
	        var menuProps = {};
	        if (multiple) {
	          menuProps.onDeselect = props.onMenuDeselect;
	          menuProps.onSelect = onMenuSelect;
	        } else {
	          menuProps.onClick = onMenuSelect;
	        }

	        var selectedKeys = (0, _util.getSelectKeys)(menuItems, value);
	        var activeKeyProps = {};

	        var clonedMenuItems = menuItems;
	        if (selectedKeys.length) {
	          (function () {
	            if (props.visible && !_this.lastVisible) {
	              activeKeyProps.activeKey = selectedKeys[0];
	            }
	            var foundFirst = false;
	            // set firstActiveItem via cloning menus
	            // for scroll into view
	            var clone = function clone(item) {
	              if (!foundFirst && selectedKeys.indexOf(item.key) !== -1) {
	                foundFirst = true;
	                return (0, _react.cloneElement)(item, {
	                  ref: function ref(_ref) {
	                    _this.firstActiveItem = _ref;
	                  }
	                });
	              }
	              return item;
	            };

	            clonedMenuItems = menuItems.map(function (item) {
	              if (item.type === _rcMenu.ItemGroup) {
	                var children = item.props.children.map(clone);
	                return (0, _react.cloneElement)(item, {}, children);
	              }
	              return clone(item);
	            });
	          })();
	        }

	        // clear activeKey when inputValue change
	        if (inputValue !== _this.lastInputValue) {
	          activeKeyProps.activeKey = '';
	        }

	        return {
	          v: _react2["default"].createElement(
	            _rcMenu2["default"],
	            (0, _extends3["default"])({
	              ref: 'menu',
	              style: _this.props.dropdownMenuStyle,
	              defaultActiveFirst: defaultActiveFirstOption
	            }, activeKeyProps, {
	              multiple: multiple,
	              focusable: false
	            }, menuProps, {
	              selectedKeys: selectedKeys,
	              prefixCls: prefixCls + '-menu'
	            }),
	            clonedMenuItems
	          )
	        };
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3["default"])(_ret)) === "object") return _ret.v;
	    }
	    return null;
	  },
	  render: function render() {
	    return _react2["default"].createElement(
	      'div',
	      {
	        style: { overflow: 'auto' },
	        onFocus: this.props.onPopupFocus,
	        onMouseDown: _util.preventDefaultEvent
	      },
	      this.renderMenu()
	    );
	  }
	});

	exports["default"] = DropdownMenu;
	module.exports = exports['default'];

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _util = __webpack_require__(113);

	var _rcMenu = __webpack_require__(114);

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	var _OptGroup = __webpack_require__(58);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	var _Option = __webpack_require__(163);

	var _Option2 = _interopRequireDefault(_Option);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = {
	  filterOption: function filterOption(input, child) {
	    if (!input) {
	      return true;
	    }
	    var filterOption = this.props.filterOption;
	    if (!filterOption) {
	      return true;
	    }
	    if (child.props.disabled) {
	      return false;
	    }
	    return filterOption.call(this, input, child);
	  },
	  renderFilterOptions: function renderFilterOptions(inputValue) {
	    return this.renderFilterOptionsFromChildren(this.props.children, true, inputValue);
	  },
	  renderFilterOptionsFromChildren: function renderFilterOptionsFromChildren(children, showNotFound, iv) {
	    var _this = this;

	    var sel = [];
	    var props = this.props;
	    var inputValue = iv === undefined ? this.state.inputValue : iv;
	    var childrenKeys = [];
	    var tags = props.tags;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2["default"]) {
	        var innerItems = _this.renderFilterOptionsFromChildren(child.props.children, false);
	        if (innerItems.length) {
	          var label = child.props.label;
	          var key = child.key;
	          if (!key && typeof label === 'string') {
	            key = label;
	          } else if (!label && key) {
	            label = key;
	          }
	          sel.push(_react2["default"].createElement(
	            _rcMenu.ItemGroup,
	            { key: key, title: label },
	            innerItems
	          ));
	        }
	        return;
	      }

	      (0, _warning2["default"])(child.type === _Option2["default"], 'the children of `Select` should be `Select.Option` or `Select.OptGroup`, ' + ('instead of `' + (child.type.name || child.type.displayName || child.type) + '`.'));

	      var childValue = (0, _util.getValuePropValue)(child);
	      if (_this.filterOption(inputValue, child)) {
	        sel.push(_react2["default"].createElement(_rcMenu.Item, (0, _extends3["default"])({
	          style: _util.UNSELECTABLE_STYLE,
	          attribute: _util.UNSELECTABLE_ATTRIBUTE,
	          value: childValue,
	          key: childValue
	        }, child.props)));
	      }
	      if (tags && !child.props.disabled) {
	        childrenKeys.push(childValue);
	      }
	    });
	    if (tags) {
	      // tags value must be string
	      var value = this.state.value || [];
	      value = value.filter(function (singleValue) {
	        return childrenKeys.indexOf(singleValue.key) === -1 && (!inputValue || String(singleValue.key).indexOf(String(inputValue)) > -1);
	      });
	      sel = sel.concat(value.map(function (singleValue) {
	        var key = singleValue.key;
	        return _react2["default"].createElement(
	          _rcMenu.Item,
	          {
	            style: _util.UNSELECTABLE_STYLE,
	            attribute: _util.UNSELECTABLE_ATTRIBUTE,
	            value: key,
	            key: key
	          },
	          key
	        );
	      }));
	      if (inputValue) {
	        var notFindInputItem = sel.every(function (option) {
	          return (0, _util.getValuePropValue)(option) !== inputValue;
	        });
	        if (notFindInputItem) {
	          sel.unshift(_react2["default"].createElement(
	            _rcMenu.Item,
	            {
	              style: _util.UNSELECTABLE_STYLE,
	              attribute: _util.UNSELECTABLE_ATTRIBUTE,
	              value: inputValue,
	              key: inputValue
	            },
	            inputValue
	          ));
	        }
	      }
	    }
	    if (!sel.length && showNotFound && props.notFoundContent) {
	      sel = [_react2["default"].createElement(
	        _rcMenu.Item,
	        {
	          style: _util.UNSELECTABLE_STYLE,
	          attribute: _util.UNSELECTABLE_ATTRIBUTE,
	          disabled: true,
	          value: 'NOT_FOUND',
	          key: 'NOT_FOUND'
	        },
	        props.notFoundContent
	      )];
	    }
	    return sel;
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(162)))

/***/ },
/* 162 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(59);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _possibleConstructorReturn2 = __webpack_require__(60);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(96);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var Option = function (_React$Component) {
	  (0, _inherits3["default"])(Option, _React$Component);

	  function Option() {
	    (0, _classCallCheck3["default"])(this, Option);
	    return (0, _possibleConstructorReturn3["default"])(this, _React$Component.apply(this, arguments));
	  }

	  return Option;
	}(_react2["default"].Component);

	Option.propTypes = {
	  value: _react2["default"].PropTypes.string
	};
	exports["default"] = Option;
	module.exports = exports['default'];

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var React = __webpack_require__(7);
	var ReactDOM = __webpack_require__(56);

	var Pager = function (_React$Component) {
	  _inherits(Pager, _React$Component);

	  function Pager() {
	    _classCallCheck(this, Pager);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Pager.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.rootPrefixCls + '-item';
	    var cls = prefixCls + ' ' + prefixCls + '-' + props.page;

	    if (props.active) {
	      cls = cls + ' ' + prefixCls + '-active';
	    }

	    var title = void 0;
	    if (props.page === 1) {
	      title = 'First Page';
	    } else if (props.last) {
	      title = 'Last Page: ' + props.page;
	    } else {
	      title = 'Page ' + props.page;
	    }
	    return React.createElement(
	      'li',
	      { title: title, className: cls, onClick: props.onClick },
	      React.createElement(
	        'a',
	        null,
	        props.page
	      )
	    );
	  };

	  return Pager;
	}(React.Component);

	Pager.propTypes = {
	  page: React.PropTypes.number,
	  active: React.PropTypes.bool,
	  last: React.PropTypes.bool
	};

	module.exports = Pager;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var React = __webpack_require__(7);
	var ReactDOM = __webpack_require__(56);
	var KEYCODE = __webpack_require__(166);
	var i18n = __webpack_require__(167);

	var Options = function (_React$Component) {
	  _inherits(Options, _React$Component);

	  function Options(props) {
	    _classCallCheck(this, Options);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      current: props.current,
	      _current: props.current
	    };

	    ['_handleChange', '_changeSize', '_go'].forEach(function (method) {
	      return _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  Options.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var state = this.state;
	    var prefixCls = props.rootPrefixCls + '-options';
	    var sizeOptions = props.sizeOptions;
	    var pageSize = props.pageSize;
	    var changeSize = props.changeSize;
	    var quickGo = props.quickGo;
	    var Select = props.selectComponentClass;
	    var changeSelect = null;
	    var goInput = null;

	    if (!(changeSize || quickGo)) {
	      return null;
	    }

	    if (changeSize && Select) {
	      (function () {
	        var Option = Select.Option;
	        changeSelect = React.createElement(
	          Select,
	          {
	            prefixCls: props.selectPrefixCls, showSearch: false,
	            className: prefixCls + '-size-changer',
	            optionLabelProp: 'children',
	            dropdownClassName: prefixCls + '-size-changer-dropdown',
	            defaultValue: sizeOptions.indexOf(pageSize) == -1 ? sizeOptions[0] + "" : pageSize + "",
	            onChange: _this2._changeSize },
	          sizeOptions.map(function (option, index) {
	            return React.createElement(
	              Option,
	              { key: option, value: option + "" },
	              option + i18n[props.locale]['items_per_page']
	            );
	          })
	        );
	      })();
	    }

	    if (quickGo) {
	      goInput = React.createElement(
	        'div',
	        { title: 'Quick jump to page', className: prefixCls + '-quick-jumper' },
	        i18n[props.locale]['jump_to'],
	        React.createElement('input', { type: 'text', value: state._current, onChange: this._handleChange.bind(this), onKeyUp: this._go.bind(this) }),
	        i18n[props.locale]['page']
	      );
	    }

	    return React.createElement(
	      'div',
	      { className: '' + prefixCls },
	      changeSelect,
	      goInput
	    );
	  };

	  Options.prototype._changeSize = function _changeSize(value) {
	    this.props.changeSize(Number(value));
	  };

	  Options.prototype._handleChange = function _handleChange(evt) {
	    var _val = evt.target.value;

	    this.setState({
	      _current: _val
	    });
	  };

	  Options.prototype._go = function _go(e) {
	    var _val = e.target.value;
	    if (_val === '') {
	      return;
	    }
	    var val = Number(this.state._current);
	    if (isNaN(val)) {
	      val = this.state.current;
	    }
	    if (e.keyCode === KEYCODE.ENTER) {
	      var c = this.props.quickGo(val);
	      this.setState({
	        _current: c,
	        current: c
	      });
	    }
	  };

	  return Options;
	}(React.Component);

	Options.propTypes = {
	  changeSize: React.PropTypes.func,
	  quickGo: React.PropTypes.func,
	  selectComponentClass: React.PropTypes.func,
	  current: React.PropTypes.number
	};

	module.exports = Options;

/***/ },
/* 166 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  ZERO: 48,
	  NINE: 57,

	  NUMPAD_ZERO: 96,
	  NUMPAD_NINE: 105,

	  BACKSPACE: 8,
	  DELETE: 46,
	  ENTER: 13,

	  ARROW_UP: 38,
	  ARROW_DOWN: 40
	};

/***/ },
/* 167 */
/***/ function(module, exports) {

	'use strict';

	var locale = {
	    "en-us": {
	        items_per_page: '/page',
	        jump_to: 'Goto',
	        page: '',

	        // Pagination.js
	        item: ' entries'
	    },
	    "zh-cn": {
	        // Options.js
	        items_per_page: '条/页',
	        jump_to: '跳至',
	        page: '页',

	        // Pagination.js
	        item: '条'
	    }
	};
	locale['en'] = locale['en-us'];

	module.exports = locale;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Const Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(169);

/***/ },
/* 169 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Const Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Const = {
	  MODE: {
	    VIEW: 'view',
	    EDIT: 'edit'
	  },
	  ENV: {
	    DEBUG: 'debug',
	    LIVE: 'live'
	  }
	};

	module.exports = Const;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(171);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_SYMBOLS_FLAG = 4;

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	}

	module.exports = cloneDeep;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(172),
	    arrayEach = __webpack_require__(216),
	    assignValue = __webpack_require__(217),
	    baseAssign = __webpack_require__(220),
	    baseAssignIn = __webpack_require__(243),
	    cloneBuffer = __webpack_require__(247),
	    copyArray = __webpack_require__(248),
	    copySymbols = __webpack_require__(249),
	    copySymbolsIn = __webpack_require__(253),
	    getAllKeys = __webpack_require__(257),
	    getAllKeysIn = __webpack_require__(259),
	    getTag = __webpack_require__(260),
	    initCloneArray = __webpack_require__(265),
	    initCloneByTag = __webpack_require__(266),
	    initCloneObject = __webpack_require__(280),
	    isArray = __webpack_require__(228),
	    isBuffer = __webpack_require__(229),
	    isObject = __webpack_require__(196),
	    keys = __webpack_require__(222);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = (isFlat || isFunc) ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat
	          ? copySymbolsIn(value, baseAssignIn(result, value))
	          : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  var keysFunc = isFull
	    ? (isFlat ? getAllKeysIn : getAllKeys)
	    : (isFlat ? keysIn : keys);

	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(173),
	    stackClear = __webpack_require__(181),
	    stackDelete = __webpack_require__(182),
	    stackGet = __webpack_require__(183),
	    stackHas = __webpack_require__(184),
	    stackSet = __webpack_require__(185);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(174),
	    listCacheDelete = __webpack_require__(175),
	    listCacheGet = __webpack_require__(178),
	    listCacheHas = __webpack_require__(179),
	    listCacheSet = __webpack_require__(180);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;


/***/ },
/* 174 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(176);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(177);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(176);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(176);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(176);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(173);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	module.exports = stackClear;


/***/ },
/* 182 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;


/***/ },
/* 183 */
/***/ function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;


/***/ },
/* 184 */
/***/ function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(173),
	    Map = __webpack_require__(186),
	    MapCache = __webpack_require__(201);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187),
	    root = __webpack_require__(192);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(188),
	    getValue = __webpack_require__(200);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(189),
	    isMasked = __webpack_require__(197),
	    isObject = __webpack_require__(196),
	    toSource = __webpack_require__(199);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(190),
	    isObject = __webpack_require__(196);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(191),
	    getRawTag = __webpack_require__(194),
	    objectToString = __webpack_require__(195);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(192);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(193);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 193 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(191);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 195 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 196 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(198);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(192);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ },
/* 199 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ },
/* 200 */
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(202),
	    mapCacheDelete = __webpack_require__(210),
	    mapCacheGet = __webpack_require__(213),
	    mapCacheHas = __webpack_require__(214),
	    mapCacheSet = __webpack_require__(215);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(203),
	    ListCache = __webpack_require__(173),
	    Map = __webpack_require__(186);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	module.exports = mapCacheClear;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(204),
	    hashDelete = __webpack_require__(206),
	    hashGet = __webpack_require__(207),
	    hashHas = __webpack_require__(208),
	    hashSet = __webpack_require__(209);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(205);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ },
/* 206 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(205);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(205);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(205);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(211);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(212);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	module.exports = getMapData;


/***/ },
/* 212 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	module.exports = isKeyable;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(211);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(211);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(211);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;


/***/ },
/* 216 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(218),
	    eq = __webpack_require__(177);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(219);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187);

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	module.exports = defineProperty;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(221),
	    keys = __webpack_require__(222);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(217),
	    baseAssignValue = __webpack_require__(218);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(223),
	    baseKeys = __webpack_require__(238),
	    isArrayLike = __webpack_require__(242);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(224),
	    isArguments = __webpack_require__(225),
	    isArray = __webpack_require__(228),
	    isBuffer = __webpack_require__(229),
	    isIndex = __webpack_require__(232),
	    isTypedArray = __webpack_require__(233);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ },
/* 224 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(226),
	    isObjectLike = __webpack_require__(227);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(190),
	    isObjectLike = __webpack_require__(227);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;


/***/ },
/* 227 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 228 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(192),
	    stubFalse = __webpack_require__(231);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(230)(module)))

/***/ },
/* 230 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 231 */
/***/ function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ },
/* 232 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(234),
	    baseUnary = __webpack_require__(236),
	    nodeUtil = __webpack_require__(237);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(190),
	    isLength = __webpack_require__(235),
	    isObjectLike = __webpack_require__(227);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;


/***/ },
/* 235 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 236 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(193);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(230)(module)))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(239),
	    nativeKeys = __webpack_require__(240);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ },
/* 239 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(241);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ },
/* 241 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(189),
	    isLength = __webpack_require__(235);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(221),
	    keysIn = __webpack_require__(244);

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn(object, source) {
	  return object && copyObject(source, keysIn(source), object);
	}

	module.exports = baseAssignIn;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(223),
	    baseKeysIn = __webpack_require__(245),
	    isArrayLike = __webpack_require__(242);

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	module.exports = keysIn;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(196),
	    isPrototype = __webpack_require__(239),
	    nativeKeysIn = __webpack_require__(246);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeysIn;


/***/ },
/* 246 */
/***/ function(module, exports) {

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = nativeKeysIn;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(192);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(230)(module)))

/***/ },
/* 248 */
/***/ function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = copyArray;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(221),
	    getSymbols = __webpack_require__(250);

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	module.exports = copySymbols;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(251),
	    stubArray = __webpack_require__(252);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	module.exports = getSymbols;


/***/ },
/* 251 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = arrayFilter;


/***/ },
/* 252 */
/***/ function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	module.exports = stubArray;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(221),
	    getSymbolsIn = __webpack_require__(254);

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn(source, object) {
	  return copyObject(source, getSymbolsIn(source), object);
	}

	module.exports = copySymbolsIn;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(255),
	    getPrototype = __webpack_require__(256),
	    getSymbols = __webpack_require__(250),
	    stubArray = __webpack_require__(252);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};

	module.exports = getSymbolsIn;


/***/ },
/* 255 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(241);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(258),
	    getSymbols = __webpack_require__(250),
	    keys = __webpack_require__(222);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(255),
	    isArray = __webpack_require__(228);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(258),
	    getSymbolsIn = __webpack_require__(254),
	    keysIn = __webpack_require__(244);

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn, getSymbolsIn);
	}

	module.exports = getAllKeysIn;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(261),
	    Map = __webpack_require__(186),
	    Promise = __webpack_require__(262),
	    Set = __webpack_require__(263),
	    WeakMap = __webpack_require__(264),
	    baseGetTag = __webpack_require__(190),
	    toSource = __webpack_require__(199);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187),
	    root = __webpack_require__(192);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187),
	    root = __webpack_require__(192);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187),
	    root = __webpack_require__(192);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(187),
	    root = __webpack_require__(192);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ },
/* 265 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(267),
	    cloneDataView = __webpack_require__(269),
	    cloneMap = __webpack_require__(270),
	    cloneRegExp = __webpack_require__(274),
	    cloneSet = __webpack_require__(275),
	    cloneSymbol = __webpack_require__(278),
	    cloneTypedArray = __webpack_require__(279);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	module.exports = initCloneByTag;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(268);

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	module.exports = cloneArrayBuffer;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(192);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(267);

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	module.exports = cloneDataView;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var addMapEntry = __webpack_require__(271),
	    arrayReduce = __webpack_require__(272),
	    mapToArray = __webpack_require__(273);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1;

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	module.exports = cloneMap;


/***/ },
/* 271 */
/***/ function(module, exports) {

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	module.exports = addMapEntry;


/***/ },
/* 272 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduce;


/***/ },
/* 273 */
/***/ function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ },
/* 274 */
/***/ function(module, exports) {

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	module.exports = cloneRegExp;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var addSetEntry = __webpack_require__(276),
	    arrayReduce = __webpack_require__(272),
	    setToArray = __webpack_require__(277);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1;

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	module.exports = cloneSet;


/***/ },
/* 276 */
/***/ function(module, exports) {

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	module.exports = addSetEntry;


/***/ },
/* 277 */
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(191);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	module.exports = cloneSymbol;


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(267);

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	module.exports = cloneTypedArray;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(281),
	    getPrototype = __webpack_require__(256),
	    isPrototype = __webpack_require__(239);

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	module.exports = initCloneObject;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(196);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	module.exports = baseCreate;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(283);
	var isArguments = __webpack_require__(284);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;

	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ },
/* 283 */
/***/ function(module, exports) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;

	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ },
/* 284 */
/***/ function(module, exports) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(286));
		else if(typeof define === 'function' && define.amd)
			define("nattyFetch", ["natty-storage"], factory);
		else if(typeof exports === 'object')
			exports["nattyFetch"] = factory(require("natty-storage"));
		else
			root["nattyFetch"] = factory(root["nattyStorage"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(1);

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var hasWindow = 'undefined' !== typeof window;
	var nattyStorage = __webpack_require__(2);

	if (nattyStorage === undefined) {
	    console.warn('Please install the `natty-storage` script which is required by `natty-fetch`, go on with' + ' https://www.npmjs.com/package/natty-storage');
	}

	// 下面两个配置了webpack的alias
	var ajax = __webpack_require__(3);
	var jsonp = __webpack_require__(5);

	var Defer = __webpack_require__(6);
	var util = __webpack_require__(4);
	var event = __webpack_require__(7);

	// 内置插件
	var pluginLoop = __webpack_require__(8);
	var pluginSoon = __webpack_require__(9);

	var extend = util.extend;
	var runAsFn = util.runAsFn;
	var isAbsoluteUrl = util.isAbsoluteUrl;
	var isRelativeUrl = util.isRelativeUrl;
	var noop = util.noop;
	var isBoolean = util.isBoolean;
	var isArray = util.isArray;
	var isFunction = util.isFunction;
	var sortPlainObjectKey = util.sortPlainObjectKey;
	var isEmptyObject = util.isEmptyObject;
	var isPlainObject = util.isPlainObject;
	var dummyPromise = util.dummyPromise;
	var isString = util.isString;

	var NULL = null;
	var EMPTY = '';
	var TRUE = true;
	var FALSE = !TRUE;

	// 全局默认配置
	var defaultGlobalConfig = {

	    // 默认参数
	    data: {},

	    // 请求完成钩子函数
	    didFetch: noop,

	    // 预处理回调
	    fit: noop,

	    // 自定义header, 只针对非跨域的ajax有效, 跨域时将忽略自定义header
	    header: {},

	    // 是否忽律接口自身的并发请求
	    ignoreSelfConcurrent: FALSE,

	    // 有两种格式配置`jsonp`的值
	    // {Boolean}
	    // {Array} eg: [TRUE, 'cb', 'j{id}']
	    jsonp: FALSE,

	    // 是否开启log信息
	    log: FALSE,

	    // 非GET方式对JSONP无效
	    method: 'GET',

	    // 是否开启mock模式
	    mock: FALSE,

	    mockUrl: EMPTY,

	    // 全局`mockUrl`前缀
	    mockUrlPrefix: EMPTY,

	    // 成功回调
	    process: noop,

	    // 私有Promise对象, 如果不想用浏览器原生的Promise对象的话
	    Promise: hasWindow ? window.Promise : NULL,

	    // 默认不执行重试
	    retry: 0,

	    // 使用已有的request方法
	    customRequest: NULL,

	    // 0表示不启动超时处理
	    timeout: 0,

	    // http://zeptojs.com/#$.param
	    traditional: FALSE,

	    url: EMPTY,

	    // 全局`url`前缀
	    urlPrefix: EMPTY,

	    // 是否在`url`上添加时间戳, 用于避免浏览器的304缓存
	    urlStamp: TRUE,

	    // TODO 文档中没有暴露
	    withCredentials: NULL,

	    // 请求之前调用的钩子函数
	    willFetch: noop,

	    // 扩展: storage
	    storage: false,

	    // 插件
	    // 目前只支持两种插件
	    // plugins: [
	    //     nattyFetch.plugin.loop
	    //     nattyFetch.plugin.soon
	    // ]
	    plugins: false
	};

	var runtimeGlobalConfig = extend({}, defaultGlobalConfig);

	var API = (function () {
	    function API(path, options, contextConfig, contextId) {
	        _classCallCheck(this, API);

	        var t = this;
	        t.contextConfig = contextConfig;
	        t._path = path;

	        var config = t.config = t.processAPIOptions(options);

	        /**
	         * 一个`DB`的`api`的实现
	         * @param data {Object|Function}
	         * @returns {Object} Promise Object
	         */
	        t.api = function (data) {
	            data = data || {};
	            // 是否忽略自身的并发请求
	            if (config.ignoreSelfConcurrent && t.api.pending) {
	                return dummyPromise;
	            }

	            if (config.overrideSelfConcurrent && t.api._requester) {
	                t.api._requester.abort();
	            }

	            var vars = t.makeVars(data);

	            if (config.retry === 0) {
	                return t.request(vars, config);
	            } else {
	                return t.tryRequest(vars, config);
	            }
	        };

	        t.api.contextId = contextId;
	        t.api._path = path;

	        // 标记是否正在等待请求返回
	        t.api.pending = FALSE;
	        t.api._requester = NULL;

	        // 取消响应
	        t.api.abort = function () {
	            if (t.api.pending && t.api._requester) {
	                t.api._requester.abort();
	            }
	        };

	        t.api.config = config;

	        t.initStorage();

	        // 启动插件
	        var plugins = isArray(config.plugins) ? config.plugins : [];
	        for (var i = 0, l = plugins.length; i < l; i++) {
	            isFunction(plugins[i]) && plugins[i].call(t, t);
	        }
	    }

	    /**
	     * 关键词
	     *     语意化的
	     *     优雅的
	     *     功能增强的
	     *     底层隔离的
	     */

	    _createClass(API, [{
	        key: 'makeVars',
	        value: function makeVars(data) {
	            var t = this;
	            var config = t.config;

	            // 一次请求的私有相关数据
	            var vars = {
	                mark: {
	                    __api: t._path
	                }
	            };

	            if (config.mock) {
	                vars.mark.__mock = TRUE;
	            }

	            if (config.urlStamp) {
	                vars.mark.__stamp = +new Date();
	            }

	            // `data`必须在请求发生时实时创建
	            data = extend({}, config.data, runAsFn(data));

	            // 将数据参数存在私有标记中, 方便API的`process`方法内部使用
	            vars.data = data;

	            return vars;
	        }

	        /**
	         * 处理API的配置
	         * @param options {Object}
	         */
	    }, {
	        key: 'processAPIOptions',
	        value: function processAPIOptions(options) {

	            var t = this;

	            // 插件是不能覆盖的, 应该追加
	            var plugins = [].concat(t.contextConfig.plugins || [], options.plugins || []);

	            var config = extend({}, t.contextConfig, options, {
	                plugins: plugins
	            });

	            if (config.mock) {
	                config.mockUrl = t.getFullUrl(config);
	            }

	            config.url = t.getFullUrl(config);

	            // 按照[boolean, callbackKeyWord, callbackFunctionName]格式处理
	            if (isArray(options.jsonp)) {
	                config.jsonp = isBoolean(options.jsonp[0]) ? options.jsonp[0] : FALSE;
	                // 这个参数只用于jsonp
	                if (config.jsonp) {
	                    config.jsonpFlag = options.jsonp[1];
	                    config.jsonpCallbackName = options.jsonp[2];
	                }
	            }

	            // 配置自动增强 如果`url`的值有`.jsonp`结尾 则认为是`jsonp`请求
	            // NOTE jsonp是描述正式接口的 不影响mock接口!!!
	            if (!config.mock && !!config.url.match(/\.jsonp(\?.*)?$/)) {
	                config.jsonp = TRUE;
	            }

	            return config;
	        }
	    }, {
	        key: 'initStorage',
	        value: function initStorage() {
	            var t = this;
	            var config = t.config;

	            // 开启`storage`的前提条件
	            var storagePrecondition = config.method === 'GET' || config.jsonp;

	            // 不满足`storage`使用条件的情况下, 开启`storage`将抛出错误
	            if (!storagePrecondition && config.storage === TRUE) {
	                throw new Error('A `' + config.method + '` request CAN NOT use `storage` which is only for `GET/jsonp`' + ' request! Please check the options for `' + t._path + '`');
	            }

	            // 简易开启缓存的写法
	            if (config.storage === TRUE) {
	                config.storage = {
	                    type: 'variable'
	                };
	            }

	            // 决定什么情况下缓存可以开启
	            t.api.storageUseable = isPlainObject(config.storage) && (config.method === 'GET' || config.jsonp) && nattyStorage.support[config.storage.type];
	            // 创建缓存实例
	            if (t.api.storageUseable) {
	                // 当使用`localStorage`时, 强制指定`key`值。如果没指定, 抛错!
	                // 当使用`variable`或`sessionStorage`时, 如果没指定`key`, 则自动生成内部`key`
	                // !!!为什么在使用`localStorage`时必须指定`key`值???
	                // !!!因为当key发生变化时, `localStorage`很容易产生死数据, 必须强制开发者有意识的去维护`key`值
	                if (config.storage.type === 'localStorage') {
	                    if (!config.storage.hasOwnProperty('key') || !config.storage.key) {
	                        throw new Error('`key` is required when `storage.type` is `localStorage`.');
	                    }
	                } else {
	                    config.storage.key = config.storage.key || [t.api.contextId, t._path].join('_');
	                }

	                // `key`和`tag`的选择原则:
	                // `key`只选用相对稳定的值, 减少因为`key`的改变而增加的残留缓存
	                // 经常变化的值用于`tag`, 如一个接口在开发过程中可能使用方式不一样, 会在`jsonp`和`get`之间切换。
	                t.api.storage = nattyStorage(extend({}, config.storage, {
	                    async: TRUE,
	                    tag: [config.storage.tag, config.jsonp ? 'jsonp' : config.method, config.url].join('_') // 使用者的`tag`和内部的`tag`, 要同时生效
	                }));
	            }
	        }

	        /**
	         * 请求数据(从storage或者从网络)
	         * @param vars {Object} 发送的数据
	         * @param config {Object} 已经处理完善的请求配置
	         * @returns {Object} defer对象
	         */
	    }, {
	        key: 'request',
	        value: function request(vars, config) {
	            var t = this;

	            if (t.api.storageUseable) {

	                // 只有GET和JSONP才会有storage生效
	                vars.queryString = isEmptyObject(vars.data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(vars.data));

	                return t.api.storage.has(vars.queryString).then(function (data) {
	                    // alert(JSON.stringify(data, null, 4) + JSON.stringify(sessionStorage, null, 4));
	                    // console.warn('has cached: ', hasValue);
	                    if (data.has) {
	                        return data.value;
	                    } else {
	                        return t.remoteRequest(vars, config);
	                    }
	                });
	            } else {
	                return t.remoteRequest(vars, config);
	            }
	        }

	        /**
	         * 获取正式接口的完整`url`
	         * @param config {Object}
	         */
	    }, {
	        key: 'getFullUrl',
	        value: function getFullUrl(config) {
	            var url = config.mock ? config.mockUrl : config.url;
	            if (!url) return EMPTY;
	            var prefixKey = config.mock ? 'mockUrlPrefix' : 'urlPrefix';
	            return config[prefixKey] && !isAbsoluteUrl(url) && !isRelativeUrl(url) ? config[prefixKey] + url : url;
	        }

	        /**
	         * 发起网络请求
	         * @param vars
	         * @param config
	         * @returns {Promise}
	         */
	    }, {
	        key: 'remoteRequest',
	        value: function remoteRequest(vars, config) {
	            var t = this;

	            // 调用 willFetch 钩子
	            config.willFetch(vars, config, 'remote');

	            // 等待状态在此处开启 在相应的`requester`的`complete`回调中关闭
	            t.api.pending = TRUE;

	            var defer = new Defer(config.Promise);

	            // 创建请求实例requester
	            if (config.customRequest) {
	                // 使用已有的request方法
	                t.api._requester = config.customRequest(vars, config, defer);
	            } else if (config.jsonp) {
	                t.api._requester = t.sendJSONP(vars, config, defer);
	            } else {
	                t.api._requester = t.sendAjax(vars, config, defer);
	            }

	            // 超时处理
	            if (0 !== config.timeout) {
	                setTimeout(function () {
	                    if (t.api.pending && t.api._requester) {
	                        // 取消请求
	                        t.api._requester.abort();

	                        var error = {
	                            timeout: TRUE,
	                            message: 'Timeout By ' + config.timeout + 'ms.'
	                        };
	                        defer.reject(error);
	                        event.fire('g.reject', [error, config]);
	                        event.fire(t.api.contextId + '.reject', [error, config]);
	                    }
	                }, config.timeout);
	            }

	            return defer.promise;
	        }

	        /**
	         * 重试功能的实现
	         * @param vars {Object} 发送的数据
	         * @param config
	         * @returns {Object} defer对象
	         */
	    }, {
	        key: 'tryRequest',
	        value: function tryRequest(vars, config) {
	            var t = this;

	            return new config.Promise(function (resolve, reject) {
	                var retryTime = 0;
	                var request = function request() {
	                    // 更新的重试次数
	                    vars.mark.__retryTime = retryTime;
	                    t.request(vars, config).then(function (content) {
	                        resolve(content);
	                        event.fire('g.resolve', [content, config], config);
	                        event.fire(t.api.contextId + '.resolve', [content, config], config);
	                    }, function (error) {
	                        if (retryTime === config.retry) {
	                            reject(error);
	                        } else {
	                            retryTime++;
	                            request();
	                        }
	                    });
	                };

	                request();
	            });
	        }

	        /**
	         * 处理结构化的响应数据
	         * @param config
	         * @param response
	         * @param defer
	         */
	    }, {
	        key: 'processResponse',
	        value: function processResponse(vars, config, defer, response) {
	            var t = this;

	            // 调用 didFetch 钩子函数
	            config.didFetch(vars, config);

	            // 非标准格式数据的预处理
	            response = config.fit(response, vars);

	            if (response.success) {
	                (function () {
	                    // 数据处理
	                    var content = config.process(response.content, vars);

	                    var resolveDefer = function resolveDefer() {
	                        defer.resolve(content);
	                        event.fire('g.resolve', [content, config], config);
	                        event.fire(t.api.contextId + '.resolve', [content, config], config);
	                    };

	                    if (t.api.storageUseable) {
	                        t.api.storage.set(vars.queryString, content).then(function () {
	                            resolveDefer();
	                        })['catch'](function (e) {
	                            resolveDefer();
	                        });
	                    } else {
	                        resolveDefer();
	                    }
	                })();
	            } else {
	                var error = extend({
	                    message: '`success` is false, ' + t._path
	                }, response.error);
	                // NOTE response是只读的对象!!!
	                defer.reject(error);
	                event.fire('g.reject', [error, config]);
	                event.fire(t.api.contextId + '.reject', [error, config]);
	            }
	        }

	        /**
	         * 发起Ajax请求
	         * @param config {Object} 请求配置
	         * @param defer {Object} defer对象
	         * @param retryTime {undefined|Number} 如果没有重试 将是undefined值 见`createAPI`方法
	         *                                     如果有重试 将是重试的当前次数 见`tryRequest`方法
	         * @returns {Object} xhr对象实例
	         */
	    }, {
	        key: 'sendAjax',
	        value: function sendAjax(vars, config, defer) {
	            var t = this;

	            return ajax({
	                traditional: config.traditional,
	                cache: config.cache,
	                mark: vars.mark,
	                log: config.log,
	                url: config.mock ? config.mockUrl : config.url,
	                method: config.method,
	                data: vars.data,
	                header: config.header,
	                withCredentials: config.withCredentials,
	                // 强制约定json
	                accept: 'json',
	                success: function success(response /*, xhr*/) {
	                    t.processResponse(vars, config, defer, response);
	                },
	                error: function error(status /*, xhr*/) {

	                    var message = undefined;
	                    var flag = undefined;
	                    switch (status) {
	                        case 404:
	                            message = 'Not Found';
	                            break;
	                        case 500:
	                            message = 'Internal Server Error';
	                            break;
	                        // TODO 是否要补充其他明确的服务端错误
	                        default:
	                            message = 'Unknown Server Error';
	                            break;
	                    }

	                    var error = {
	                        status: status,
	                        message: message + ': ' + vars.mark.__api
	                    };

	                    defer.reject(error);
	                    event.fire('g.reject', [error, config]);
	                    event.fire(t.api.contextId + '.reject', [error, config]);
	                },
	                complete: function complete() /*status, xhr*/{
	                    if (vars.retryTime === undefined || vars.retryTime === config.retry) {
	                        //C.log('ajax complete');

	                        t.api.pending = FALSE;
	                        t.api._requester = NULL;
	                    }
	                    //console.log('__complete: pending:', config.pending, 'retryTime:', retryTime, Math.random());
	                }
	            });
	        }

	        /**
	         * 发起jsonp请求
	         * @param vars {Object} 一次请求相关的私有数据
	         * @param config {Object} 请求配置
	         * @param defer {Object} defer对象
	         * @param retryTime {undefined|Number} 如果没有重试 将是undefined值 见`createAPI`方法
	         *                                     如果有重试 将是重试的当前次数 见`tryRequest`方法
	         * @returns {Object} 带有abort方法的对象
	         */
	    }, {
	        key: 'sendJSONP',
	        value: function sendJSONP(vars, config, defer) {
	            var t = this;
	            return jsonp({
	                traditional: config.traditional,
	                log: config.log,
	                mark: vars.mark,
	                url: config.mock ? config.mockUrl : config.url,
	                data: vars.data,
	                cache: config.cache,
	                flag: config.jsonpFlag,
	                callbackName: config.jsonpCallbackName,
	                success: function success(response) {
	                    t.processResponse(vars, config, defer, response);
	                },
	                error: function error() {
	                    var error = {
	                        message: 'Not Accessable JSONP: ' + vars.mark.__api
	                        // TODO show url
	                    };

	                    defer.reject(error);
	                    event.fire('g.reject', [error, config]);
	                    event.fire(t.api.contextId + '.reject', [error, config]);
	                },
	                complete: function complete() {
	                    if (vars.retryTime === undefined || vars.retryTime === config.retry) {
	                        t.api.pending = FALSE;
	                        t.api._requester = NULL;
	                    }
	                }
	            });
	        }
	    }]);

	    return API;
	})();

	var context = (function () {
	    var count = 0;

	    return function (contextId, options) {

	        if (isString(contextId)) {
	            options = options || {};
	        } else {
	            options = contextId || {};
	            contextId = 'c' + count++;
	        }

	        var storage = nattyStorage({
	            type: 'variable',
	            key: contextId
	        });

	        var ctx = {};

	        ctx.api = storage.get();

	        ctx._contextId = contextId;

	        // 插件是不能覆盖的, 应该追加
	        var plugins = [].concat(runtimeGlobalConfig.plugins || [], options.plugins || []);

	        ctx._config = extend({}, runtimeGlobalConfig, options, {
	            plugins: plugins
	        });

	        /**
	         * 创建api
	         * @param namespace {String} optional
	         * @param APIs {Object} 该`namespace`下的`api`配置
	         */
	        ctx.create = function (namespace, APIs) {
	            var hasNamespace = arguments.length === 2 && isString(namespace);

	            if (!hasNamespace) {
	                APIs = namespace;
	            }

	            for (var path in APIs) {
	                storage.set(hasNamespace ? namespace + '.' + path : path, new API(hasNamespace ? namespace + '.' + path : path, runAsFn(APIs[path]), ctx._config, contextId).api);
	            }

	            ctx.api = storage.get();
	        };

	        // 绑定上下文事件
	        ctx.on = function (name, fn) {
	            if (!isFunction(fn)) return;
	            event.on(ctx._contextId + '.' + name, fn);
	            return ctx;
	        };

	        return ctx;
	    };
	})();

	var VERSION = undefined;
	(VERSION = "2.1.3");

	var ONLY_FOR_MODERN_BROWSER = undefined;
	(ONLY_FOR_MODERN_BROWSER = false);

	/**
	 * 简易接口
	 * @param options
	 */
	var nattyFetch = {};

	nattyFetch.create = function (options) {
	    return new API('nattyFetch', runAsFn(options), defaultGlobalConfig, 'global').api;
	};

	extend(nattyFetch, {
	    onlyForModern: ONLY_FOR_MODERN_BROWSER,
	    version: VERSION,
	    // Context,
	    _util: util,
	    _event: event,
	    context: context,
	    ajax: ajax,
	    jsonp: jsonp,

	    /**
	     * 执行全局配置
	     * @param options
	     */
	    setGlobal: function setGlobal(options) {
	        runtimeGlobalConfig = extend({}, defaultGlobalConfig, options);
	        return this;
	    },

	    /**
	     * 获取全局配置
	     * @param property {String} optional
	     * @returns {*}
	     */
	    getGlobal: function getGlobal(property) {
	        return property ? runtimeGlobalConfig[property] : runtimeGlobalConfig;
	    },

	    // 绑定全局事件
	    on: function on(name, fn) {
	        if (!isFunction(fn)) return;
	        event.on('g.' + name, fn);
	        return this;
	    },

	    /**
	     * 插件名称空间
	     */
	    plugin: {
	        loop: pluginLoop,
	        soon: pluginSoon
	    }
	});

	// 内部直接将运行时的全局配置初始化到默认值
	nattyFetch.setGlobal(defaultGlobalConfig);

	module.exports = nattyFetch;

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {


	/**
	 * file: ajax.pc.js
	 * ref https://xhr.spec.whatwg.org
	 * ref https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
	 * ref https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
	 * ref https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	 * ref https://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
	 * ref http://www.html5rocks.com/en/tutorials/cors/
	 * @link http://enable-cors.org/index.html
	 */
	'use strict';

	var _require = __webpack_require__(4);

	var extend = _require.extend;
	var appendQueryString = _require.appendQueryString;
	var noop = _require.noop;
	var isCrossDomain = _require.isCrossDomain;
	var isBoolean = _require.isBoolean;
	var param = _require.param;
	var isIE = _require.isIE;

	var hasWindow = 'undefined' !== typeof window;
	var doc = hasWindow ? document : null;
	var FALSE = false;
	var UNDEFINED = 'undefined';
	var NULL = null;
	var GET = 'GET';
	var SCRIPT = 'script';
	var XML = 'xml';
	var HTML = 'html';
	var TEXT = 'text';
	var JS0N = 'json'; // NOTE 不能使用`JSON`，这里用数字零`0`代替了字母`O`

	var APPLICATION_JSON = 'application/json';
	var TEXT_HTML = 'text/html';

	var xhrTester = UNDEFINED !== typeof XMLHttpRequest ? new XMLHttpRequest() : {};
	var hasXDR = UNDEFINED !== typeof XDomainRequest;
	var fallback = hasWindow ? !('withCredentials' in xhrTester) && hasXDR : null;
	var supportCORS = hasWindow ? 'withCredentials' in xhrTester || hasXDR : null;

	// minetype的简写映射
	// TODO 考虑是否优化
	var acceptToRequestHeader = {
	    // IIS returns `application/x-javascript` 但应该不需要支持
	    '*': '*/' + '*',
	    script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript',
	    json: 'application/json, text/json',
	    xml: 'application/xml, text/xml',
	    html: 'text/html',
	    text: 'text/plain'
	};

	// 设置请求头
	// 没有处理的事情：跨域时使用者传入的多余的Header没有屏蔽 没必要
	var setHeaders = function setHeaders(xhr, options) {
	    if (!xhr.setRequestHeader) {
	        return;
	    }

	    var header = {
	        Accept: acceptToRequestHeader[options.accept]
	    };

	    // 如果没有跨域 则打该标识 业界通用做法
	    // TODO 如果是跨域的 只有有限的requestHeader是可以使用的 待补充注释
	    if (!isCrossDomain(options.url)) {
	        header['X-Requested-With'] = 'XMLHttpRequest';
	    }

	    extend(header, options.header);

	    // 如果是`POST`请求，需要`urlencode`
	    if (options.method === 'POST' && !options.header['Content-Type']) {
	        header['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
	    }

	    for (var key in header) {
	        xhr.setRequestHeader(key, header[key]);
	    }
	};

	// 绑定事件
	var setEvents = function setEvents(xhr, options, isCrossDomain) {

	    var completeFn = function completeFn() {
	        if (xhr.__completed) {
	            return;
	        }
	        xhr.__completed = true;
	        //options.log && console.info('~loadend');
	        options.complete();
	        xhr.__aborted = null;
	        delete xhr.__aborted;
	    };

	    var onLoadFn = function onLoadFn() {

	        var data = xhr.responseText;

	        switch (options.accept) {
	            case JS0N:
	                try {
	                    data = JSON.parse(data);
	                } catch (e) {
	                    console.warn('The response can NOT be parsed to JSON object.', data);
	                }
	                break;
	            case SCRIPT:
	                (1, eval)(data);
	                break;
	            case XML:
	                data = xhr.responseXML;
	                break;
	            //case HTML:
	            //case TEXT:
	            default:
	                break;
	        }
	        options.success(data, xhr);
	        //C.log('complete after load');
	        completeFn();
	    };

	    var onErrorFn = function onErrorFn() {
	        options.error(xhr.status, xhr);
	        //C.log('complete after error');
	        completeFn();
	    };

	    var abortFn = function abortFn() {

	        if (xhr.__completed) {
	            return;
	        }
	        options.log && console.info('~abort');
	        options.abort();
	        //C.log('complete after abort');
	        completeFn();
	    };

	    // 如果是IE8/9 且 如果是跨域请求
	    if (fallback && isCrossDomain) {

	        // `XDomainRequest`实例是没有`onreadystatechange`方法的!!!
	        xhr.onload = onLoadFn;
	    } else {
	        // readyState value:
	        //   0: UNSET 未初始化
	        //   1: OPENED
	        //   2: HEADERS_RECEIVED
	        //   3: LOADING
	        //   4: DONE 此时触发load事件
	        xhr.onreadystatechange = function () {

	            if (xhr.__completed) {
	                return;
	            }
	            //console.log('xhr.readyState', xhr.readyState, 'xhr.status', xhr.status, xhr);
	            if (xhr.readyState == 4) {

	                // 如果请求被取消(aborted) 则`xhr.status`会是0 所以不会进入`success`回调
	                if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
	                    onLoadFn();
	                } else {
	                    // 如果请求被取消(aborted) 则`xhr.status`会是0 程序也会到达这里 需要排除 不应该触发error
	                    !xhr.__aborted && onErrorFn();
	                }
	            }
	        };
	    }

	    xhr.onerror = onErrorFn;

	    // 重写`abort`方法
	    var originAbort = xhr.abort;
	    xhr.abort = function () {
	        xhr.__aborted = true;
	        // NOTE 直接调用`originAbort()`时 浏览器会报 `Illegal invocation` 错误

	        // 非IE浏览器才会真正的调用原生`abort`
	        if (!isIE) {
	            originAbort.call(xhr);
	        }
	        // `XDomainRequest`对象实例居然没有`onabort`方法
	        abortFn();
	    };

	    // IE9 bug
	    xhr.onprogress = xhr.ontimeout = noop;
	};

	var defaultOptions = {
	    url: '',
	    mark: {},
	    method: GET,
	    accept: TEXT,
	    data: null,
	    header: {},
	    withCredentials: NULL, // 根据`url`是否跨域决定默认值. 如果显式配置该值(必须是布尔值), 则个使用配置值
	    cache: true,
	    success: noop,
	    error: noop,
	    complete: noop,
	    abort: noop,
	    log: FALSE,
	    traditional: FALSE
	};

	var ajax = function ajax(options) {

	    options = extend({}, defaultOptions, options);

	    // 是否跨域
	    var isCD = isCrossDomain(options.url);

	    // 如果跨域了, 则禁止发送自定义的`header`信息
	    if (isCD) {
	        // 重置`header`, 统一浏览器的行为.
	        // 如果在跨域时发送了自定义`header`, 则:
	        //   标准浏览器会报错: Request header field xxx is not allowed by Access-Control-Allow-Headers in preflight response.
	        //   IE浏览器不报错
	        options.header = {};
	    }

	    // H5版本
	    // `IE10+`和标准浏览器的`XMLHttpRequest`都原生支持跨域
	    var xhr = new XMLHttpRequest();

	    // `IE8/9`使用`XDomainRequest`来实现跨域, `IE10+`的`XMLHttpRequest`对象直接支持跨域
	    if (fallback && isCD) {
	        // NOTE `XDomainRequest`仅支持`GET`和`POST`两个方法
	        // 支持的事件有: onerror, onload, onprogress, ontimeout, 注意没有`onloadend`
	        // https://developer.mozilla.org/zh-CN/docs/Web/API/XDomainRequest
	        xhr = new XDomainRequest();
	    }

	    // 再高级的浏览器都有低级错误! 已经不能在相信了!
	    // MAC OSX Yosemite Safari上的低级错误: 一次`ajax`请求的`loadend`事件完成之后,
	    // 如果执行`xhr.abort()`, 居然还能触发一遍`abort`和`loadend`事件!!!
	    // `__completed`标识一次完整的请求是否结束, 如果已结束, 则不再触发任何事件
	    xhr.__completed = FALSE;

	    setEvents(xhr, options, isCD);

	    xhr.open(options.method, appendQueryString(options.url, extend({}, options.mark, options.method === GET ? options.data : {}), options.cache, options.traditional));

	    // NOTE 生产环境的Server端, `Access-Control-Allow-Origin`的值一定不要配置成`*`!!! 而且`Access-Control-Allow-Credentials`应该是true!!!
	    // NOTE 如果Server端的`responseHeader`配置了`Access-Control-Allow-Origin`的值是通配符`*` 则前端`withCredentials`是不能使用true值的
	    // NOTE 如果Client端`withCredentials`使用了true值 则后端`responseHeader`中必须配置`Access-Control-Allow-Credentials`是true
	    if (!fallback) {
	        xhr.withCredentials = isBoolean(options.withCredentials) ? options.withCredentials : isCD;
	    }

	    // 设置requestHeader
	    setHeaders(xhr, options);

	    // 文档建议说 send方法如果不发送请求体数据 则null参数在某些浏览器上是必须的

	    xhr.send(options.method === GET ? NULL : options.data !== NULL ? param(options.data, options.traditional) : NULL);

	    return xhr;
	};

	ajax.fallback = fallback;
	ajax.supportCORS = supportCORS;

	module.exports = ajax;

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hasWindow = 'undefined' !== typeof window;
	var doc = hasWindow ? document : null;
	var escape = encodeURIComponent;
	var NULL = null;
	var toString = Object.prototype.toString;
	var ARRAY_TYPE = '[object Array]';
	var OBJECT_TYPE = '[object Object]';
	var TRUE = true;
	var FALSE = !TRUE;

	/**
	 * 伪造的`promise`对象
	 * NOTE 伪造的promise对象要支持链式调用 保证和`new Promise`返回的对象行为一致
	 *      dummyPromise.then().catch().finally()
	 */
	var dummyPromise = {
	    dummy: TRUE
	};
	dummyPromise.then = dummyPromise['catch'] = function () {
	    // NOTE 这里用了剪头函数 不能用`return this`
	    return dummyPromise;
	};

	/**
	 * 判断是否是IE8~11, 不包含Edge
	 * @returns {boolean}
	 * @note IE11下 window.ActiveXObject的值很怪异, 所以需要追加 'ActiveXObject' in window 来判断
	 */
	var isIE = hasWindow && (!!window.ActiveXObject || 'ActiveXObject' in window);

	var noop = function noop(v) {
	    return v;
	};

	/**
	 * 变换两个参数的函数到多个参数
	 * @param  {Function} fn 基函数
	 * @return {Function} 变换后的函数
	 * @demo
	 *      function add(x, y) { return x+y; }
	 *      add = redo(add);
	 *      add(1,2,3) => 6
	 */
	var redo = function redo(fn) {
	    return function () {
	        var args = arguments;
	        var ret = fn(args[0], args[1]);
	        for (var i = 2, l = args.length; i < l; i++) {
	            ret = fn(ret, args[i]);
	        }
	        return ret;
	    };
	};

	var random = Math.random;
	var floor = Math.floor;
	var makeRandom = function makeRandom() {
	    return floor(random() * 9e9);
	};

	var absoluteUrlReg = /^(https?:)?\/\//;
	var isAbsoluteUrl = function isAbsoluteUrl(url) {
	    return !!url.match(absoluteUrlReg);
	};

	var relativeUrlReg = /^[\.\/]/;
	var isRelativeUrl = function isRelativeUrl(url) {
	    return !!url.match(relativeUrlReg);
	};

	var BOOLEAN = 'boolean';
	var isBoolean = function isBoolean(v) {
	    return typeof v === BOOLEAN;
	};

	var STRING = 'string';
	var isString = function isString(v) {
	    return typeof v === STRING;
	};

	var FUNCTION = 'function';
	var isFunction = function isFunction(v) {
	    return typeof v === FUNCTION;
	};

	var runAsFn = function runAsFn(v) {
	    return isFunction(v) ? v() : v;
	};

	var NUMBER = 'number';
	var isNumber = function isNumber(v) {
	    return !isNaN(v) && typeof v === NUMBER;
	};

	var OBJECT = 'object';
	var isObject = function isObject(v) {
	    return typeof v === OBJECT && v !== NULL;
	};

	var isWindow = function isWindow(v) {
	    return v !== NULL && v === v.window;
	};

	// 参考了zepto
	var isPlainObject = function isPlainObject(v) {
	    return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype;
	};

	var isEmptyObject = function isEmptyObject(v) {
	    var count = 0;
	    for (var i in v) {
	        if (v.hasOwnProperty(i)) {
	            count++;
	        }
	    }
	    return count === 0;
	};

	var isArray = Array.isArray;
	if (true) {
	    if (!isArray) {
	        isArray = function (v) {
	            return toString.call(v) === ARRAY_TYPE;
	        };
	    }
	}

	/**
	 * 判断是否跨域
	 * @type {Element}
	 * @note 需要特别关注IE8~11的行为是不一样的!!!
	 */
	var originA = undefined;
	if (doc) {
	    originA = doc.createElement('a');
	    originA.href = location.href;
	}
	var isCrossDomain = function isCrossDomain(url) {

	    var requestA = doc.createElement('a');
	    requestA.href = url;
	    //console.log(originA.protocol + '//' + originA.host + '\n' + requestA.protocol + '//' + requestA.host);

	    // 如果`url`的值不包含`protocol`和`host`(比如相对路径), 在标准浏览器下, 会自定补全`requestA`对象的`protocal`和`host`属性.
	    // 但在IE8~11下, 不会自动补全. 即`requestA.protocol`和`requestA.host`的值都是空的.
	    // 在IE11的不同小版本下, requestA.protocol的值有的是`:`, 有的是空字符串, 太奇葩啦!
	    if (true) {
	        if (isIE && (requestA.protocol === ':' || requestA.protocol === '')) {
	            if (requestA.hostname === '') {
	                //alert(0)
	                return false;
	            } else {
	                //alert('1:'+(originA.hostname !== requestA.hostname || originA.port !== requestA.port))
	                return originA.hostname !== requestA.hostname || originA.port !== requestA.port;
	            }
	        }
	    }

	    //let log = {
	    //    'originA.hostname': originA.hostname,
	    //    'requestA.hostname': requestA.hostname,
	    //    'originA.port': originA.port,
	    //    'requestA.port': requestA.port,
	    //    'originA.protocol': originA.protocol,
	    //    'requestA.protocol': requestA.protocol
	    //}
	    //
	    //alert(JSON.stringify(log));

	    // 标准浏览器
	    return originA.hostname !== requestA.hostname || originA.port !== requestA.port || originA.protocol !== requestA.protocol;
	};

	/**
	 * 对象扩展
	 * @param  {Object} receiver
	 * @param  {Object} supplier
	 * @return {Object} 扩展后的receiver对象
	 * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!
	 * @note 这个extend方法是深拷贝方式的!!!
	 * TODO
	 */
	var extend = function extend() {
	    var receiver = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var supplier = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var deepCopy = arguments.length <= 2 || arguments[2] === undefined ? FALSE : arguments[2];

	    for (var key in supplier) {
	        // `supplier`中不是未定义的键 都可以执行扩展
	        if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {
	            if (deepCopy === TRUE) {
	                if (isArray(supplier[key])) {
	                    receiver[key] = [].concat(supplier[key]);
	                } else if (isPlainObject(supplier[key])) {
	                    receiver[key] = extend({}, supplier[key]);
	                } else {
	                    receiver[key] = supplier[key];
	                }
	            } else {
	                receiver[key] = supplier[key];
	            }
	        }
	    }
	    return receiver;
	};

	var likeArray = function likeArray(v) {
	    if (!v) {
	        return false;
	    }
	    return typeof v.length === NUMBER;
	};

	/**
	 *
	 * @param v {Array|Object} 遍历目标对象
	 * @param fn {Function} 遍历器 会被传入两个参数, 分别是`value`和`key`
	 */
	var each = function each(v, fn) {
	    var i = undefined,
	        l = undefined;
	    if (likeArray(v)) {
	        for (i = 0, l = v.length; i < l; i++) {
	            if (fn.call(v[i], v[i], i) === false) return;
	        }
	    } else {
	        for (i in v) {
	            if (fn.call(v[i], v[i], i) === false) return;
	        }
	    }
	};

	/**
	 * 将对象的`键`排序后 返回一个新对象
	 *
	 * @param obj {Object} 被操作的对象
	 * @returns {Object} 返回的新对象
	 * @case 这个函数用于对比两次请求的参数是否一致
	 */
	var sortPlainObjectKey = function sortPlainObjectKey(obj) {
	    var clone = {};
	    var key = undefined;
	    var keyArray = [];
	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            keyArray.push(key);
	            if (isPlainObject(obj[key])) {
	                obj[key] = sortPlainObjectKey(obj[key]);
	            }
	        }
	    }
	    keyArray.sort();
	    for (var i = 0, l = keyArray.length; i < l; i++) {
	        clone[keyArray[i]] = obj[keyArray[i]];
	    }
	    return clone;
	};

	var serialize = function serialize(params, obj, traditional, scope) {
	    var type = undefined,
	        array = isArray(obj),
	        hash = isPlainObject(obj);
	    each(obj, function (value, key) {
	        type = toString.call(value);
	        if (scope) {
	            key = traditional ? scope : scope + '[' + (hash || type == OBJECT_TYPE || type == ARRAY_TYPE ? key : '') + ']';
	        }

	        // 递归
	        if (!scope && array) {
	            params.add(value.name, value.value);
	        }
	        // recurse into nested objects
	        else if (type == ARRAY_TYPE || !traditional && type == OBJECT_TYPE) {
	                serialize(params, value, traditional, key);
	            } else {
	                params.add(key, value);
	            }
	    });
	};

	/**
	 * 功能和`Zepto.param`一样
	 * @param obj {Object}
	 * @param traditional {Boolean}
	 * @returns {string}
	 * $.param({ foo: { one: 1, two: 2 }}) // "foo[one]=1&foo[two]=2)"
	 * $.param({ ids: [1,2,3] })           // "ids[]=1&ids[]=2&ids[]=3"
	 * $.param({ ids: [1,2,3] }, true)     // "ids=1&ids=2&ids=3"
	 * $.param({ foo: 'bar', nested: { will: 'not be ignored' }})    // "foo=bar&nested[will]=not+be+ignored"
	 * $.param({ foo: 'bar', nested: { will: 'be ignored' }}, true)  // "foo=bar&nested=[object+Object]"
	 * $.param({ id: function(){ return 1 + 2 } })  // "id=3"
	 */
	var param = function param(obj, traditional) {
	    var params = [];
	    params.add = function (key, value) {
	        if (isFunction(value)) value = value();
	        if (value == NULL) value = '';
	        params.push(escape(key) + '=' + escape(value));
	    };
	    serialize(params, obj, traditional);
	    return params.join('&').replace(/%20/g, '+');
	};

	var decodeParam = function decodeParam(str) {
	    return decodeURIComponent(str.replace(/\+/g, ' '));
	};

	// 给URL追加查询字符串
	var appendQueryString = function appendQueryString(url, obj, traditional) {
	    var queryString = param(obj, traditional);

	    if (queryString) {
	        return url + (~url.indexOf('?') ? '&' : '?') + queryString;
	    } else {
	        return url;
	    }
	};

	module.exports = {
	    appendQueryString: appendQueryString,
	    decodeParam: decodeParam,
	    dummyPromise: dummyPromise,
	    each: each,
	    extend: redo(extend),
	    isAbsoluteUrl: isAbsoluteUrl,
	    isArray: isArray,
	    isBoolean: isBoolean,
	    isCrossDomain: isCrossDomain,
	    isEmptyObject: isEmptyObject,
	    isFunction: isFunction,
	    isIE: isIE,
	    isNumber: isNumber,
	    isPlainObject: isPlainObject,
	    isRelativeUrl: isRelativeUrl,
	    isString: isString,
	    makeRandom: makeRandom,
	    noop: noop,
	    sortPlainObjectKey: sortPlainObjectKey,
	    param: param,
	    runAsFn: runAsFn
	};

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _require = __webpack_require__(4);

	var appendQueryString = _require.appendQueryString;
	var noop = _require.noop;
	var extend = _require.extend;
	var makeRandom = _require.makeRandom;

	var hasWindow = 'undefined' !== typeof window;
	var win = hasWindow ? window : null;
	var doc = hasWindow ? document : null;
	var NULL = null;
	var SCRIPT = 'script';
	var FALSE = false;
	var IE8 = hasWindow ? navigator.userAgent.indexOf('MSIE 8.0') > -1 : false;
	// TODO add test spec
	var removeScript = function removeScript(script) {
	    if (IE8 && script.readyState) {
	        script.onreadystatechange = NULL;
	    } else {
	        script.onerror = NULL;
	    }
	    script.parentNode.removeChild(script);
	    script = NULL;
	};
	var head = NULL;
	var insertScript = function insertScript(url, options) {
	    var script = doc.createElement(SCRIPT);
	    script.type = 'text/javascript';
	    script.src = url;
	    script.async = true;

	    // 绑定`error`事件
	    if (IE8 && script.readyState) {
	        script.onreadystatechange = function () {
	            // IE8下script标签不支持`onerror`事件, 通过JSONP的执行顺序来模拟触发:
	            // 1:   script.readyState状态值为`loading`
	            // 2.1: 如果脚本加载成功, 浏览器就会先执行脚本内容, 即调用JSONP函数, 如: `jsonp2327905726()`,
	            //      (该函数执行之后会立即被设置成`null`值, 用于第3步的判断), JSONP函数执行完成后, 会进入第3步.
	            // 2.2: 如果脚本加载不成功, 也会进入第3步.
	            // 3:   无论脚本是否加载成功, `script.readyState`状态值都变化为`loaded`,
	            //      如果加载不成功, 可以通过判断JSONP函数一定是存在, 即可模拟`error`回调了.
	            if (script.readyState === 'loaded' && win[options.callbackName]) {
	                win[options.callbackName] = NULL;
	                options.error();
	                options.complete();
	            }
	        };
	    } else {
	        script.onerror = function (e) {
	            win[options.callbackName] = NULL;
	            options.error(e);
	            options.complete();
	        };
	    }

	    head = head || doc.getElementsByTagName('head')[0];
	    head.insertBefore(script, head.firstChild);
	    return script;
	};

	var defaultOptions = {
	    url: '',
	    mark: {},
	    data: {},
	    cache: true,
	    success: noop,
	    error: noop,
	    complete: noop,
	    log: false,
	    flag: 'callback',
	    callbackName: 'jsonp{id}',
	    traditional: FALSE
	};

	var jsonp = function jsonp(options) {

	    options = extend({}, defaultOptions, options);

	    var callbackName = options.callbackName = options.callbackName.replace(/\{id\}/, makeRandom());

	    var originComplete = options.complete;

	    var script = undefined;

	    // 二次包装的`complete`回调
	    options.complete = function () {
	        // 删除脚本
	        removeScript(script);
	        originComplete();
	    };

	    // 成功回调
	    win[callbackName] = function (data) {
	        // JSONP函数需要立即删除 用于`IE8`判断是否触发`onerror`
	        win[callbackName] = NULL;
	        options.success(data);
	        options.complete();
	    };

	    // 生成`url`
	    var url = appendQueryString(options.url, extend(_defineProperty({}, options.flag, callbackName), options.mark, options.data), options.cache, options.traditional);

	    // 插入脚本
	    script = insertScript(url, options);

	    return {
	        abort: function abort() {
	            // 覆盖成功回调为无数据处理版本
	            win[callbackName] = function () {
	                win[callbackName] = NULL;
	            };
	            removeScript(script);
	        }
	    };
	};

	module.exports = jsonp;

	/***/ },
	/* 6 */
	/***/ function(module, exports) {

	"use strict";

	function Defer(Promise) {
	  var t = this;
	  t.promise = new Promise(function (resolve, reject) {
	    t._resolve = resolve;
	    t._reject = reject;
	  });
	}
	Defer.prototype.resolve = function (value) {
	  this._resolve.call(this.promise, value);
	};
	Defer.prototype.reject = function (reason) {
	  this._reject.call(this.promise, reason);
	};
	module.exports = Defer;

	/***/ },
	/* 7 */
	/***/ function(module, exports) {

	'use strict';

	var pre = '__';

	var Event = {
	    on: function on() {
	        var t = this;
	        var args = arguments;
	        if (typeof args[0] === 'string' && typeof args[1] === 'function') {
	            var type = rename(args[0]);
	            t[type] = t[type] || [];
	            t[type].push(args[1]);
	        } else if (typeof args[0] === 'object') {
	            var hash = args[0];
	            for (var i in hash) {
	                t.on(i, hash[i]);
	            }
	        }
	    },
	    off: function off(type, fn) {
	        var t = this;
	        var type = rename(type);
	        if (!fn) {
	            delete t[type];
	        } else {
	            var fns = t[type];
	            fns.splice(fns.indexOf(fn), 1);
	            if (!t[type].length) delete t[type];
	        }
	    },
	    // @param {array} args
	    fire: function fire(type, args, context) {
	        var t = this;
	        var fns = t[rename(type)];
	        if (!fns) return 'NO_EVENT';
	        for (var i = 0, fn; fn = fns[i]; i++) {
	            fn.apply(context || t, [].concat(args));
	        }
	    },
	    hasEvent: function hasEvent(type) {
	        return !!this[rename(type)];
	    }
	};

	function rename(type) {
	    return pre + type;
	}

	module.exports = Event;

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

	/**
	 * 创建轮询支持
	 * @param api {Function} 需要轮询的函数
	 */
	'use strict';

	var FALSE = false;
	var TRUE = true;
	var NULL = null;

	var _require = __webpack_require__(4);

	var isNumber = _require.isNumber;
	var noop = _require.noop;

	/**
	 * 创建轮询支持
	 * @param api {Function} 需要轮询的函数
	 */
	module.exports = function (apiInstance) {
	    var api = apiInstance.api;
	    api.loop = function (options) {
	        var resolveFn = arguments.length <= 1 || arguments[1] === undefined ? noop : arguments[1];
	        var rejectFn = arguments.length <= 2 || arguments[2] === undefined ? noop : arguments[2];

	        if (!options.duration || !isNumber(options.duration)) {
	            throw new Error('Illegal `duration` value for `startLoop` method.');
	            return;
	        }

	        var loopTimer = NULL;

	        var stop = function stop() {
	            clearTimeout(loopTimer);
	            loopTimer = NULL;
	            stop.looping = FALSE;
	        };

	        var sleepAndRequest = function sleepAndRequest() {
	            stop.looping = TRUE;
	            loopTimer = setTimeout(function () {
	                api(options.data).then(resolveFn, rejectFn);
	                sleepAndRequest();
	            }, options.duration);
	        };

	        // NOTE 轮询过程中是不响应服务器端错误的 所以第二个参数是`noop`
	        api(options.data).then(resolveFn, rejectFn);
	        sleepAndRequest();

	        return stop;
	    };
	};

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FALSE = false;
	var TRUE = true;

	var _require = __webpack_require__(4);

	var noop = _require.noop;
	var isEmptyObject = _require.isEmptyObject;
	var sortPlainObjectKey = _require.sortPlainObjectKey;

	module.exports = function (apiInstance) {
	    var t = this;
	    var api = apiInstance.api;
	    var config = api.config;

	    api.soon = function (data) {
	        var successFn = arguments.length <= 1 || arguments[1] === undefined ? noop : arguments[1];
	        var errorFn = arguments.length <= 2 || arguments[2] === undefined ? noop : arguments[2];

	        // 是否忽略自身的并发请求
	        // NOTE 这个地方和内置的api方法不一致
	        if (config.ignoreSelfConcurrent && config.pending) {
	            return;
	        }

	        if (config.overrideSelfConcurrent && config._lastRequester) {
	            config._lastRequester.abort();
	            delete config._lastRequester;
	        }

	        // 一次请求的私有相关数据
	        var vars = t.makeVars(data);

	        var remoteRequest = function remoteRequest() {
	            t.remoteRequest(vars, config).then(function (content) {
	                successFn({
	                    fromStorage: FALSE,
	                    content: content
	                });
	            })['catch'](function (e) {
	                errorFn(e);
	            });
	        };

	        if (api.storageUseable) {

	            // 只有GET和JSONP才会有storage生效
	            vars.queryString = isEmptyObject(vars.data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(vars.data));

	            api.storage.has(vars.queryString).then(function (result) {

	                // console.warn('has cached: ', hasValue);
	                if (result.has) {
	                    successFn({
	                        fromStorage: TRUE,
	                        content: result.value
	                    });
	                }

	                // 在`storage`可用的情况下, 远程请求返回的数据会同步到`storage`
	                remoteRequest();
	            });
	        } else {
	            remoteRequest();
	        }
	    };
	};

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("nattyStorage", [], factory);
		else if(typeof exports === 'object')
			exports["nattyStorage"] = factory();
		else
			root["nattyStorage"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(1);

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _require = __webpack_require__(2);

	var extend = _require.extend;
	var isPlainObject = _require.isPlainObject;
	var isObject = _require.isObject;
	var noop = _require.noop;

	var VERSION = undefined;
	(VERSION = "1.1.2");

	var NULL = null;
	var EMPTY = '';
	var TRUE = true;
	var FALSE = !TRUE;
	var PLACEHOLDER = '_placeholder';
	var UNDEFINED = undefined;

	// 只是判断有没有`storage`对象, 注意, 有了也不一定能用!!! 比如隐身模式
	var has = {
	    localStorage: typeof localStorage === 'object',
	    sessionStorage: typeof sessionStorage === 'object'
	};

	// 真正判断能不能用
	var support = {
	    localStorage: test('localStorage'),
	    sessionStorage: test('sessionStorage'),
	    variable: TRUE
	};

	// 能力测试
	function test(type) {
	    if (!has[type]) {
	        return FALSE;
	    }
	    var data = { 'x': 'x' };
	    var key = 'natty-storage-test';
	    var tester = createStorage(type);
	    try {
	        tester.set(key, data);
	        var useable = JSON.stringify(tester.get(key)) === JSON.stringify(data);
	        tester.remove(key);
	        return useable;
	    } catch (e) {
	        return false;
	    }
	}

	// 全局默认配置
	var defaultGlobalConfig = {
	    // localStorage, sessionStorage, variable
	    type: 'localStorage',

	    // 存到浏览器缓存中使用的键
	    key: EMPTY,

	    // 版本号
	    tag: EMPTY,

	    // 有效期长, 单位ms
	    duration: 0,

	    // 有效期至, 时间戳
	    until: 0,

	    // 是否以异步方式使用set/get/has/remove
	    async: false
	};

	/**
	 *  let ls = new nattyStorage({
	 *     type: 'localstorage', // sessionstorage, variable
	 *       key: 'city',
	 *       // 验证是否有效，如果是首次创建该LS，则不执行验证
	 *       tag: '1.0'
	 *  })
	 */

	var Storage = (function () {
	    /**
	     * 构造函数
	     * @param options
	     */

	    function Storage() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	        _classCallCheck(this, Storage);

	        var t = this;

	        t.config = extend({}, defaultGlobalConfig, options);

	        // 必须配置`key`!!! 无论什么类型!!!
	        if (!t.config.key) {
	            throw new Error('`key` is required when using natty-storage!');
	        }

	        t._storage = t.config.type !== 'variable' && support[t.config.type] ? createStorage(t.config.type) : createVariable();

	        t._CHECK_KEY = 'nattyStorageCheck:' + t.config.key;
	        t._DATA_KEY = 'nattyStorageData:' + t.config.key;
	        t._placeholderUsed = FALSE;

	        // 每个`storage`实例对象都是全新的, 只有`storage`实例的数据才可能是缓存的.
	        t._createStamp = +new Date();
	    }

	    /**
	     * 惰性初始化 在首次调用`set、get、remove`方法时才执行一次 且只执行一次
	     * @private
	     * @note 为什么要做惰性初始化, 因为
	     */

	    _createClass(Storage, [{
	        key: '_lazyInit',
	        value: function _lazyInit() {
	            var t = this;

	            t._checkData = t._storage.get(t._CHECK_KEY);

	            // 当前`key`的`storage`是否已经存在
	            t._isNew = t._checkData === NULL;
	            // console.log('is new t._checkData', t._isNew);

	            // 没有对应的本地缓存 或 本地缓存已过期 则 创建新的`storage`实例
	            if (t._isNew || t.isOutdated()) {
	                // console.log('create new t._checkData');
	                // 新的数据内容
	                t._storage.set(t._DATA_KEY, t._data = {});
	            }
	            // 使用已有的本地缓存
	            else {
	                    // console.log('use cached t._checkData');
	                    t._data = t._storage.get(t._DATA_KEY);
	                    if (t._data === NULL) {
	                        t._storage.set(t._DATA_KEY, t._data = {});
	                    }
	                }

	            // 更新验证数据
	            t._storage.set(t._CHECK_KEY, t._checkData = {
	                tag: t.config.tag,
	                lastUpdate: t._createStamp,
	                duration: t.config.duration,
	                until: t.config.until
	            });
	        }

	        /**
	         * 判断当前`key`的`storage`是否已经过期
	         * @returns {boolean}
	         */
	    }, {
	        key: 'isOutdated',
	        value: function isOutdated() {
	            var t = this;
	            if (t.config.tag && t.config.tag !== t._checkData.tag) {
	                return TRUE;
	            }

	            var now = +new Date();
	            // 注意要使用`_checkData`的`duration`验证, 而不是用`config`的`duration`验证!!
	            if (t._checkData.duration && now - t._checkData.lastUpdate > t._checkData.duration) {
	                return TRUE;
	            }

	            if (t._checkData.until && now > t._checkData.until) {
	                return TRUE;
	            }

	            // console.log('outdated: false');
	            return FALSE;
	        }

	        /**
	         * 设置指指定路径的数据
	         * @param path {Any} optional 要设置的值的路径 或 要设置的完整值
	         * @param value {Any} 值
	         *
	         * instance.set(object)
	         * instance.set('foo', any-type)
	         * instance.set('foo.bar', any-type)
	         * @note ls.set('x') 则 整个值为 'x'
	         */
	    }, {
	        key: 'set',
	        value: function set(path, data) {

	            var t = this;
	            var argumentLength = arguments.length;

	            var todo = function todo(resolve, reject) {
	                try {
	                    if (!t._data) {
	                        t._lazyInit();
	                    }

	                    if (argumentLength === 1) {
	                        if (isPlainObject(path)) {
	                            t._data = path;
	                        } else {
	                            t._data[PLACEHOLDER] = path;
	                            t._placeholderUsed = TRUE;
	                        }
	                    } else {
	                        setValueByPath(path, data, t._data);
	                    }

	                    t._storage.set(t._DATA_KEY, t._data);
	                    resolve();
	                } catch (e) {
	                    reject(e);
	                }
	            };

	            if (t.config.async) {
	                return new Promise(todo);
	            } else {
	                todo(noop, throwError);
	            }
	        }

	        /**
	         * 获取指定的路径的数据
	         * @param path {String} optional 要获取的值的路径 如果不传 则返回整体值
	         * @returns {ny}
	         *
	         * instance.get()
	         * instance.get('foo')
	         * instance.get('foo.bar')
	         */
	    }, {
	        key: 'get',
	        value: function get(path) {
	            var t = this;
	            var data = undefined;
	            var todo = function todo(resolve, reject) {
	                try {
	                    if (!t._data) {
	                        t._lazyInit();
	                    }

	                    if (path) {
	                        data = getValueByPath(path, t._data);
	                    } else if (t._placeholderUsed) {
	                        data = t._data[PLACEHOLDER];
	                    } else {
	                        data = t._data;
	                    }
	                    resolve(data);
	                } catch (e) {
	                    reject(e);
	                }
	            };

	            if (t.config.async) {
	                return new Promise(todo);
	            } else {
	                todo(noop, throwError);
	                return data;
	            }
	        }

	        /**
	         * 返回指定的路径是否有值
	         * @param path {String} optional 要查询的路径
	         * @returns {Promise}
	         */
	    }, {
	        key: 'has',
	        value: function has(path) {
	            var t = this;
	            var result = undefined;
	            var todo = function todo(resolve, reject) {
	                try {
	                    if (!t._data) {
	                        t._lazyInit();
	                    }

	                    // 如果有数据 且 没有使用内置`placeholder`, 说明是使用`path`方式设置的值
	                    if (!t._placeholderUsed && !isEmptyPlainObject(t._data)) {
	                        if (!path) {
	                            throw new Error('a `path` argument should be passed into the `has` method');
	                        }

	                        result = hasValueByPath(path, t._data) ? {
	                            has: true,
	                            value: getValueByPath(path, t._data)
	                        } : {};

	                        resolve(result);
	                    } else {
	                        result = t._data.hasOwnProperty(PLACEHOLDER) ? {
	                            has: true,
	                            value: t._data[PLACEHOLDER]
	                        } : {};
	                        resolve(result);
	                    }
	                } catch (e) {
	                    reject(e);
	                }
	            };

	            if (t.config.async) {
	                return new Promise(todo);
	            } else {
	                todo(noop, throwError);
	                return result;
	            }
	        }

	        /**
	         * 删除指定的路径的数据, 包括键本身
	         * @param path {String} optional 要获取的值的路径 如果不传 则返回整体值
	         */
	    }, {
	        key: 'remove',
	        value: function remove(path) {
	            var t = this;
	            var todo = function todo(resolve, reject) {
	                try {
	                    if (!t._data) {
	                        t._lazyInit();
	                    }
	                    if (path) {
	                        removeKeyAndValueByPath(path, t._data);
	                        t._storage.set(t._DATA_KEY, t._data);
	                    } else {
	                        // 删除所有数据, 复原到初始空对象
	                        t.set({});
	                    }
	                    resolve();
	                } catch (e) {
	                    reject(e);
	                }
	            };

	            if (t.config.async) {
	                return new Promise(todo);
	            } else {
	                todo(noop, throwError);
	            }
	        }

	        /**
	         * 销毁当前`storage`实例
	         */
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            var t = this;
	            t._storage.remove(t._CHECK_KEY);
	            t._storage.remove(t._DATA_KEY);
	        }
	    }, {
	        key: 'dump',
	        value: function dump() {
	            var t = this;
	            if (!t._data) {
	                t._lazyInit();
	            }

	            if (JSON && console) {
	                console.log(JSON.stringify(this._data, NULL, 4));
	            }
	        }
	    }]);

	    return Storage;
	})();

	function throwError(e) {
	    throw new Error(e);
	}

	function createStorage(storage) {
	    //  不用担心这个window, 这个函数能调用, 说明已经是在浏览器端了
	    storage = window[storage];
	    // storage = storage === 'localStorage' ? localStorage : sessionStorage;
	    return {
	        // NOTE  值为undefined的情况, JSON.stringify方法会将键删除
	        // JSON.stringify({x:undefined}) === "{}"
	        set: function set(key, value) {
	            // TODO 看看safari是否还有bug
	            // storage.removeItem(key);
	            storage.setItem(key, JSON.stringify(value));
	        },
	        get: function get(key) {
	            var value = storage.getItem(key);
	            // alert(localStorage[key]);
	            if (!value) return NULL;
	            try {
	                value = JSON.parse(value);
	            } catch (e) {}
	            return value;
	        },
	        remove: function remove(key) {
	            storage.removeItem(key);
	        }
	    };
	}

	var variable = {};
	function createVariable() {
	    var storage = variable;
	    return {
	        set: function set(key, value) {
	            storage[key] = value;
	        },
	        get: function get(key) {
	            // 当对应的键不存在时, 返回值保持和`storage`一致。
	            if (!(key in storage)) {
	                return NULL;
	            }
	            return storage[key];
	        },
	        remove: function remove(key) {
	            delete storage[key];
	        }
	    };
	}

	function reserveString(str) {
	    return str.split(EMPTY).reverse().join(EMPTY);
	}

	function splitPathToKeys(path) {
	    var ret;
	    if (path.indexOf('\\.') === -1) {
	        ret = path.split('.');
	    } else {
	        ret = reserveString(path).split(/\.(?!\\)/).reverse();
	        for (var i = 0, l = ret.length; i < l; i++) {
	            ret[i] = reserveString(ret[i].replace(/\.\\/g, '.'));
	        }
	    }
	    return ret;
	}

	function setValueByPath(path, value, data) {
	    var keys = splitPathToKeys(path);
	    var bottomData = data;
	    while (keys.length) {
	        var key = keys.shift();
	        if (keys.length) {
	            bottomData[key] = bottomData[key] || {};
	            bottomData = bottomData[key];
	        } else {
	            if (isPlainObject(bottomData)) {
	                bottomData[key] = value;
	            } else {
	                throw new Error('Cannot create property `' + key + '` on non-object value, path:`' + path + '`');
	            }
	        }
	    }
	    return data;
	}

	function getValueByPath(path, data, isKey) {
	    isKey = isKey || false;
	    if (isKey === true || path.indexOf('.') === -1) {
	        return data[path];
	    } else {
	        var keys = splitPathToKeys(path);

	        while (keys.length) {
	            var key = keys.shift();
	            data = getValueByPath(key, data, true);

	            if (typeof data !== 'object' || data === UNDEFINED) {
	                if (keys.length) data = UNDEFINED;
	                break;
	            }
	        }
	        return data;
	    }
	}

	function hasValueByPath(path, data, isKey) {
	    // 首次调用, 如果没有`.`, 就是key的含义
	    isKey = isKey || path.indexOf('.') === -1;
	    if (isKey) {
	        return data.hasOwnProperty(path);
	    } else {
	        var keys = splitPathToKeys(path);
	        while (keys.length) {
	            var key = keys.shift();
	            // console.log('check key: ', key);
	            var hasKey = data.hasOwnProperty(key);
	            if (hasKey && keys.length) {
	                data = getValueByPath(key, data, true);
	                if (!isPlainObject(data)) {
	                    return FALSE;
	                }
	            } else {
	                return hasKey;
	            }
	        }
	    }
	}

	function removeKeyAndValueByPath(path, data) {
	    var keys = splitPathToKeys(path);
	    var bottomData = data;
	    while (keys.length) {
	        var key = keys.shift();
	        if (keys.length) {
	            bottomData[key] = bottomData[key] || {};
	            bottomData = bottomData[key];
	        } else {
	            delete bottomData[key];
	        }
	    }
	    return data;
	}

	function isEmptyPlainObject(v) {
	    var ret = TRUE;
	    for (var i in v) {
	        ret = FALSE;
	        break;
	    }
	    return ret;
	}

	var nattyStorage = function nattyStorage(options) {
	    return new Storage(options);
	};

	nattyStorage.version = VERSION;
	nattyStorage._variable = variable;
	nattyStorage.support = support;

	module.exports = nattyStorage;

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var NULL = null;

	/**
	 * 变换两个参数的函数到多个参数
	 * @param  {Function} fn 基函数
	 * @return {Function} 变换后的函数
	 * @demo
	 *      function add(x, y) { return x+y; }
	 *      add = redo(add);
	 *      add(1,2,3) => 6
	 */
	var redo = function redo(fn) {
		return function () {
			var args = arguments;
			var ret = fn(args[0], args[1]);
			for (var i = 2, l = args.length; i < l; i++) {
				ret = fn(ret, args[i]);
			}
			return ret;
		};
	};

	var OBJECT = 'object';
	var isObject = function isObject(v) {
		return typeof v === OBJECT && v !== NULL;
	};

	var isWindow = function isWindow(v) {
		return v !== NULL && v === v.window;
	};

	// 参考了zepto
	var isPlainObject = function isPlainObject(v) {
		return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype;
	};

	var isArray = Array.isArray;
	if (false) {
		if (!isArray) {
			isArray = function (v) {
				return toString.call(v) === ARRAY_TYPE;
			};
		}
	}

	/**
	 * 对象扩展
	 * @param  {Object} receiver
	 * @param  {Object} supplier
	 * @return {Object} 扩展后的receiver对象
	 * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!
	 */
	var extend = function extend() {
		var receiver = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		var supplier = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

		for (var key in supplier) {
			// `supplier`中不是未定义的键 都可以执行扩展
			if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {
				if (isArray(supplier[key])) {
					receiver[key] = [].concat(supplier[key]);
				} else if (isPlainObject(supplier[key])) {
					receiver[key] = extend({}, supplier[key]);
				} else {
					receiver[key] = supplier[key];
				}
			}
		}
		return receiver;
	};

	var noop = function noop() {};

	module.exports = {
		extend: redo(extend),
		noop: noop,
		isPlainObject: isPlainObject
	};

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var immediate = __webpack_require__(288);

	/* istanbul ignore next */
	function INTERNAL() {}

	var handlers = {};

	var REJECTED = ['REJECTED'];
	var FULFILLED = ['FULFILLED'];
	var PENDING = ['PENDING'];

	module.exports = Promise;

	function Promise(resolver) {
	  if (typeof resolver !== 'function') {
	    throw new TypeError('resolver must be a function');
	  }
	  this.state = PENDING;
	  this.queue = [];
	  this.outcome = void 0;
	  if (resolver !== INTERNAL) {
	    safelyResolveThenable(this, resolver);
	  }
	}

	Promise.prototype["catch"] = function (onRejected) {
	  return this.then(null, onRejected);
	};
	Promise.prototype.then = function (onFulfilled, onRejected) {
	  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
	    typeof onRejected !== 'function' && this.state === REJECTED) {
	    return this;
	  }
	  var promise = new this.constructor(INTERNAL);
	  if (this.state !== PENDING) {
	    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
	    unwrap(promise, resolver, this.outcome);
	  } else {
	    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
	  }

	  return promise;
	};
	function QueueItem(promise, onFulfilled, onRejected) {
	  this.promise = promise;
	  if (typeof onFulfilled === 'function') {
	    this.onFulfilled = onFulfilled;
	    this.callFulfilled = this.otherCallFulfilled;
	  }
	  if (typeof onRejected === 'function') {
	    this.onRejected = onRejected;
	    this.callRejected = this.otherCallRejected;
	  }
	}
	QueueItem.prototype.callFulfilled = function (value) {
	  handlers.resolve(this.promise, value);
	};
	QueueItem.prototype.otherCallFulfilled = function (value) {
	  unwrap(this.promise, this.onFulfilled, value);
	};
	QueueItem.prototype.callRejected = function (value) {
	  handlers.reject(this.promise, value);
	};
	QueueItem.prototype.otherCallRejected = function (value) {
	  unwrap(this.promise, this.onRejected, value);
	};

	function unwrap(promise, func, value) {
	  immediate(function () {
	    var returnValue;
	    try {
	      returnValue = func(value);
	    } catch (e) {
	      return handlers.reject(promise, e);
	    }
	    if (returnValue === promise) {
	      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
	    } else {
	      handlers.resolve(promise, returnValue);
	    }
	  });
	}

	handlers.resolve = function (self, value) {
	  var result = tryCatch(getThen, value);
	  if (result.status === 'error') {
	    return handlers.reject(self, result.value);
	  }
	  var thenable = result.value;

	  if (thenable) {
	    safelyResolveThenable(self, thenable);
	  } else {
	    self.state = FULFILLED;
	    self.outcome = value;
	    var i = -1;
	    var len = self.queue.length;
	    while (++i < len) {
	      self.queue[i].callFulfilled(value);
	    }
	  }
	  return self;
	};
	handlers.reject = function (self, error) {
	  self.state = REJECTED;
	  self.outcome = error;
	  var i = -1;
	  var len = self.queue.length;
	  while (++i < len) {
	    self.queue[i].callRejected(error);
	  }
	  return self;
	};

	function getThen(obj) {
	  // Make sure we only access the accessor once as required by the spec
	  var then = obj && obj.then;
	  if (obj && typeof obj === 'object' && typeof then === 'function') {
	    return function appyThen() {
	      then.apply(obj, arguments);
	    };
	  }
	}

	function safelyResolveThenable(self, thenable) {
	  // Either fulfill, reject or reject with error
	  var called = false;
	  function onError(value) {
	    if (called) {
	      return;
	    }
	    called = true;
	    handlers.reject(self, value);
	  }

	  function onSuccess(value) {
	    if (called) {
	      return;
	    }
	    called = true;
	    handlers.resolve(self, value);
	  }

	  function tryToUnwrap() {
	    thenable(onSuccess, onError);
	  }

	  var result = tryCatch(tryToUnwrap);
	  if (result.status === 'error') {
	    onError(result.value);
	  }
	}

	function tryCatch(func, value) {
	  var out = {};
	  try {
	    out.value = func(value);
	    out.status = 'success';
	  } catch (e) {
	    out.status = 'error';
	    out.value = e;
	  }
	  return out;
	}

	Promise.resolve = resolve;
	function resolve(value) {
	  if (value instanceof this) {
	    return value;
	  }
	  return handlers.resolve(new this(INTERNAL), value);
	}

	Promise.reject = reject;
	function reject(reason) {
	  var promise = new this(INTERNAL);
	  return handlers.reject(promise, reason);
	}

	Promise.all = all;
	function all(iterable) {
	  var self = this;
	  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	    return this.reject(new TypeError('must be an array'));
	  }

	  var len = iterable.length;
	  var called = false;
	  if (!len) {
	    return this.resolve([]);
	  }

	  var values = new Array(len);
	  var resolved = 0;
	  var i = -1;
	  var promise = new this(INTERNAL);

	  while (++i < len) {
	    allResolver(iterable[i], i);
	  }
	  return promise;
	  function allResolver(value, i) {
	    self.resolve(value).then(resolveFromAll, function (error) {
	      if (!called) {
	        called = true;
	        handlers.reject(promise, error);
	      }
	    });
	    function resolveFromAll(outValue) {
	      values[i] = outValue;
	      if (++resolved === len && !called) {
	        called = true;
	        handlers.resolve(promise, values);
	      }
	    }
	  }
	}

	Promise.race = race;
	function race(iterable) {
	  var self = this;
	  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	    return this.reject(new TypeError('must be an array'));
	  }

	  var len = iterable.length;
	  var called = false;
	  if (!len) {
	    return this.resolve([]);
	  }

	  var i = -1;
	  var promise = new this(INTERNAL);

	  while (++i < len) {
	    resolver(iterable[i]);
	  }
	  return promise;
	  function resolver(value) {
	    self.resolve(value).then(function (response) {
	      if (!called) {
	        called = true;
	        handlers.resolve(promise, response);
	      }
	    }, function (error) {
	      if (!called) {
	        called = true;
	        handlers.reject(promise, error);
	      }
	    });
	  }
	}


/***/ },
/* 288 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	var Mutation = global.MutationObserver || global.WebKitMutationObserver;

	var scheduleDrain;

	{
	  if (Mutation) {
	    var called = 0;
	    var observer = new Mutation(nextTick);
	    var element = global.document.createTextNode('');
	    observer.observe(element, {
	      characterData: true
	    });
	    scheduleDrain = function () {
	      element.data = (called = ++called % 2);
	    };
	  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
	    var channel = new global.MessageChannel();
	    channel.port1.onmessage = nextTick;
	    scheduleDrain = function () {
	      channel.port2.postMessage(0);
	    };
	  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
	    scheduleDrain = function () {

	      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	      var scriptEl = global.document.createElement('script');
	      scriptEl.onreadystatechange = function () {
	        nextTick();

	        scriptEl.onreadystatechange = null;
	        scriptEl.parentNode.removeChild(scriptEl);
	        scriptEl = null;
	      };
	      global.document.documentElement.appendChild(scriptEl);
	    };
	  } else {
	    scheduleDrain = function () {
	      setTimeout(nextTick, 0);
	    };
	  }
	}

	var draining;
	var queue = [];
	//named nextTick for less confusing stack traces
	function nextTick() {
	  draining = true;
	  var i, oldQueue;
	  var len = queue.length;
	  while (len) {
	    oldQueue = queue;
	    queue = [];
	    i = -1;
	    while (++i < len) {
	      oldQueue[i]();
	    }
	    len = queue.length;
	  }
	  draining = false;
	}

	module.exports = immediate;
	function immediate(task) {
	  if (queue.push(task) === 1 && !draining) {
	    scheduleDrain();
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/**
	 * @author: zhouquan.yezq
	 * @time : 8/12 2015
	 */

	var classnames = __webpack_require__(5);
	var React = __webpack_require__(7);

	var Mask = function Mask(props) {
	  var _classnames;

	  var visible = props.visible,
	      text = props.text;

	  var className = classnames((_classnames = {}, _defineProperty(_classnames, props.prefixCls, true), _defineProperty(_classnames, props.prefixCls + '-hide', !visible), _classnames));
	  return React.createElement(
	    'div',
	    { className: className },
	    React.createElement(
	      'div',
	      { className: props.prefixCls + '-centerblk' },
	      React.createElement('span', { className: 'kuma-loading' }),
	      React.createElement(
	        'span',
	        { className: props.prefixCls + '-text' },
	        text
	      )
	    )
	  );
	};

	Mask.propTypes = {
	  prefixCls: React.PropTypes.string,
	  visible: React.PropTypes.bool,
	  text: React.PropTypes.string
	};

	Mask.defaultProps = {
	  prefixCls: 'kuma-uxmask',
	  text: '加载中'
	};

	exports["default"] = Mask;
	module.exports = exports['default'];

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _uxcoreFormatter = __webpack_require__(291);

	var _uxcoreFormatter2 = _interopRequireDefault(_uxcoreFormatter);

	var _cloneDeep = __webpack_require__(170);

	var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var mergeData = function mergeData(data, obj) {
	  var newData = (0, _cloneDeep2["default"])(data);
	  // code compatible
	  if (newData.datas) {
	    newData.datas = newData.datas.concat(obj);
	  } else if (newData.data) {
	    newData.data = newData.data.concat(obj);
	  }
	  newData.totalCount += 1;
	  return newData;
	};

	/* eslint-disable no-param-reassign */
	var saveRef = function saveRef(refName, context) {
	  return function (c) {
	    context[refName] = c;
	  };
	};
	/* eslint-enable no-param-reassign */

	// For changeTreeSelected in Table.js
	// will change the first param data, be cautious.
	var changeValueR = function changeValueR(data, key, value) {
	  if (data.data && data.data instanceof Array) {
	    for (var i = 0; i < data.data.length; i++) {
	      var item = data.data[i];
	      item[key] = value;
	      changeValueR(item, key, value);
	    }
	  }
	};

	var hasFixColumn = function hasFixColumn(props) {
	  var columns = props.jsxcolumns.filter(function (item) {
	    if (item.fixed) {
	      return true;
	    }
	    return false;
	  });
	  if (columns.length > 0) {
	    return true;
	  }
	  return false;
	};

	var isRowHalfChecked = function isRowHalfChecked(rowData, checkboxColumnKey) {
	  if (rowData.data) {
	    var isHalfChecked = rowData.data.some(function (item) {
	      if (item[checkboxColumnKey]) {
	        return true;
	      }
	      return isRowHalfChecked(item, checkboxColumnKey);
	    });
	    return isHalfChecked;
	  }
	  return false;
	};

	// depth-first recursion of multi branches tree
	var getAllSelectedRows = function getAllSelectedRows(rowData, checkboxColumnKey) {
	  var selectedRows = [];
	  var stack = [];
	  // put first level data into stack
	  stack.push(rowData);
	  while (stack.length) {
	    var item = stack.shift();
	    if (item[checkboxColumnKey]) {
	      selectedRows.push(item);
	    }
	    if (item.data) {
	      stack = item.data.concat(stack);
	    }
	  }
	  return selectedRows;
	};

	// TODO cache row tree set
	// const getRowTreeSet = (rowData) => {
	//   let stack = [];
	//   // put first level data into stack
	//   stack.push(rowData);
	//   while (stack.length) {
	//     const item = stack.shift();
	//     if (item.data) {
	//       stack = stack.concat(item.data);
	//     }
	//   }
	// };

	var getSelectedKeys = function getSelectedKeys(columns) {
	  var realColumns = [];
	  var selectedKeys = [];
	  columns.forEach(function (item) {
	    var isGroup = {}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object';
	    if (isGroup) {
	      realColumns = realColumns.concat(item.columns);
	    } else {
	      realColumns.push(item);
	    }
	  });
	  realColumns.forEach(function (item) {
	    if (!item.hidden) {
	      selectedKeys.push(item.dataKey);
	    }
	  });
	  return selectedKeys;
	};

	var getConsts = function getConsts() {
	  return {
	    commonGroup: '__common__'
	  };
	};

	var getDefaultExpandedKeys = function getDefaultExpandedKeys(data, levels) {
	  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

	  var expandedKeys = [];
	  if (Array.isArray(data)) {
	    data.forEach(function (item) {
	      if (level <= levels) {
	        expandedKeys.push(item.jsxid);
	        expandedKeys = expandedKeys.concat(getDefaultExpandedKeys(item.data, levels, level + 1));
	      }
	    });
	  }
	  return expandedKeys;
	};

	var utils = {
	  getIEVer: function getIEVer() {
	    if (window) {
	      var ua = window.navigator.userAgent;
	      var idx = ua.indexOf('MSIE');
	      if (idx > 0) {
	        // "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64;
	        // Trident/6.0; SLCC2; .NET CLR 2.0.50727)"
	        return parseInt(ua.substring(idx + 5, ua.indexOf('.', idx)), 10);
	      }
	      if (ua.match(/Trident\/7\./)) {
	        // "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2;
	        // .NET CLR 2.0.50727; rv:11.0) like Gecko"
	        return 11;
	      }
	      return 0;
	    }
	    return 0;
	  },
	  toggleItemInArr: function toggleItemInArr(item, arr) {
	    var idx = arr.indexOf(item);
	    if (idx !== -1) {
	      arr.splice(idx, 1);
	    } else {
	      arr.push(item);
	    }
	    return arr;
	  },
	  formatValue: function formatValue(value, type, delimiter) {
	    var newDelimiter = delimiter || ' ';
	    if (value === null || value === undefined) {
	      return value;
	    }
	    var newValue = value.toString();
	    if (type === 'money') {
	      return _uxcoreFormatter2["default"].money(newValue, newDelimiter);
	    } else if (type === 'card') {
	      return _uxcoreFormatter2["default"].card(newValue, newDelimiter);
	    } else if (type === 'cnmobile') {
	      return _uxcoreFormatter2["default"].cnmobile(newValue, newDelimiter);
	    }
	    return newValue;
	  },
	  getSelectedKeys: getSelectedKeys,
	  changeValueR: changeValueR,
	  isRowHalfChecked: isRowHalfChecked,
	  getAllSelectedRows: getAllSelectedRows,
	  getConsts: getConsts,
	  saveRef: saveRef,
	  mergeData: mergeData,
	  hasFixColumn: hasFixColumn,
	  getDefaultExpandedKeys: getDefaultExpandedKeys
	};

	exports["default"] = utils;
	module.exports = exports['default'];

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Formatter Component for uxcore
	 * @author guanghong.wsj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(292);

/***/ },
/* 292 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Formatter Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Formatter = {};

	Formatter.date = function (str, pattern) {
	    var date = new Date(str);
	    if (Object.prototype.toString.call(date) === "[object Date]") {
	        // it is date

	        if (isNaN(date.getTime())) {
	            // invalid
	            console.warn('Formatter: invalid date');
	            return "";
	        }
	        pattern = pattern || 'YYYY-MM-DD';
	        var o = {
	            "M+": date.getMonth() + 1, //月份
	            "D+": date.getDate(), //日
	            "d+": date.getDate(), //日
	            "H+": date.getHours(), //小时
	            "h+": date.getHours(), //小时
	            "m+": date.getMinutes(), //分
	            "s+": date.getSeconds(), //秒
	            "Q+": Math.floor((date.getMonth() + 3) / 3), //季度
	            "q+": Math.floor((date.getMonth() + 3) / 3), //季度
	            "S": date.getMilliseconds() //毫秒
	        };
	        if (/(y+)/i.test(pattern)) {
	            pattern = pattern.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
	        }
	        for (var k in o) {
	            if (new RegExp("(" + k + ")").test(pattern)) pattern = pattern.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
	        }
	        return pattern;
	    }
	    console.warn('Formatter: invalid date');
	    return "";
	};

	Formatter.money = function (str, delimiter, fixedNum) {
	    delimiter = delimiter || " ";
	    if (fixedNum) {
	        str = parseFloat(str).toFixed(fixedNum).toString();
	    }
	    if (str.indexOf(".") !== -1) {
	        return str.replace(/(\d)(?=(?:\d{3})+(\.))/g, function (match, $1) {
	            return $1 + delimiter;
	        }).replace(/(\d{3})(?![$|\.|\(|\s])/g, function (match, $1) {
	            return $1;
	        });
	    } else {
	        return str.replace(/(\d)(?=(?:\d{3})+$)/g, function (match, $1) {
	            return $1 + delimiter;
	        });
	    }
	};

	Formatter.cnmobile = function (str, delimiter) {
	    delimiter = delimiter || " ";
	    return str.replace(/^(\+?0?86)(?!$)/, "$1" + delimiter).replace(/(\d{4})(?!$)/g, "$1" + delimiter);
	};

	Formatter.card = function (str, delimiter) {
	    delimiter = delimiter || " ";
	    return str.replace(/(\d{4})(?!$)/g, "$1" + delimiter);
	};

	module.exports = Formatter;

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Created by xy on 15/4/13.
	 */
	var CheckBox = __webpack_require__(294);
	var assign = __webpack_require__(6);
	var Const = __webpack_require__(168);
	var Tooltip = __webpack_require__(295);
	var classnames = __webpack_require__(5);
	var React = __webpack_require__(7);

	var Header = function (_React$Component) {
	  _inherits(Header, _React$Component);

	  function Header(props) {
	    _classCallCheck(this, Header);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      pickerDisplay: false
	    };
	    return _this;
	  }

	  Header.prototype.getDomNode = function getDomNode() {
	    return this.root;
	  };

	  Header.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	      return false;
	    };
	  };

	  Header.prototype.handleColumnOrder = function handleColumnOrder(column) {
	    var me = this;
	    var _me$props = me.props,
	        orderColumnCB = _me$props.orderColumnCB,
	        activeColumn = _me$props.activeColumn,
	        orderType = _me$props.orderType;

	    var type = 'desc';
	    var typeMap = {
	      desc: 'asc',
	      asc: 'none',
	      none: 'desc'
	    };
	    if (activeColumn && column.dataKey === activeColumn.dataKey && orderType) {
	      type = typeMap[orderType];
	    }
	    if (orderColumnCB) {
	      orderColumnCB(type, column);
	    }
	  };

	  Header.prototype.handleCheckBoxChange = function handleCheckBoxChange() {
	    var v = this.checkbox.getValue();
	    this.props.selectAll.apply(null, [v]);
	  };

	  Header.prototype.renderOrderIcon = function renderOrderIcon(column) {
	    var me = this;
	    var _me$props2 = me.props,
	        orderType = _me$props2.orderType,
	        activeColumn = _me$props2.activeColumn;

	    if (column.ordered) {
	      var _classnames, _classnames2;

	      var desc = 'triangle-down';
	      var asc = 'triangle-up';
	      var isActive = activeColumn && activeColumn.dataKey === column.dataKey;
	      return React.createElement(
	        'span',
	        { className: 'kuma-uxtable-h-sort', onClick: me.handleColumnOrder.bind(me, column) },
	        React.createElement('i', {
	          className: classnames((_classnames = {}, _defineProperty(_classnames, 'kuma-icon kuma-icon-' + asc, true), _defineProperty(_classnames, 'active', isActive && orderType === 'asc'), _classnames))
	        }),
	        React.createElement('i', {
	          className: classnames((_classnames2 = {}, _defineProperty(_classnames2, 'kuma-icon kuma-icon-' + desc, true), _defineProperty(_classnames2, 'active', isActive && orderType === 'desc'), _classnames2))
	        })
	      );
	    }
	    return null;
	  };

	  Header.prototype.renderMessageIcon = function renderMessageIcon(column) {
	    if (!column.message) {
	      return null;
	    }
	    return React.createElement(
	      Tooltip,
	      {
	        overlay: React.createElement(
	          'div',
	          { className: 'kuma-uxtable-column-message' },
	          column.message
	        ),
	        placement: 'top'
	      },
	      React.createElement('i', { className: 'kuma-icon kuma-icon-information' })
	    );
	  };

	  Header.prototype.renderColumn = function renderColumn(item, index, hasGroup, last) {
	    var me = this;
	    var renderModel = me.props.renderModel;

	    var rowSelectorInTreeMode = ['checkboxSelector', 'radioSelector'].indexOf(item.type) !== -1 && renderModel === 'tree';
	    if (item.hidden || rowSelectorInTreeMode) {
	      me.firstIndex = index + 1;
	      return null;
	    }
	    var noBorderColumn = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
	    var style = {
	      width: item.width ? item.width : 100,
	      textAlign: item.align ? item.align : 'left'
	    };
	    var v = void 0;
	    if (hasGroup) {
	      assign(style, {
	        height: 100,
	        lineHeight: '100px'
	      });
	    }

	    if (item.type === 'checkbox' || item.type === 'checkboxSelector') {
	      assign(style, {
	        paddingRight: 4,
	        paddingLeft: 12,
	        width: item.width ? item.width : 92
	      });

	      var checkBoxProps = {
	        ref: me.saveRef('checkbox'),
	        checked: me.props.isSelectAll,
	        disable: me.props.mode !== Const.MODE.VIEW ? item.disable : true,
	        onChange: me.handleCheckBoxChange.bind(me)
	      };

	      v = React.createElement(CheckBox, checkBoxProps);
	    } else {
	      var content = typeof item.title === 'function' ? item.title() : item.title;
	      var title = typeof item.title === 'function' ? undefined : item.title;
	      v = React.createElement(
	        'span',
	        { title: title },
	        content
	      );
	    }

	    if (noBorderColumn.indexOf(item.dataKey) !== -1 || last) {
	      assign(style, {
	        borderRight: 'none'
	      });
	    }

	    return React.createElement(
	      'div',
	      {
	        key: index,
	        className: classnames({
	          'kuma-uxtable-cell': true,
	          'show-border': me.props.showHeaderBorder
	        }),
	        style: style
	      },
	      me.renderIndent(index),
	      v,
	      me.renderMessageIcon(item),
	      me.renderOrderIcon(item)
	    );
	  };

	  Header.prototype.renderIndent = function renderIndent(index) {
	    if (this.firstIndex !== index) {
	      return null;
	    }
	    var me = this;
	    var _me$props3 = me.props,
	        renderModel = _me$props3.renderModel,
	        checkboxColumnKey = _me$props3.checkboxColumnKey;

	    if (renderModel === 'tree') {
	      return React.createElement('span', {
	        className: classnames({
	          indent: true,
	          hasCheck: checkboxColumnKey
	        })
	      });
	    }
	    return null;
	  };

	  Header.prototype.renderColumns = function renderColumns(_columns) {
	    var me = this;
	    var columns = _columns.map(function (item, index) {
	      var last = index === _columns.length - 1;
	      if ({}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object') {
	        // First determine whether the group should be rendered, if all columns
	        // is hidden, the column group should not be rendered.
	        var shouldRenderGroup = item.columns.some(function (column) {
	          return !column.hidden;
	        });
	        if (shouldRenderGroup) {
	          return React.createElement(
	            'div',
	            { className: 'kuma-uxtable-header-column-group', key: index },
	            React.createElement(
	              'div',
	              { className: 'kuma-uxtable-header-group-name' },
	              item.group
	            ),
	            item.columns.map(function (column, i) {
	              return me.renderColumn(column, i, false, last);
	            })
	          );
	        }
	        return null;
	      }
	      return me.renderColumn(item, index, me.hasGroup, last);
	    });
	    return columns;
	  };

	  Header.prototype.render = function render() {
	    var props = this.props;
	    var me = this;
	    var headerStyle = {};
	    var width = 0;
	    var headerWrapClassName = void 0;
	    var columns = void 0;

	    if (props.fixedColumn === 'fixed') {
	      columns = props.columns.filter(function (item) {
	        if (item.fixed && !item.hidden) {
	          width = parseInt(item.width, 10) + width;
	          return true;
	        }
	        return false;
	      });
	      assign(headerStyle, {
	        width: width,
	        minWidth: width
	      });
	      headerWrapClassName = 'kuma-uxtable-header-fixed';
	    } else if (props.fixedColumn === 'scroll') {
	      columns = props.columns.filter(function (item) {
	        if (!item.fixed) {
	          return true;
	        } else if (!item.hidden) {
	          width = parseInt(item.width, 10) + width;
	        }
	        return false;
	      });
	      assign(headerStyle, {
	        width: typeof props.width === 'number' ? props.width - width - 3 : props.width,
	        minWidth: typeof props.width === 'number' ? props.width - width - 3 : props.width
	      });
	      headerWrapClassName = 'kuma-uxtable-header-scroll';
	    } else {
	      columns = props.columns;
	      headerWrapClassName = 'kuma-uxtable-header-no';
	    }
	    me.hasGroup = false;
	    for (var i = 0; i < columns.length; i++) {
	      if ('group' in columns[i]) {
	        me.hasGroup = true;
	        break;
	      }
	    }
	    var defaultHeaderHeight = me.hasGroup ? 100 : 50;
	    assign(headerStyle, {
	      height: props.headerHeight ? props.headerHeight : defaultHeaderHeight,
	      lineHeight: (props.headerHeight ? props.headerHeight : 50) + 'px'
	    });
	    return React.createElement(
	      'div',
	      { className: headerWrapClassName, style: headerStyle, ref: me.saveRef('root') },
	      React.createElement(
	        'div',
	        { className: props.jsxprefixCls },
	        me.renderColumns(columns)
	      )
	    );
	  };

	  return Header;
	}(React.Component);

	Header.propTypes = {
	  handleColumnPickerChange: React.PropTypes.func,
	  selectAll: React.PropTypes.func
	};

	Header.defaultProps = {
	  jsxprefixCls: 'kuma-uxtable-header'
	};

	module.exports = Header;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * A checkbox field
	 */

	var Const = __webpack_require__(168);
	var React = __webpack_require__(7);
	var classnames = __webpack_require__(5);

	var CheckBox = function (_React$Component) {
	  _inherits(CheckBox, _React$Component);

	  function CheckBox() {
	    _classCallCheck(this, CheckBox);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  CheckBox.prototype.getValue = function getValue() {
	    return this.checkbox.checked;
	  };

	  CheckBox.prototype.handleChange = function handleChange(e) {
	    this.props.onChange(e);
	  };

	  CheckBox.prototype.handleClick = function handleClick() {
	    // simulate checkbox
	    this.props.onChange({
	      target: {
	        checked: true
	      }
	    });
	  };

	  CheckBox.prototype.renderHalfChecked = function renderHalfChecked() {
	    return React.createElement(
	      'span',
	      { className: 'kuma-uxtable-row-selector' },
	      React.createElement('i', { className: 'half-checked', onClick: this.handleClick.bind(this) })
	    );
	  };

	  CheckBox.prototype.renderCheckBox = function renderCheckBox(renderProps) {
	    var _this2 = this;

	    return React.createElement(
	      'label',
	      {
	        className: classnames(_defineProperty({
	          'kuma-uxtable-row-selector': true
	        }, this.props.className, !!this.props.className))
	      },
	      React.createElement('input', _extends({ type: 'checkbox', ref: function ref(c) {
	          _this2.checkbox = c;
	        } }, renderProps)),
	      React.createElement('s', null)
	    );
	  };

	  CheckBox.prototype.render = function render() {
	    var props = this.props;
	    if (props.halfChecked) {
	      return this.renderHalfChecked();
	    }
	    var renderProps = {
	      className: 'kuma-checkbox',
	      checked: this.props.checked,
	      onChange: this.handleChange.bind(this)
	    };
	    if (!!props.disable || props.mode === Const.MODE.VIEW) {
	      renderProps.disabled = true;
	    }
	    return this.renderCheckBox(renderProps);
	  };

	  return CheckBox;
	}(React.Component);

	CheckBox.propTypes = {
	  onChange: React.PropTypes.func,
	  checked: React.PropTypes.bool,
	  className: React.PropTypes.string
	};

	CheckBox.defaultProps = {};

	module.exports = CheckBox;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tooltip Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(296);

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _rcTooltip = __webpack_require__(297);

	var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Tooltip = function (_RcTooltip) {
		_inherits(Tooltip, _RcTooltip);

		function Tooltip(props) {
			_classCallCheck(this, Tooltip);

			return _possibleConstructorReturn(this, _RcTooltip.call(this, props));
		}

		return Tooltip;
	}(_rcTooltip2["default"]);

	exports["default"] = Tooltip;

	Tooltip.displayName = 'uxcore-tooltip';
	Tooltip.propTypes = _rcTooltip2["default"].propTypes;

	Tooltip.defaultProps = (0, _objectAssign2["default"])(_rcTooltip2["default"].defaultProps, {
		prefixCls: 'kuma-tooltip',
		transitionName: 'flip'
	});
	module.exports = exports['default'];

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(298);

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _placements = __webpack_require__(299);

	var _rcTrigger = __webpack_require__(137);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var Tooltip = _react2["default"].createClass({
	  displayName: 'Tooltip',

	  propTypes: {
	    trigger: _react.PropTypes.any,
	    children: _react.PropTypes.any,
	    defaultVisible: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    placement: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string,
	    animation: _react.PropTypes.any,
	    onVisibleChange: _react.PropTypes.func,
	    afterVisibleChange: _react.PropTypes.func,
	    overlay: _react.PropTypes.node.isRequired,
	    overlayStyle: _react.PropTypes.object,
	    overlayClassName: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    mouseEnterDelay: _react.PropTypes.number,
	    mouseLeaveDelay: _react.PropTypes.number,
	    getTooltipContainer: _react.PropTypes.func,
	    destroyTooltipOnHide: _react.PropTypes.bool,
	    align: _react.PropTypes.object,
	    arrowContent: _react.PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-tooltip',
	      mouseEnterDelay: 0,
	      destroyTooltipOnHide: false,
	      mouseLeaveDelay: 0.1,
	      align: {},
	      placement: 'right',
	      trigger: ['hover'],
	      arrowContent: null
	    };
	  },
	  getPopupElement: function getPopupElement() {
	    var _props = this.props;
	    var arrowContent = _props.arrowContent;
	    var overlay = _props.overlay;
	    var prefixCls = _props.prefixCls;

	    return [_react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-arrow', key: 'arrow' },
	      arrowContent
	    ), _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-inner', key: 'content' },
	      overlay
	    )];
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    return this.refs.trigger.popupDomNode;
	  },
	  render: function render() {
	    var _props2 = this.props;
	    var overlayClassName = _props2.overlayClassName;
	    var trigger = _props2.trigger;
	    var mouseEnterDelay = _props2.mouseEnterDelay;
	    var mouseLeaveDelay = _props2.mouseLeaveDelay;
	    var overlayStyle = _props2.overlayStyle;
	    var prefixCls = _props2.prefixCls;
	    var children = _props2.children;
	    var onVisibleChange = _props2.onVisibleChange;
	    var transitionName = _props2.transitionName;
	    var animation = _props2.animation;
	    var placement = _props2.placement;
	    var align = _props2.align;
	    var destroyTooltipOnHide = _props2.destroyTooltipOnHide;
	    var defaultVisible = _props2.defaultVisible;
	    var getTooltipContainer = _props2.getTooltipContainer;

	    var restProps = _objectWithoutProperties(_props2, ['overlayClassName', 'trigger', 'mouseEnterDelay', 'mouseLeaveDelay', 'overlayStyle', 'prefixCls', 'children', 'onVisibleChange', 'transitionName', 'animation', 'placement', 'align', 'destroyTooltipOnHide', 'defaultVisible', 'getTooltipContainer']);

	    var extraProps = _extends({}, restProps);
	    if ('visible' in this.props) {
	      extraProps.popupVisible = this.props.visible;
	    }
	    return _react2["default"].createElement(
	      _rcTrigger2["default"],
	      _extends({
	        popupClassName: overlayClassName,
	        ref: 'trigger',
	        prefixCls: prefixCls,
	        popup: this.getPopupElement(),
	        action: trigger,
	        builtinPlacements: _placements.placements,
	        popupPlacement: placement,
	        popupAlign: align,
	        getPopupContainer: getTooltipContainer,
	        onPopupVisibleChange: onVisibleChange,
	        popupTransitionName: transitionName,
	        popupAnimation: animation,
	        defaultPopupVisible: defaultVisible,
	        destroyPopupOnHide: destroyTooltipOnHide,
	        mouseLeaveDelay: mouseLeaveDelay,
	        popupStyle: overlayStyle,
	        mouseEnterDelay: mouseEnterDelay
	      }, extraProps),
	      children
	    );
	  }
	});

	exports["default"] = Tooltip;
	module.exports = exports['default'];

/***/ },
/* 299 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = exports.placements = {
	  left: {
	    points: ['cr', 'cl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  },
	  right: {
	    points: ['cl', 'cr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  top: {
	    points: ['bc', 'tc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  bottom: {
	    points: ['tc', 'bc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  leftTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  rightTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  rightBottom: {
	    points: ['bl', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  leftBottom: {
	    points: ['br', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  }
	};

	exports["default"] = placements;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Created by xy on 15/4/13.
	 */

	var Row = __webpack_require__(301);
	var util = __webpack_require__(290);
	var deepcopy = __webpack_require__(170);
	var React = __webpack_require__(7);
	var addEventListener = __webpack_require__(127);
	var throttle = __webpack_require__(389);
	var EmptyData = __webpack_require__(394);

	var Tbody = function (_React$Component) {
	  _inherits(Tbody, _React$Component);

	  function Tbody(props) {
	    _classCallCheck(this, Tbody);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {};
	    return _this;
	  }

	  Tbody.prototype.componentDidMount = function componentDidMount() {
	    var me = this;
	    me.rootEl = me.root;
	    me.scrollHandler = throttle(me.onScroll.bind(me), 20);
	    me.scrollListener = addEventListener(me.rootEl, 'scroll', me.scrollHandler);
	  };

	  Tbody.prototype.componentWillUnmount = function componentWillUnmount() {
	    var me = this;
	    me.scrollListener.remove();
	  };

	  Tbody.prototype.onScroll = function onScroll() {
	    var me = this;
	    var fixedColumn = me.props.fixedColumn;

	    if (fixedColumn !== 'fixed') {
	      if (me.scrollEndTimer) {
	        clearTimeout(me.scrollEndTimer);
	      }
	      me.scrollEndTimer = setTimeout(function () {
	        me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop);
	      }, 500);
	      me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop);
	    }
	  };

	  Tbody.prototype.getDomNode = function getDomNode() {
	    return this.root;
	  };

	  Tbody.prototype.saveRef = function saveRef(name) {
	    var me = this;
	    return function func(c) {
	      me[name] = c;
	    };
	  };

	  Tbody.prototype.renderEmptyData = function renderEmptyData() {
	    if (this.props.data.length === 0 && !this.props.mask) {
	      var style = {};
	      if (typeof this.props.height === 'number') {
	        style.lineHeight = this.props.height - 10 + 'px';
	      }
	      return React.createElement(
	        EmptyData,
	        { style: { marginTop: '20px' } },
	        this.props.emptyText
	      );
	    }
	    return null;
	  };

	  Tbody.prototype.render = function render() {
	    var me = this;
	    var props = me.props;
	    var data = props.data.length > 0 ? props.data : [];
	    var style = {};
	    var columns = deepcopy(props.columns);
	    var width = 0;
	    var bodyWrapClassName = void 0;

	    if (props.fixedColumn === 'fixed') {
	      columns = props.columns.filter(function (item) {
	        if (item.fixed && !item.hidden) {
	          width = parseInt(item.width, 10) + width;
	          return true;
	        }
	        return false;
	      });
	      style = {
	        width: width,
	        minWidth: width
	      };
	      bodyWrapClassName = 'kuma-uxtable-body-fixed';
	    } else if (props.fixedColumn === 'scroll') {
	      columns = props.columns.filter(function (item) {
	        if (!item.fixed) {
	          return true;
	        } else if (!item.hidden) {
	          width = parseInt(item.width, 10) + width;
	        }
	        return false;
	      });

	      var delta = 2;

	      // change 2 to 3, fix ie8 issue
	      if (util.getIEVer() === 8) {
	        delta = 3;
	      }
	      var bodyWidth = typeof props.width === 'number' ? props.width - width - delta : props.width;
	      style = {
	        width: bodyWidth,
	        minWidth: bodyWidth
	      };
	      bodyWrapClassName = 'kuma-uxtable-body-scroll';
	    } else {
	      bodyWrapClassName = 'kuma-uxtable-body-no';
	    }
	    return React.createElement(
	      'div',
	      { className: bodyWrapClassName, ref: this.saveRef('root'), style: style },
	      React.createElement(
	        'ul',
	        { className: this.props.jsxprefixCls },
	        this.renderEmptyData(),
	        data.map(function (item, index) {
	          var renderProps = {
	            columns: columns,
	            index: index,
	            data: data,
	            rowIndex: item.jsxid, // tree mode, rowIndex need think more, so use jsxid
	            rowData: deepcopy(data[index]),
	            root: props.root,
	            locale: props.locale,
	            subComp: props.subComp,
	            actions: props.actions,
	            key: 'row' + index,
	            mode: props.mode,
	            renderModel: props.renderModel,
	            fixedColumn: props.fixedColumn,
	            level: 1,
	            levels: props.levels,
	            expandedKeys: props.expandedKeys,
	            renderSubComp: props.renderSubComp,
	            changeSelected: me.props.changeSelected,
	            checkboxColumnKey: props.checkboxColumnKey,
	            addRowClassName: props.addRowClassName,
	            rowSelection: props.rowSelection,
	            handleDataChange: props.handleDataChange,
	            attachCellField: props.attachCellField,
	            detachCellField: props.detachCellField,
	            visible: true,
	            last: index === data.length - 1
	          };
	          return React.createElement(Row, renderProps);
	        })
	      )
	    );
	  };

	  return Tbody;
	}(React.Component);

	Tbody.propTypes = {
	  jsxprefixCls: React.PropTypes.string,
	  data: React.PropTypes.array,
	  emptyText: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object]),
	  height: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
	  mask: React.PropTypes.bool
	};

	Tbody.defaultProps = {
	  jsxprefixCls: 'kuma-uxtable-body'
	};

	exports["default"] = Tbody;
	module.exports = exports['default'];

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Created by xy on 15/4/13.
	 */
	var Cell = __webpack_require__(302);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(6);
	var deepEqual = __webpack_require__(282);
	var deepcopy = __webpack_require__(170);
	var CheckBox = __webpack_require__(294);
	var util = __webpack_require__(290);

	var React = __webpack_require__(7);

	var Row = function (_React$Component) {
	  _inherits(Row, _React$Component);

	  function Row() {
	    _classCallCheck(this, Row);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Row.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    // 需要考虑的 prop 包括
	    // columns, rowIndex(s => simple), rowData, index(s),
	    // addRowClassName(f => function), rowSelection, subComp(no support), renderSubComp(f), actions
	    // mode(s), renderModel(s), fixedColumn(s), levels(s),
	    // visible(s), expandedKeys, checkboxColumnKey(s)
	    var me = this;
	    var shouldUpdate = false;

	    ['rowIndex', 'index', 'mode', 'renderModel', 'fixedColumn', 'levels', 'addRowClassName', 'renderSubComp', 'visible', 'checkboxColumnKey', 'locale'].forEach(function (item) {
	      if (me.props[item] !== nextProps[item]) {
	        shouldUpdate = true;
	      }
	    });
	    if (!shouldUpdate) {
	      ['columns', 'rowData', 'rowSelection', 'actions', 'expandedKeys'].forEach(function (item) {
	        if (!deepEqual(me.props[item], nextProps[item])) {
	          shouldUpdate = true;
	        }
	      });
	    }
	    return shouldUpdate;
	  };

	  Row.prototype.handleClick = function handleClick() {};

	  Row.prototype.handleDoubleClick = function handleDoubleClick(rowData) {
	    var table = this.props.root;
	    if (table.props.doubleClickToEdit) {
	      table.editRow(deepcopy(rowData));
	    }
	  };

	  Row.prototype.handleTreeCheckChange = function handleTreeCheckChange(e) {
	    var me = this;
	    me.props.root.changeTreeSelected(e.target.checked, me.props.dataIndex || me.props.index);
	  };

	  Row.prototype.showSubCompFunc = function showSubCompFunc() {
	    var me = this;
	    me.props.root.toggleSubComp(me.props.rowData);
	  };

	  Row.prototype.toggleExpanded = function toggleExpanded(e) {
	    e.stopPropagation();
	    var me = this;
	    var rowData = me.props.rowData;

	    me.props.root.toggleTreeExpanded(rowData);
	  };

	  Row.prototype.renderSubComp = function renderSubComp() {
	    var props = this.props;

	    if (props.renderModel === 'tree') {
	      return false;
	    }
	    if (props.subComp) {
	      if (props.rowData.showSubComp) {
	        var subComp = React.cloneElement(props.subComp, {
	          passedData: this.props.rowData,
	          parentHasCheckbox: !!this.props.rowSelection,
	          parentHasCheck: !!this.props.rowSelection
	        });
	        return React.createElement(
	          'div',
	          { className: 'kuma-uxtable-subrow' },
	          subComp
	        );
	      }
	      return false;
	    } else if (props.renderSubComp) {
	      var _subComp = props.renderSubComp(deepcopy(props.rowData));
	      if (_subComp && props.rowData.showSubComp) {
	        return React.createElement(
	          'div',
	          { className: 'kuma-uxtable-subrow' },
	          _subComp
	        );
	      }
	      return false;
	    }
	    return false;
	  };

	  Row.prototype.renderChild = function renderChild() {
	    var props = this.props;
	    var me = this;
	    var children = [];

	    if (props.renderModel !== 'tree') {
	      return children;
	    }
	    if (props.rowData.data) {
	      props.rowData.data.forEach(function (node, index) {
	        var renderProps = assign({}, props, {
	          level: me.props.level + 1,
	          index: index,
	          dataIndex: (me.props.dataIndex ? me.props.dataIndex : me.props.index) + '-' + index,
	          rowData: node,
	          rowIndex: node.jsxid,
	          key: node.jsxid,
	          showSubComp: false,
	          visible: props.expandedKeys.indexOf(props.rowData.jsxid) !== -1
	        });
	        children.push(React.createElement(Row, renderProps));
	      });

	      var renderProps = {
	        key: 'treeRow' + this.props.rowData.jsxid,
	        className: 'kuma-uxtable-tree-row'
	      };

	      children = React.createElement(
	        'ul',
	        renderProps,
	        children
	      );
	    }

	    return children;
	  };

	  Row.prototype.renderExpandIcon = function renderExpandIcon(rowIndex) {
	    var expandCollapseIcon = void 0;
	    var _expandIconClass = void 0;
	    var props = this.props;

	    if (props.renderModel !== 'tree') {
	      return false;
	    }

	    if (props.rowData.data) {
	      _expandIconClass = {
	        'kuma-icon': true,
	        'kuma-icon-triangle-right': true,
	        expanded: props.expandedKeys.indexOf(props.rowData.jsxid) !== -1
	      };
	      expandCollapseIcon = React.createElement(
	        'span',
	        {
	          className: 'kuma-uxtable-expand-icon',
	          'data-type': props.fixedColumn,
	          'data-index': rowIndex,
	          onClick: this.toggleExpanded.bind(this)
	        },
	        React.createElement('i', { className: classnames(_expandIconClass) })
	      );
	    } else {
	      expandCollapseIcon = React.createElement('span', { className: 'kuma-uxtable-emptyicon' });
	    }
	    return expandCollapseIcon;
	  };

	  Row.prototype.renderIndent = function renderIndent() {
	    var indents = [];
	    if (this.props.renderModel === 'tree') {
	      for (var i = 0; i < this.props.level - 1; i++) {
	        var renderProps = {
	          className: 'indent',
	          key: 'indent' + i
	        };
	        indents.push(React.createElement('span', renderProps));
	      }
	    }

	    return indents;
	  };

	  Row.prototype.renderTreeRowSelector = function renderTreeRowSelector() {
	    if (this.props.renderModel !== 'tree' || !this.props.checkboxColumnKey) {
	      return false;
	    }
	    var me = this;
	    var _me$props = me.props,
	        rowData = _me$props.rowData,
	        checkboxColumnKey = _me$props.checkboxColumnKey,
	        prefixCls = _me$props.prefixCls;

	    var isChecked = rowData[checkboxColumnKey];
	    var isHalfChecked = false;
	    if (!isChecked) {
	      isHalfChecked = util.isRowHalfChecked(rowData, checkboxColumnKey);
	    }
	    return React.createElement(CheckBox, {
	      checked: isChecked,
	      halfChecked: isHalfChecked,
	      className: prefixCls + '-tree-selector',
	      onChange: me.handleTreeCheckChange.bind(me)
	    });
	  };

	  Row.prototype.render = function render() {
	    var _classnames;

	    var props = this.props;
	    var _columns = [];
	    var _style = {};
	    var _data = props.data;
	    var me = this;
	    var otherCls = props.addRowClassName(_data[props.index]);

	    if (!this.props.visible) {
	      _style = {
	        display: 'none'
	      };
	    }

	    props.columns.forEach(function (column) {
	      if ('group' in column) {
	        _columns = _columns.concat(column.columns);
	      } else {
	        _columns.push(column);
	      }
	    });

	    var firstVisableColumn = 0;

	    return React.createElement(
	      'li',
	      {
	        className: classnames((_classnames = {}, _defineProperty(_classnames, this.props.prefixCls, true), _defineProperty(_classnames, otherCls, !!otherCls), _defineProperty(_classnames, 'even', props.index % 2 === 1), _defineProperty(_classnames, 'last', this.props.last), _classnames)),
	        style: _style,
	        onClick: this.handleClick.bind(this, props.rowData),
	        onDoubleClick: this.handleDoubleClick.bind(this, props.rowData)
	      },
	      React.createElement(
	        'div',
	        { className: this.props.prefixCls + '-cells' },
	        _columns.map(function (item, index) {
	          var rowSelectorInTreeMode = ['checkboxSelector', 'radioSelector'].indexOf(item.type) !== -1 && props.renderModel === 'tree';
	          if (item.hidden || rowSelectorInTreeMode) {
	            return null;
	          }
	          firstVisableColumn++;
	          var hasSubComp = !!props.subComp;
	          if (!hasSubComp) {
	            hasSubComp = props.renderSubComp ? !!props.renderSubComp(deepcopy(props.rowData)) : false;
	          }
	          var renderProps = {
	            key: 'cell' + index,
	            column: item,
	            root: props.root,
	            locale: props.locale,
	            rowData: props.rowData,
	            rowIndex: props.rowIndex,
	            index: props.index,
	            changeSelected: props.changeSelected,
	            rowSelection: props.rowSelection,
	            actions: props.actions,
	            mode: props.mode,
	            handleDataChange: props.handleDataChange,
	            attachCellField: props.attachCellField,
	            detachCellField: props.detachCellField,
	            last: index === _columns.length - 1,
	            cellIndex: index,
	            hasSubComp: hasSubComp,
	            showSubCompCallback: me.showSubCompFunc.bind(me)
	          };

	          if (firstVisableColumn === 1) {
	            return React.createElement(
	              Cell,
	              renderProps,
	              me.renderIndent(),
	              me.renderExpandIcon(props.rowIndex),
	              me.renderTreeRowSelector()
	            );
	          }
	          // if have vertical data structure, how to process it
	          return React.createElement(Cell, renderProps);
	        })
	      ),
	      me.renderChild(),
	      this.renderSubComp()
	    );
	  };

	  return Row;
	}(React.Component);

	Row.propTypes = {
	  prefixCls: React.PropTypes.string,
	  renderModel: React.PropTypes.string,
	  checkboxColumnKey: React.PropTypes.string,
	  root: React.PropTypes.any,
	  rowData: React.PropTypes.object,
	  rowSelection: React.PropTypes.object,
	  showSubComp: React.PropTypes.bool,
	  last: React.PropTypes.bool,
	  visible: React.PropTypes.bool,
	  level: React.PropTypes.number,
	  levels: React.PropTypes.number
	};

	Row.defaultProps = {
	  prefixCls: 'kuma-uxtable-row',
	  showSubComp: false
	};

	exports["default"] = Row;
	module.exports = exports['default'];

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Created by xy on 15/4/13.
	 */

	var React = __webpack_require__(7);
	var Const = __webpack_require__(168);
	var classnames = __webpack_require__(5);
	var deepcopy = __webpack_require__(170);
	var deepEqual = __webpack_require__(282);
	var DateField = __webpack_require__(303);
	var CheckField = __webpack_require__(353);

	var CollapsedButton = __webpack_require__(358);
	var CheckBox = __webpack_require__(294);
	var Radio = __webpack_require__(370);
	var TextField = __webpack_require__(371);
	var SelectField = __webpack_require__(372);
	var RadioField = __webpack_require__(385);
	var util = __webpack_require__(290);

	var fieldsMap = {
	  select: SelectField,
	  text: TextField,
	  radio: RadioField,
	  date: DateField,
	  check: CheckField
	};

	var Cell = function (_React$Component) {
	  _inherits(Cell, _React$Component);

	  function Cell() {
	    _classCallCheck(this, Cell);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Cell.prototype.componentDidMount = function componentDidMount() {
	    var me = this;
	    if (me.props.column.type === 'checkbox' || me.props.column.type === 'checkboxSelector' || me.props.column.type === 'radioSelector') {
	      me.props.changeSelected(me.getCellData(), me.props.rowIndex, true);
	    }
	  };

	  Cell.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    // 需要考虑的 prop 包括
	    // column, rowData, rowIndex(s), index(s), cellIndex(s), hasSubComp(s)
	    // rowSelection, actions, mode(s)
	    var me = this;
	    var shouldUpdate = false;

	    // only tree mode has children
	    if ('children' in nextProps) {
	      return true;
	    }

	    ['rowIndex', 'index', 'cellIndex', 'hasSubComp', 'mode'].forEach(function (item) {
	      if (me.props[item] !== nextProps[item]) {
	        shouldUpdate = true;
	      }
	    });

	    if (!shouldUpdate) {
	      ['column', 'rowSelection', 'rowData', 'actions'].forEach(function (item) {
	        if (!deepEqual(me.props[item], nextProps[item])) {
	          shouldUpdate = true;
	        }
	      });
	    }

	    return shouldUpdate;
	  };

	  /**
	   * @param actions {Array|Object|Function}
	   */


	  Cell.prototype.getActionItems = function getActionItems(actions) {
	    if ((typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) !== 'object' && typeof actions !== 'function') {
	      console.error('Table: Actions should be an object/array/function');
	      return [];
	    }
	    var me = this;
	    me.items = [];
	    if (typeof actions === 'function') {
	      me.items = actions(me.props.rowData);
	    } else if (actions instanceof Array) {
	      me.items = actions;
	    } else {
	      Object.keys(actions).forEach(function (item) {
	        me.items.push({
	          title: item,
	          callback: actions[item]
	        });
	      });
	    }
	    return me.items;
	  };

	  Cell.prototype.getEditData = function getEditData() {
	    var me = this;
	    var column = me.props.column;
	    var editKey = column.editKey || column.dataKey;
	    return me.props.rowData[editKey];
	  };

	  Cell.prototype.getCellData = function getCellData(nextProps) {
	    var props = nextProps || this.props;
	    var column = props.column;
	    var cellData = props.rowData[column.dataKey];
	    return cellData;
	  };

	  Cell.prototype.handleCheckChange = function handleCheckChange(e) {
	    var me = this;
	    me.props.changeSelected(e.target.checked, me.props.rowIndex, false);
	  };

	  Cell.prototype.handleActionClick = function handleActionClick(cb, e) {
	    e.stopPropagation();
	    e.preventDefault();
	    if (cb) {
	      cb();
	    }
	  };

	  Cell.prototype.showSubComp = function showSubComp() {
	    this.props.showSubCompCallback.apply();
	  };

	  /**
	   * @param {Object} column current column config
	   * @param {Object} rowData current row data
	   * @param {String} mode current row mode: edit or view, same as rowData['__mode__']
	   */

	  Cell.prototype.renderActionItems = function renderActionItems(column, rowData, mode) {
	    var me = this;
	    var actions = me.getActionItems(column.actions).filter(function (item) {
	      return !('mode' in item) || item.mode === mode;
	    });
	    var items = [];
	    actions.forEach(function (action, index) {
	      var content = action.render ? action.render(action.title, deepcopy(me.props.rowData)) : action.title;
	      if (content) {
	        items.push(React.createElement(
	          CollapsedButton.Item,
	          {
	            key: index,
	            disabled: typeof action.isDisable === 'function' ? action.isDisable() : false,
	            onClick: me.handleActionClick.bind(me, (action.callback || function () {}).bind(me, rowData, me.props.root))
	          },
	          content
	        ));
	      }
	    });
	    return React.createElement(
	      CollapsedButton,
	      {
	        prefixCls: me.props.jsxprefixCls,
	        maxLength: column.collapseNum,
	        type: column.actionType,
	        locale: me.props.locale
	      },
	      items
	    );
	  };

	  Cell.prototype.renderTreeIcon = function renderTreeIcon() {
	    if (this.props.cellIndex === 0 && this.props.hasSubComp) {
	      var open = this.props.rowData.showSubComp;
	      return React.createElement(
	        'span',
	        {
	          className: 'kuma-uxtable-tree-icon',
	          onClick: this.showSubComp.bind(this)
	        },
	        React.createElement('i', {
	          className: classnames({
	            'kuma-icon': true,
	            'kuma-icon-triangle-right': true,
	            'kuma-icon-triangle-right__open': open
	          })
	        })
	      );
	    }
	    return null;
	  };

	  Cell.prototype.render = function render() {
	    var _classnames;

	    var me = this;
	    var props = me.props;
	    var column = props.column;
	    var width = column.width;
	    var mode = props.rowData.__mode__;
	    var style = {
	      width: width || 100,
	      textAlign: props.column.align ? props.column.align : 'left'
	    };
	    var content = deepcopy(props.rowData);
	    var renderProps = void 0;

	    if (column.type === 'action') {
	      content = React.createElement(
	        'div',
	        { className: 'action-container' },
	        me.renderActionItems(column, content, mode)
	      );
	    } else if (column.type === 'checkbox' || column.type === 'checkboxSelector') {
	      style.paddingRight = 4;
	      style.paddingLeft = 12;

	      var checked = me.getCellData();
	      var disable = props.rowSelection.isDisabled ? props.rowSelection.isDisabled(props.rowData) : false;
	      if ('disable' in column) {
	        disable = column.disable;
	      } else if ('isDisable' in column) {
	        disable = !!column.isDisable(props.rowData);
	      }
	      content = React.createElement(CheckBox, {
	        disable: disable,
	        mode: props.mode,
	        align: props.column.align,
	        checked: checked,
	        onChange: me.handleCheckChange.bind(me)
	      });
	    } else if (column.type === 'radioSelector') {
	      style.paddingRight = 4;
	      style.paddingLeft = 12;

	      var _checked = me.getCellData();
	      var _disable = props.rowSelection.isDisabled ? props.rowSelection.isDisabled(props.rowData) : false;
	      if ('disable' in column) {
	        _disable = column.disable;
	      } else if ('isDisable' in column) {
	        _disable = !!column.isDisable(props.rowData);
	      }
	      content = React.createElement(Radio, {
	        disable: _disable,
	        mode: props.mode,
	        align: props.column.align,
	        checked: _checked,
	        onChange: me.handleCheckChange.bind(me)
	      });
	    } else if (column.type === 'treeIcon') {
	      content = me.renderTreeIcon();
	      style.borderRight = 'none';
	    } else if ((column.type === 'custom' || column.type in fieldsMap) && mode === Const.MODE.EDIT && (!('canEdit' in column) || column.canEdit(props.rowData))) {
	      // inline edit mode
	      renderProps = {
	        value: me.getEditData(),
	        rowData: props.rowData,
	        index: props.index,
	        column: column,
	        handleDataChange: props.handleDataChange,
	        attachCellField: props.attachCellField,
	        detachCellField: props.detachCellField
	      };
	      var Field = void 0;

	      if (column.type === 'custom') {
	        Field = props.column.customField;
	      } else {
	        Field = fieldsMap[column.type];
	      }
	      content = React.createElement(Field, renderProps);
	    } else if (column.type === 'money' || column.type === 'card' || column.type === 'cnmobile') {
	      content = React.createElement(
	        'div',
	        {
	          className: 'default-cell',
	          title: me.getCellData()
	        },
	        util.formatValue(me.getCellData(), column.type, column.delimiter)
	      );
	    } else if (column.render) {
	      content = column.render.apply(null, [me.getCellData(), content]);
	    } else {
	      content = React.createElement(
	        'div',
	        { className: 'default-cell', title: me.getCellData() },
	        me.getCellData()
	      );
	    }

	    var child = me.props.children;
	    return React.createElement(
	      'div',
	      {
	        className: classnames((_classnames = {}, _defineProperty(_classnames, props.jsxprefixCls, true), _defineProperty(_classnames, 'last', props.last), _classnames)),
	        style: style
	      },
	      child,
	      content
	    );
	  };

	  return Cell;
	}(React.Component);

	Cell.propTypes = {
	  cellIndex: React.PropTypes.number,
	  hasSubComp: React.PropTypes.bool,
	  rowData: React.PropTypes.object,
	  jsxprefixCls: React.PropTypes.string,
	  showSubCompCallback: React.PropTypes.func
	};

	Cell.defaultProps = {
	  jsxprefixCls: 'kuma-uxtable-cell',
	  rowSelection: {}
	};

	exports["default"] = Cell;
	module.exports = exports['default'];

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * DateCellField Component for uxcore
	 * @author AlphaGo88&lt;83268606@qq.com&gt;
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(304);

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * DateCellField Component for uxcore
	 * @author AlphaGo88&lt;83268606@qq.com&gt;
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var assign = __webpack_require__(6);
	var Calendar = __webpack_require__(305);
	var React = __webpack_require__(7);
	var CellField = __webpack_require__(3);

	var DateCellField = function (_CellField) {
	  _inherits(DateCellField, _CellField);

	  function DateCellField() {
	    _classCallCheck(this, DateCellField);

	    return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
	  }

	  /* eslint-disable class-methods-use-this */
	  DateCellField.prototype.addSpecificClass = function addSpecificClass() {
	    return 'kuma-date-cell-field';
	  };
	  /* eslint-enable class-methods-use-this */

	  DateCellField.prototype.renderContent = function renderContent() {
	    var me = this;
	    var config = me.props.column.config;
	    var propsToDelete = ['value', 'onSelect'];
	    var fieldProps = {
	      value: me.props.value,
	      onSelect: function onSelect(value, formatDateString) {
	        me.handleDataChange({
	          text: formatDateString,
	          value: value ? value.getTime() : value
	        });
	      }
	    };
	    if (config) {
	      (function () {
	        var customProps = _extends({}, config);
	        propsToDelete.forEach(function (item) {
	          delete customProps[item];
	        });
	        assign(fieldProps, customProps);
	      })();
	    }
	    return React.createElement(Calendar, fieldProps);
	  };

	  return DateCellField;
	}(CellField);

	DateCellField.propTypes = assign({}, CellField.propTypes);
	DateCellField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = DateCellField;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Calendar Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(306);

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var DateTimeFormat = __webpack_require__(307);
	var Datepicker = __webpack_require__(313);
	var TimePicker = __webpack_require__(315);
	var React = __webpack_require__(7);
	var classnames = __webpack_require__(5);
	var GregorianCalendar = __webpack_require__(308);

	var RcCalendar = __webpack_require__(322);
	var util = __webpack_require__(343);
	var MonthCalendar = __webpack_require__(345);
	var YearCalendar = __webpack_require__(351);

	var defaultValueLocale = {};
	var CalendarLocale = {};
	var TimePickerLocale = {};

	defaultValueLocale['zh-cn'] = __webpack_require__(347);
	defaultValueLocale['en-us'] = __webpack_require__(311);
	CalendarLocale['zh-cn'] = __webpack_require__(348);
	CalendarLocale['en-us'] = __webpack_require__(336);
	TimePickerLocale['zh-cn'] = __webpack_require__(350);
	TimePickerLocale['en-us'] = __webpack_require__(317);

	var getCalendarContainer = util.getCalendarContainer;

	var Calendar = function (_React$Component) {
	  _inherits(Calendar, _React$Component);

	  function Calendar(props) {
	    _classCallCheck(this, Calendar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {};
	    _this.clearValue = _this.clearValue.bind(_this);
	    _this.handleChange = _this.handleChange.bind(_this);
	    return _this;
	  }

	  Calendar.prototype.componentWillMount = function componentWillMount() {
	    var me = this;

	    me.TimePickerElement = React.createElement(TimePicker, { prefixCls: 'kuma-time-picker-panel', locale: TimePickerLocale[me.props.locale] });
	  };

	  Calendar.prototype.getTriggerNode = function getTriggerNode() {
	    return this.trigger;
	  };

	  Calendar.prototype.getGregorianCalendarDate = function getGregorianCalendarDate(date) {
	    var me = this;
	    var _me$props = me.props,
	        timezone = _me$props.timezone,
	        locale = _me$props.locale;

	    if (timezone) {
	      defaultValueLocale[locale].timezoneOffset = parseInt(timezone, 10) * 60;
	    } else {
	      defaultValueLocale[locale].timezoneOffset = -new Date().getTimezoneOffset();
	    }
	    var value = new GregorianCalendar(defaultValueLocale[locale]);
	    value.setTime(new Date(date).valueOf());
	    return value;
	  };

	  Calendar.prototype.clearValue = function clearValue(e) {
	    e.stopPropagation();
	    this.props.onSelect(null, null);
	  };

	  Calendar.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	    };
	  };

	  Calendar.prototype.handleChange = function handleChange(v) {
	    var p = this.props;
	    var formatter = new DateTimeFormat(p.format);
	    if (v) {
	      var date = v.getTime();
	      var value = this.getGregorianCalendarDate(date);
	      this.props.onSelect(new Date(date), formatter.format(value));
	    } else {
	      this.props.onSelect(v, v);
	    }
	  };

	  Calendar.prototype.render = function render() {
	    var _classnames,
	        _this2 = this;

	    var me = this;
	    var p = me.props;
	    var formatter = new DateTimeFormat(p.format);
	    var timePaneNumber = 1 + p.showHour + p.showSecond;
	    var calendarOptions = {
	      className: classnames((_classnames = {}, _defineProperty(_classnames, p.className, !!p.className), _defineProperty(_classnames, 'kuma-calendar-two-time-panel', timePaneNumber === 2), _defineProperty(_classnames, 'kuma-calendar-one-time-panel', timePaneNumber === 1), _classnames)),
	      style: p.style,
	      contentRender: p.contentRender,
	      disabledDate: p.disabledDate,
	      disabledTime: p.disabledTime,
	      showSecond: p.showSecond,
	      showHour: p.showHour,
	      showWeekNumber: p.showWeekNumber,
	      showToday: p.showToday,
	      timePicker: p.timePicker || (p.showTime ? me.TimePickerElement : null),
	      showDateInput: p.showDateInput,
	      locale: CalendarLocale[p.locale],
	      formatter: formatter,
	      prefixCls: 'kuma-calendar'
	    };
	    var pickerOptions = {
	      disabled: p.disabled,
	      formatter: formatter,
	      align: p.align,
	      transitionName: p.transitionName,
	      adjustOrientOnCalendarOverflow: false,
	      prefixCls: 'kuma-calendar-picker',
	      placement: 'bottomLeft',
	      getCalendarContainer: p.getPopupContainer || getCalendarContainer
	    };

	    if (p.value) {
	      var value = this.getGregorianCalendarDate(p.value);
	      pickerOptions.value = calendarOptions.defaultValue = value;
	    } else {
	      pickerOptions.value = calendarOptions.defaultValue = null;
	    }

	    if (p.defaultValue) {
	      var _value = this.getGregorianCalendarDate(p.defaultValue);
	      calendarOptions.defaultValue = _value;
	      pickerOptions.defaultValue = _value;
	    } else {
	      var _value2 = this.getGregorianCalendarDate(new Date().getTime());
	      calendarOptions.defaultValue = _value2;
	    }
	    if (p.hasTrigger) {
	      pickerOptions.trigger = React.createElement('i', { className: 'kuma-icon kuma-icon-calender' });
	    }

	    var calendar = React.createElement(RcCalendar, calendarOptions);

	    var triggerStyle = {};
	    if (p.inputWidth) {
	      triggerStyle.width = p.inputWidth;
	    }

	    return React.createElement(
	      Datepicker,
	      _extends({
	        calendar: calendar,
	        onChange: me.handleChange
	      }, pickerOptions),
	      function (_ref) {
	        var value = _ref.value;

	        var showClear = value && !p.disabled;
	        var newValue = value;
	        if (newValue) {
	          newValue = formatter.format(value);
	        } else {
	          newValue = '';
	        }
	        return React.createElement(
	          'span',
	          { className: 'kuma-calendar-picker-input', style: triggerStyle, ref: me.saveRef('trigger') },
	          React.createElement('input', {
	            value: newValue,
	            readOnly: true,
	            disabled: me.props.disabled,
	            placeholder: _this2.props.placeholder,
	            className: 'kuma-input'
	          }),
	          p.hasTrigger ? React.createElement('i', { className: 'kuma-icon kuma-icon-calender ' + (showClear ? 'kuma-icon-calender__has-clear' : '') }) : null,
	          showClear ? React.createElement('i', { className: 'kuma-icon kuma-icon-close', onClick: _this2.clearValue }) : null
	        );
	      }
	    );
	  };

	  return Calendar;
	}(React.Component);

	Calendar.displayName = 'Calendar';
	Calendar.defaultProps = {
	  format: 'yyyy-MM-dd',
	  placeholder: '请选择日期',
	  onSelect: function onSelect() {},

	  locale: 'zh-cn',
	  align: {
	    offset: [0, 0]
	  },
	  showSecond: true,
	  showHour: true,
	  showDateInput: true,
	  hasTrigger: true,
	  transitionName: 'slideUp'
	};
	Calendar.propTypes = {
	  format: React.PropTypes.string,
	  inputWidth: React.PropTypes.number,
	  placeholder: React.PropTypes.string,
	  onSelect: React.PropTypes.func,
	  locale: React.PropTypes.string,
	  hasTrigger: React.PropTypes.bool,
	  showSecond: React.PropTypes.bool,
	  showHour: React.PropTypes.bool,
	  getPopupContainer: React.PropTypes.func
	};

	Calendar.MonthCalendar = MonthCalendar;
	Calendar.YearCalendar = YearCalendar;
	Calendar.CalendarPanel = RcCalendar;
	Calendar.util = util;

	module.exports = Calendar;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @ignore
	 * DateTimeFormat for
	 * Inspired by DateTimeFormat from JDK.
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	var GregorianCalendar = __webpack_require__(308);
	var enUsLocale = __webpack_require__(312);
	var MAX_VALUE = Number.MAX_VALUE;
	var warning = __webpack_require__(161);

	/**
	 * date or time style enum
	 * @enum {Number} Date.Formatter.Style
	 */
	var DateTimeStyle = {
	  /**
	   * full style
	   */
	  FULL: 0,
	  /**
	   * long style
	   */
	  LONG: 1,
	  /**
	   * medium style
	   */
	  MEDIUM: 2,
	  /**
	   * short style
	   */
	  SHORT: 3
	};

	/*
	 Letter    Date or Time Component    Presentation    Examples
	 G    Era designator    Text    AD
	 y    Year    Year    1996; 96
	 Y    WeekYear    WeekYear    1996; 96
	 M    Month in year    Month    July; Jul; 07
	 w    Week in year    Number    27
	 W    Week in month    Number    2
	 D    Day in year    Number    189
	 d    Day in month    Number    10
	 F    Day of week in month    Number    2
	 E    Day in week    Text    Tuesday; Tue
	 a    Am/pm marker    Text    PM
	 H    Hour in day (0-23)    Number    0
	 k    Hour in day (1-24)    Number    24
	 K    Hour in am/pm (0-11)    Number    0
	 h    Hour in am/pm (1-12)    Number    12
	 m    Minute in hour    Number    30
	 s    Second in minute    Number    55
	 S    Millisecond    Number    978
	 x z    Time zone    General time zone    Pacific Standard Time; PST; GMT-08:00
	 Z    Time zone    RFC 822 time zone    -0800
	 */

	var patternChars = new Array(GregorianCalendar.DAY_OF_WEEK_IN_MONTH + 2).join('1');
	var ERA = 0;
	var calendarIndexMap = {};

	patternChars = patternChars.split('');
	patternChars[ERA] = 'G';
	patternChars[GregorianCalendar.YEAR] = 'y';
	patternChars[GregorianCalendar.MONTH] = 'M';
	patternChars[GregorianCalendar.DAY_OF_MONTH] = 'd';
	patternChars[GregorianCalendar.HOUR_OF_DAY] = 'H';
	patternChars[GregorianCalendar.MINUTES] = 'm';
	patternChars[GregorianCalendar.SECONDS] = 's';
	patternChars[GregorianCalendar.MILLISECONDS] = 'S';
	patternChars[GregorianCalendar.WEEK_OF_YEAR] = 'w';
	patternChars[GregorianCalendar.WEEK_OF_MONTH] = 'W';
	patternChars[GregorianCalendar.DAY_OF_YEAR] = 'D';
	patternChars[GregorianCalendar.DAY_OF_WEEK_IN_MONTH] = 'F';
	patternChars.push('Y');

	patternChars.forEach(function (v, key) {
	  var k = key;
	  if (v === 'Y') {
	    k = GregorianCalendar.YEAR;
	  }
	  if (v) {
	    calendarIndexMap[v] = k;
	  }
	});

	function mix(t, s) {
	  for (var p in s) {
	    if (s.hasOwnProperty(p)) {
	      t[p] = s[p];
	    }
	  }
	}

	var SUBSTITUTE_REG = /\\?\{([^{}]+)\}/g;
	var EMPTY = '';

	function substitute(str, o, regexp) {
	  if (typeof str !== 'string' || !o) {
	    return str;
	  }

	  return str.replace(regexp || SUBSTITUTE_REG, function (match, name) {
	    if (match.charAt(0) === '\\') {
	      return match.slice(1);
	    }
	    return o[name] === undefined ? EMPTY : o[name];
	  });
	}

	patternChars = patternChars.join('') + 'ahkKZE';

	function encode(lastField, count, compiledPattern) {
	  compiledPattern.push({
	    field: lastField,
	    count: count
	  });
	}

	function compile(pattern) {
	  var length = pattern.length;
	  var inQuote = false;
	  var compiledPattern = [];
	  var tmpBuffer = null;
	  var count = 0;
	  var lastField = -1;

	  for (var i = 0; i < length; i++) {
	    var c = pattern.charAt(i);

	    if (c === '\'') {
	      // '' is treated as a single quote regardless of being
	      // in a quoted section.
	      if (i + 1 < length) {
	        c = pattern.charAt(i + 1);
	        if (c === '\'') {
	          i++;
	          if (count !== 0) {
	            encode(lastField, count, compiledPattern);
	            lastField = -1;
	            count = 0;
	          }
	          if (inQuote) {
	            tmpBuffer += c;
	          }
	          continue;
	        }
	      }
	      if (!inQuote) {
	        if (count !== 0) {
	          encode(lastField, count, compiledPattern);
	          lastField = -1;
	          count = 0;
	        }
	        tmpBuffer = '';
	        inQuote = true;
	      } else {
	        compiledPattern.push({
	          text: tmpBuffer
	        });
	        inQuote = false;
	      }
	      continue;
	    }
	    if (inQuote) {
	      tmpBuffer += c;
	      continue;
	    }
	    if (!(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {
	      if (count !== 0) {
	        encode(lastField, count, compiledPattern);
	        lastField = -1;
	        count = 0;
	      }
	      compiledPattern.push({
	        text: c
	      });
	      continue;
	    }

	    if (patternChars.indexOf(c) === -1) {
	      throw new Error('Illegal pattern character "' + c + '"');
	    }

	    if (lastField === -1 || lastField === c) {
	      lastField = c;
	      count++;
	      continue;
	    }
	    encode(lastField, count, compiledPattern);
	    lastField = c;
	    count = 1;
	  }

	  if (inQuote) {
	    throw new Error('Unterminated quote');
	  }

	  if (count !== 0) {
	    encode(lastField, count, compiledPattern);
	  }

	  return compiledPattern;
	}

	var zeroDigit = '0';

	// TODO zeroDigit localization??
	function zeroPaddingNumber(_x, _x2, _x3, _x4) {
	  var _again = true;

	  _function: while (_again) {
	    var value = _x,
	        minDigits = _x2,
	        maxDigits_ = _x3,
	        b = _x4;
	    _again = false;

	    // Optimization for 1, 2 and 4 digit numbers. This should
	    // cover most cases of formatting date/time related items.
	    // Note: This optimization code assumes that maxDigits is
	    // either 2 or Integer.MAX_VALUE (maxIntCount in format()).
	    var buffer = b || [];
	    var maxDigits = maxDigits_ || MAX_VALUE;
	    if (value >= 0) {
	      if (value < 100 && minDigits >= 1 && minDigits <= 2) {
	        if (value < 10 && minDigits === 2) {
	          buffer.push(zeroDigit);
	        }
	        buffer.push(value);
	        return buffer.join('');
	      } else if (value >= 1000 && value < 10000) {
	        if (minDigits === 4) {
	          buffer.push(value);
	          return buffer.join('');
	        }
	        if (minDigits === 2 && maxDigits === 2) {
	          _x = value % 100;
	          _x2 = 2;
	          _x3 = 2;
	          _x4 = buffer;
	          _again = true;
	          buffer = maxDigits = undefined;
	          continue _function;
	        }
	      }
	    }
	    buffer.push(value + '');
	    return buffer.join('');
	  }
	}

	/**
	 *
	 * date time formatter for GregorianCalendar
	 *
	 *      @example
	 *
	 *          const calendar = new GregorianCalendar(2013,9,24);
	 *          // ' to escape
	 *          const formatter = new GregorianCalendarFormat("'today is' ''yyyy/MM/dd a''");
	 *          document.write(formatter.format(calendar));
	 *
	 * @class GregorianCalendarFormat
	 * @param {String} pattern patter string of date formatter
	 *
	 * <table border="1">
	 * <thead valign="bottom">
	 * <tr><th class="head">Letter</th>
	 * <th class="head">Date or Time Component</th>
	 * <th class="head">Presentation</th>
	 * <th class="head">Examples</th>
	 * </tr>
	 * </thead>
	 * <tbody valign="top">
	 * <tr><td>G</td>
	 * <td>Era designator</td>
	 * <td>Text</td>
	 * <td>AD</td>
	 * </tr>
	 * <tr><td>y</td>
	 * <td>Year</td>
	 * <td>Year</td>
	 * <td>1996; 96</td>
	 * </tr>
	 * <tr><td>M</td>
	 * <td>Month in year</td>
	 * <td>Month</td>
	 * <td>July; Jul; 07</td>
	 * </tr>
	 * <tr><td>w</td>
	 * <td>Week in year</td>
	 * <td>Number</td>
	 * <td>27</td>
	 * </tr>
	 * <tr><td>W</td>
	 * <td>Week in month</td>
	 * <td>Number</td>
	 * <td>2</td>
	 * </tr>
	 * <tr><td>D</td>
	 * <td>Day in year</td>
	 * <td>Number</td>
	 * <td>189</td>
	 * </tr>
	 * <tr><td>d</td>
	 * <td>Day in month</td>
	 * <td>Number</td>
	 * <td>10</td>
	 * </tr>
	 * <tr><td>F</td>
	 * <td>Day of week in month</td>
	 * <td>Number</td>
	 * <td>2</td>
	 * </tr>
	 * <tr><td>E</td>
	 * <td>Day in week</td>
	 * <td>Text</td>
	 * <td>Tuesday; Tue</td>
	 * </tr>
	 * <tr><td>a</td>
	 * <td>Am/pm marker</td>
	 * <td>Text</td>
	 * <td>PM</td>
	 * </tr>
	 * <tr><td>H</td>
	 *       <td>Hour in day (0-23)</td>
	 * <td>Number</td>
	 * <td>0</td>
	 * </tr>
	 * <tr><td>k</td>
	 *       <td>Hour in day (1-24)</td>
	 * <td>Number</td>
	 * <td>24</td>
	 * </tr>
	 * <tr><td>K</td>
	 * <td>Hour in am/pm (0-11)</td>
	 * <td>Number</td>
	 * <td>0</td>
	 * </tr>
	 * <tr><td>h</td>
	 * <td>Hour in am/pm (1-12)</td>
	 * <td>Number</td>
	 * <td>12</td>
	 * </tr>
	 * <tr><td>m</td>
	 * <td>Minute in hour</td>
	 * <td>Number</td>
	 * <td>30</td>
	 * </tr>
	 * <tr><td>s</td>
	 * <td>Second in minute</td>
	 * <td>Number</td>
	 * <td>55</td>
	 * </tr>
	 * <tr><td>S</td>
	 * <td>Millisecond</td>
	 * <td>Number</td>
	 * <td>978</td>
	 * </tr>
	 * <tr><td>x/z</td>
	 * <td>Time zone</td>
	 * <td>General time zone</td>
	 * <td>Pacific Standard Time; PST; GMT-08:00</td>
	 * </tr>
	 * <tr><td>Z</td>
	 * <td>Time zone</td>
	 * <td>RFC 822 time zone</td>
	 * <td>-0800</td>
	 * </tr>
	 * </tbody>
	 * </table>

	 * @param {Object} locale format locale
	 */
	function DateTimeFormat(pattern, locale) {
	  this.locale = locale || enUsLocale;
	  this.originalPattern = pattern;
	  this.pattern = compile(pattern);
	}

	function formatField(field, count, locale, calendar) {
	  var current = undefined;
	  var value = undefined;
	  switch (field) {
	    case 'G':
	      value = calendar.getYear() > 0 ? 1 : 0;
	      current = locale.eras[value];
	      break;
	    case 'Y':
	      value = calendar.getWeekYear();
	      if (value <= 0) {
	        value = 1 - value;
	      }
	      current = zeroPaddingNumber(value, 2, count !== 2 ? MAX_VALUE : 2);
	      break;
	    case 'y':
	      value = calendar.getYear();
	      if (value <= 0) {
	        value = 1 - value;
	      }
	      current = zeroPaddingNumber(value, 2, count !== 2 ? MAX_VALUE : 2);
	      break;
	    case 'M':
	      value = calendar.getMonth();
	      if (count >= 4) {
	        current = locale.months[value];
	      } else if (count === 3) {
	        current = locale.shortMonths[value];
	      } else {
	        current = zeroPaddingNumber(value + 1, count);
	      }
	      break;
	    case 'k':
	      current = zeroPaddingNumber(calendar.getHourOfDay() || 24, count);
	      break;
	    case 'E':
	      value = calendar.getDayOfWeek();
	      current = count >= 4 ? locale.weekdays[value] : locale.shortWeekdays[value];
	      break;
	    case 'a':
	      current = locale.ampms[calendar.getHourOfDay() >= 12 ? 1 : 0];
	      break;
	    case 'h':
	      current = zeroPaddingNumber(calendar.getHourOfDay() % 12 || 12, count);
	      break;
	    case 'K':
	      current = zeroPaddingNumber(calendar.getHourOfDay() % 12, count);
	      break;
	    case 'Z':
	      var offset = calendar.getTimezoneOffset();
	      var parts = [offset < 0 ? '-' : '+'];
	      offset = Math.abs(offset);
	      parts.push(zeroPaddingNumber(Math.floor(offset / 60) % 100, 2), zeroPaddingNumber(offset % 60, 2));
	      current = parts.join('');
	      break;
	    default:
	      // case 'd':
	      // case 'H':
	      // case 'm':
	      // case 's':
	      // case 'S':
	      // case 'D':
	      // case 'F':
	      // case 'w':
	      // case 'W':
	      var index = calendarIndexMap[field];
	      value = calendar.get(index);
	      current = zeroPaddingNumber(value, count);
	  }
	  return current;
	}

	function matchPartString(dateStr, startIndex, match, mLen) {
	  for (var i = 0; i < mLen; i++) {
	    if (dateStr.charAt(startIndex + i) !== match.charAt(i)) {
	      return false;
	    }
	  }
	  return true;
	}

	function matchField(dateStr, startIndex, matches) {
	  var matchedLen = -1;
	  var index = -1;
	  var i = undefined;
	  var len = matches.length;
	  for (i = 0; i < len; i++) {
	    var m = matches[i];
	    var mLen = m.length;
	    if (mLen > matchedLen && matchPartString(dateStr, startIndex, m, mLen)) {
	      matchedLen = mLen;
	      index = i;
	    }
	  }
	  return index >= 0 ? {
	    value: index,
	    startIndex: startIndex + matchedLen
	  } : null;
	}

	function getLeadingNumberLen(str) {
	  var i = undefined;
	  var c = undefined;
	  var len = str.length;
	  for (i = 0; i < len; i++) {
	    c = str.charAt(i);
	    if (c < '0' || c > '9') {
	      break;
	    }
	  }
	  return i;
	}

	function matchNumber(dateStr, startIndex, count, obeyCount) {
	  var str = dateStr;
	  var n = undefined;
	  if (obeyCount) {
	    if (dateStr.length < startIndex + count) {
	      return null;
	    }
	    str = dateStr.slice(startIndex, startIndex + count);
	    if (!str.match(/^\d+$/)) {
	      throw new Error('GregorianCalendarFormat parse error, dateStr: ' + dateStr + ', patter: ' + this.originalPattern);
	    }
	  } else {
	    str = str.slice(startIndex);
	  }
	  n = parseInt(str, 10);
	  if (isNaN(n)) {
	    throw new Error('GregorianCalendarFormat parse error, dateStr: ' + dateStr + ', patter: ' + this.originalPattern);
	  }
	  return {
	    value: n,
	    startIndex: startIndex + getLeadingNumberLen(str)
	  };
	}

	function parseField(calendar, dateStr, startIndex_, field, count, obeyCount, tmp) {
	  var match = undefined;
	  var year = undefined;
	  var hour = undefined;
	  var startIndex = startIndex_;
	  if (dateStr.length <= startIndex) {
	    return startIndex;
	  }
	  var locale = this.locale;
	  switch (field) {
	    case 'G':
	      match = matchField(dateStr, startIndex, locale.eras);
	      if (match) {
	        if (calendar.isSetYear()) {
	          if (match.value === 0) {
	            year = calendar.getYear();
	            calendar.setYear(1 - year);
	          }
	        } else {
	          tmp.era = match.value;
	        }
	      }
	      break;
	    case 'y':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        year = match.value;
	        if ('era' in tmp) {
	          if (tmp.era === 0) {
	            year = 1 - year;
	          }
	        }
	        calendar.setYear(year);
	      }
	      break;
	    case 'M':
	      var month = undefined;
	      if (count >= 3) {
	        match = matchField(dateStr, startIndex, locale[count === 3 ? 'shortMonths' : 'months']);
	        if (match) {
	          month = match.value;
	        }
	      } else {
	        match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	        if (match) {
	          month = match.value - 1;
	        }
	      }
	      if (match) {
	        calendar.setMonth(month);
	      }
	      break;
	    case 'k':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        calendar.setHourOfDay(match.value % 24);
	      }
	      break;
	    case 'E':
	      match = matchField(dateStr, startIndex, locale[count > 3 ? 'weekdays' : 'shortWeekdays']);
	      if (match) {
	        calendar.setDayOfWeek(match.value);
	      }
	      break;
	    case 'a':
	      match = matchField(dateStr, startIndex, locale.ampms);
	      if (match) {
	        if (calendar.isSetHourOfDay()) {
	          if (match.value) {
	            hour = calendar.getHourOfDay();
	            if (hour < 12) {
	              calendar.setHourOfDay((hour + 12) % 24);
	            }
	          }
	        } else {
	          tmp.ampm = match.value;
	        }
	      }
	      break;
	    case 'h':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        hour = match.value %= 12;
	        if (tmp.ampm) {
	          hour += 12;
	        }
	        calendar.setHourOfDay(hour);
	      }
	      break;
	    case 'K':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        hour = match.value;
	        if (tmp.ampm) {
	          hour += 12;
	        }
	        calendar.setHourOfDay(hour);
	      }
	      break;
	    case 'Z':
	      // let sign = 1;
	      var zoneChar = dateStr.charAt(startIndex);
	      if (zoneChar === '-') {
	        // sign = -1;
	        startIndex++;
	      } else if (zoneChar === '+') {
	        startIndex++;
	      } else {
	        break;
	      }
	      match = matchNumber.call(this, dateStr, startIndex, 2, true);
	      if (match) {
	        var zoneOffset = match.value * 60;
	        startIndex = match.startIndex;
	        match = matchNumber.call(this, dateStr, startIndex, 2, true);
	        if (match) {
	          zoneOffset += match.value;
	        }
	        calendar.setTimezoneOffset(zoneOffset);
	      }
	      break;
	    default:
	      // case 'd':
	      // case 'H':
	      // case 'm':
	      // case 's':
	      // case 'S':
	      // case 'D':
	      // case 'F':
	      // case 'w':
	      // case 'W'
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        var index = calendarIndexMap[field];
	        calendar.set(index, match.value);
	      }
	  }
	  if (match) {
	    startIndex = match.startIndex;
	  }
	  return startIndex;
	}

	mix(DateTimeFormat.prototype, {
	  /*
	   * format a GregorianDate instance according to specified pattern
	   * @param {GregorianCalendar} calendar GregorianDate instance
	   * @returns {string} formatted string of GregorianDate instance
	   */
	  format: function format(calendar) {
	    if (!calendar.isGregorianCalendar) {
	      throw new Error('calendar must be type of GregorianCalendar');
	    }
	    var i = undefined;
	    var ret = [];
	    var pattern = this.pattern;
	    var len = pattern.length;
	    for (i = 0; i < len; i++) {
	      var comp = pattern[i];
	      if (comp.text) {
	        ret.push(comp.text);
	      } else if ('field' in comp) {
	        ret.push(formatField(comp.field, comp.count, this.locale, calendar));
	      }
	    }
	    return ret.join('');
	  },

	  /*
	   * parse a formatted string of GregorianDate instance according to specified pattern
	   * @param {String} dateStr formatted string of GregorianDate
	   * @returns {GregorianCalendar}
	   */
	  parse: function parse(dateStr, option_) {
	    var option = option_ || {};
	    var calendarLocale = option.locale;
	    var calendar = new GregorianCalendar(calendarLocale);
	    var i = undefined;
	    var j = undefined;
	    var tmp = {};
	    var obeyCount = option.obeyCount || false;
	    var dateStrLen = dateStr.length;
	    var errorIndex = -1;
	    var startIndex = 0;
	    var oldStartIndex = 0;
	    var pattern = this.pattern;
	    var len = pattern.length;
	    /* eslint no-labels: 0 no-empty-label:0 */
	    loopPattern: {
	      for (i = 0; errorIndex < 0 && i < len; i++) {
	        var comp = pattern[i];
	        var text = undefined;
	        var textLen = undefined;
	        oldStartIndex = startIndex;
	        text = comp.text;
	        if (text) {
	          textLen = text.length;
	          if (textLen + startIndex > dateStrLen) {
	            errorIndex = startIndex;
	          } else {
	            for (j = 0; j < textLen; j++) {
	              if (text.charAt(j) !== dateStr.charAt(j + startIndex)) {
	                errorIndex = startIndex;
	                break loopPattern;
	              }
	            }
	            startIndex += textLen;
	          }
	        } else if ('field' in comp) {
	          if (!option.obeyCount) {
	            var nextComp = pattern[i + 1];
	            obeyCount = false;
	            if (nextComp) {
	              if ('field' in nextComp) {
	                obeyCount = true;
	              } else {
	                var c = nextComp.text.charAt(0);
	                if (c >= '0' && c <= '9') {
	                  obeyCount = true;
	                }
	              }
	            }
	          }
	          startIndex = parseField.call(this, calendar, dateStr, startIndex, comp.field, comp.count, obeyCount, tmp);
	          if (startIndex === oldStartIndex) {
	            errorIndex = startIndex;
	          }
	        }
	      }
	    }

	    if (errorIndex >= 0) {
	      warning(false, 'error when parsing date: ' + dateStr + ', position: ' + dateStr.slice(0, errorIndex) + '^');
	      return undefined;
	    }
	    return calendar;
	  }
	});

	mix(DateTimeFormat, {
	  Style: DateTimeStyle,

	  /*
	   * get a formatter instance of short style pattern.
	   * en-us: M/d/yy h:mm a
	   * zh-cn: yy-M-d ah:mm
	   * @param {Object} locale locale object
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getInstance: function getInstance(locale) {
	    return this.getDateTimeInstance(DateTimeStyle.SHORT, DateTimeStyle.SHORT, locale);
	  },

	  /*
	   * get a formatter instance of specified date style.
	   * @param {Date.Formatter.Style} dateStyle date format style
	   * @param {Object} locale
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getDateInstance: function getDateInstance(dateStyle, locale) {
	    return this.getDateTimeInstance(dateStyle, undefined, locale);
	  },

	  /*
	   * get a formatter instance of specified date style and time style.
	   * @param {Date.Formatter.Style} dateStyle date format style
	   * @param {Date.Formatter.Style} timeStyle time format style
	   * @param {Object} locale
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getDateTimeInstance: function getDateTimeInstance(dateStyle, timeStyle, locale_) {
	    var locale = locale_ || enUsLocale;
	    var datePattern = '';
	    if (dateStyle !== undefined) {
	      datePattern = locale.datePatterns[dateStyle];
	    }
	    var timePattern = '';
	    if (timeStyle !== undefined) {
	      timePattern = locale.timePatterns[timeStyle];
	    }
	    var pattern = datePattern;
	    if (timePattern) {
	      if (datePattern) {
	        pattern = substitute(locale.dateTimePattern, {
	          date: datePattern,
	          time: timePattern
	        });
	      } else {
	        pattern = timePattern;
	      }
	    }
	    return new DateTimeFormat(pattern, locale);
	  },

	  /*
	   * get a formatter instance of specified time style.
	   * @param {Date.Formatter.Style} timeStyle time format style
	   * @param {Object} locale
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getTimeInstance: function getTimeInstance(timeStyle, locale) {
	    return this.getDateTimeInstance(undefined, timeStyle, locale);
	  }
	});

	module.exports = DateTimeFormat;

	DateTimeFormat.version = '@VERSION@';

	// gc_format@163.com

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * GregorianCalendar class
	 * @ignore
	 * @author yiminghe@gmail.com
	 */
	'use strict';

	var toInt = parseInt;
	var Utils = __webpack_require__(309);
	var defaultLocale = __webpack_require__(311);
	var Const = __webpack_require__(310);

	/*
	 * GregorianCalendar class.
	 *
	 * - no arguments:
	 *   Constructs a default GregorianCalendar using the current time
	 *   in the default time zone with the default locale.
	 * - one argument locale:
	 *   Constructs a GregorianCalendar
	 *   based on the current time in the default time zone with the given locale.
	 *
	 * @class Date.Gregorian
	 */
	function GregorianCalendar(loc) {
	  var locale = loc || defaultLocale;

	  this.locale = locale;

	  this.fields = [];

	  /*
	   * The currently set time for this date.
	   * @protected
	   * @type Number|undefined
	   */
	  this.time = undefined;
	  /*
	   * The timezoneOffset in minutes used by this date.
	   * @type Number
	   * @protected
	   */

	  this.timezoneOffset = locale.timezoneOffset;

	  /*
	   * The first day of the week
	   * @type Number
	   * @protected
	   */
	  this.firstDayOfWeek = locale.firstDayOfWeek;

	  /*
	   * The number of days required for the first week in a month or year,
	   * with possible values from 1 to 7.
	   * @@protected
	   * @type Number
	   */
	  this.minimalDaysInFirstWeek = locale.minimalDaysInFirstWeek;

	  this.fieldsComputed = false;
	}

	Utils.mix(GregorianCalendar, Const);

	Utils.mix(GregorianCalendar, {
	  Utils: Utils,

	  defaultLocale: defaultLocale,

	  /*
	   * Determines if the given year is a leap year.
	   * Returns true if the given year is a leap year. To specify BC year numbers,
	   * 1 - year number must be given. For example, year BC 4 is specified as -3.
	   * @param {Number} year the given year.
	   * @returns {Boolean} true if the given year is a leap year; false otherwise.
	   * @static
	   * @method
	   */
	  isLeapYear: Utils.isLeapYear,

	  /*
	   * Enum indicating year field of date
	   * @type Number
	   */
	  YEAR: 1,
	  /*
	   * Enum indicating month field of date
	   * @type Number
	   */
	  MONTH: 2,
	  /*
	   * Enum indicating the day of the month
	   * @type Number
	   */
	  DAY_OF_MONTH: 3,
	  /*
	   * Enum indicating the hour (24).
	   * @type Number
	   */
	  HOUR_OF_DAY: 4,
	  /*
	   * Enum indicating the minute of the day
	   * @type Number
	   */
	  MINUTES: 5,
	  /*
	   * Enum indicating the second of the day
	   * @type Number
	   */
	  SECONDS: 6,
	  /*
	   * Enum indicating the millisecond of the day
	   * @type Number
	   */
	  MILLISECONDS: 7,
	  /*
	   * Enum indicating the week number within the current year
	   * @type Number
	   */
	  WEEK_OF_YEAR: 8,
	  /*
	   * Enum indicating the week number within the current month
	   * @type Number
	   */
	  WEEK_OF_MONTH: 9,

	  /*
	   * Enum indicating the day of the day number within the current year
	   * @type Number
	   */
	  DAY_OF_YEAR: 10,
	  /*
	   * Enum indicating the day of the week
	   * @type Number
	   */
	  DAY_OF_WEEK: 11,
	  /*
	   * Enum indicating the day of the ordinal number of the day of the week
	   * @type Number
	   */
	  DAY_OF_WEEK_IN_MONTH: 12,

	  /*
	   * Enum indicating am
	   * @type Number
	   */
	  AM: 0,
	  /*
	   * Enum indicating pm
	   * @type Number
	   */
	  PM: 1
	});

	var FIELDS = ['', 'Year', 'Month', 'DayOfMonth', 'HourOfDay', 'Minutes', 'Seconds', 'Milliseconds', 'WeekOfYear', 'WeekOfMonth', 'DayOfYear', 'DayOfWeek', 'DayOfWeekInMonth'];

	var YEAR = GregorianCalendar.YEAR;
	var MONTH = GregorianCalendar.MONTH;
	var DAY_OF_MONTH = GregorianCalendar.DAY_OF_MONTH;
	var HOUR_OF_DAY = GregorianCalendar.HOUR_OF_DAY;
	var MINUTE = GregorianCalendar.MINUTES;
	var SECONDS = GregorianCalendar.SECONDS;

	var MILLISECONDS = GregorianCalendar.MILLISECONDS;
	var DAY_OF_WEEK_IN_MONTH = GregorianCalendar.DAY_OF_WEEK_IN_MONTH;
	var DAY_OF_YEAR = GregorianCalendar.DAY_OF_YEAR;
	var DAY_OF_WEEK = GregorianCalendar.DAY_OF_WEEK;

	var WEEK_OF_MONTH = GregorianCalendar.WEEK_OF_MONTH;
	var WEEK_OF_YEAR = GregorianCalendar.WEEK_OF_YEAR;

	var MONTH_LENGTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based
	var LEAP_MONTH_LENGTH = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based

	var ONE_SECOND = 1000;
	var ONE_MINUTE = 60 * ONE_SECOND;
	var ONE_HOUR = 60 * ONE_MINUTE;
	var ONE_DAY = 24 * ONE_HOUR;
	var ONE_WEEK = ONE_DAY * 7;

	var EPOCH_OFFSET = 719163; // Fixed date of January 1, 1970 (Gregorian)

	var mod = Utils.mod;
	var _isLeapYear = Utils.isLeapYear;
	var floorDivide = Math.floor;

	var MIN_VALUES = [undefined, 1, // YEAR
	GregorianCalendar.JANUARY, // MONTH
	1, // DAY_OF_MONTH
	0, // HOUR_OF_DAY
	0, // MINUTE
	0, // SECONDS
	0, // MILLISECONDS

	1, // WEEK_OF_YEAR
	undefined, // WEEK_OF_MONTH

	1, // DAY_OF_YEAR
	GregorianCalendar.SUNDAY, // DAY_OF_WEEK
	1];

	// DAY_OF_WEEK_IN_MONTH
	var MAX_VALUES = [undefined, 292278994, // YEAR
	GregorianCalendar.DECEMBER, // MONTH
	undefined, // DAY_OF_MONTH
	23, // HOUR_OF_DAY
	59, // MINUTE
	59, // SECONDS
	999, // MILLISECONDS
	undefined, // WEEK_OF_YEAR
	undefined, // WEEK_OF_MONTH
	undefined, // DAY_OF_YEAR
	GregorianCalendar.SATURDAY, // DAY_OF_WEEK
	undefined];

	// ------------------- private start

	// DAY_OF_WEEK_IN_MONTH
	function getMonthLength(year, month) {
	  return _isLeapYear(year) ? LEAP_MONTH_LENGTH[month] : MONTH_LENGTH[month];
	}

	function getYearLength(year) {
	  return _isLeapYear(year) ? 366 : 365;
	}

	function adjustDayOfMonth(self) {
	  var fields = self.fields;
	  var year = fields[YEAR];
	  var month = fields[MONTH];
	  var monthLen = getMonthLength(year, month);
	  var dayOfMonth = fields[DAY_OF_MONTH];
	  if (dayOfMonth > monthLen) {
	    self.set(DAY_OF_MONTH, monthLen);
	  }
	}

	function getDayOfWeekDateOnOrBefore(fixedDate, dayOfWeek) {
	  // 1.1.1 is monday
	  // one week has 7 days
	  return fixedDate - mod(fixedDate - dayOfWeek, 7);
	}

	function getWeekNumber(self, fixedDay1, fixedDate) {
	  var fixedDay1st = getDayOfWeekDateOnOrBefore(fixedDay1 + 6, self.firstDayOfWeek);
	  var nDays = fixedDay1st - fixedDay1;
	  if (nDays >= self.minimalDaysInFirstWeek) {
	    fixedDay1st -= 7;
	  }
	  var normalizedDayOfPeriod = fixedDate - fixedDay1st;
	  return floorDivide(normalizedDayOfPeriod / 7) + 1;
	}

	// ------------------- private end

	GregorianCalendar.prototype = {
	  constructor: GregorianCalendar,

	  isGregorianCalendar: 1,

	  /*
	   * Determines if current year is a leap year.
	   * Returns true if the given year is a leap year. To specify BC year numbers,
	   * 1 - year number must be given. For example, year BC 4 is specified as -3.
	   * @returns {Boolean} true if the given year is a leap year; false otherwise.
	   * @method
	   * @member Date.Gregorian
	   */
	  isLeapYear: function isLeapYear() {
	    return _isLeapYear(this.getYear());
	  },

	  /*
	   * Return local info for current date instance
	   * @returns {Object}
	   */
	  getLocale: function getLocale() {
	    return this.locale;
	  },

	  /*
	   * Returns the minimum value for
	   * the given calendar field of this GregorianCalendar instance.
	   * The minimum value is defined as the smallest value
	   * returned by the get method for any possible time value,
	   * taking into consideration the current values of the getFirstDayOfWeek,
	   * getMinimalDaysInFirstWeek.
	   * @param field the calendar field.
	   * @returns {Number} the minimum value for the given calendar field.
	   */
	  getActualMinimum: function getActualMinimum(field) {
	    if (MIN_VALUES[field] !== undefined) {
	      return MIN_VALUES[field];
	    }
	    if (field === WEEK_OF_MONTH) {
	      var cal = this.clone();
	      cal.clear();
	      cal.set(this.fields[YEAR], this.fields[MONTH], 1);
	      return cal.get(WEEK_OF_MONTH);
	    }

	    throw new Error('minimum value not defined!');
	  },

	  /*
	   * Returns the maximum value for the given calendar field
	   * of this GregorianCalendar instance.
	   * The maximum value is defined as the largest value returned
	   * by the get method for any possible time value, taking into consideration
	   * the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek methods.
	   * @param field the calendar field.
	   * @returns {Number} the maximum value for the given calendar field.
	   */
	  getActualMaximum: function getActualMaximum(field) {
	    if (MAX_VALUES[field] !== undefined) {
	      return MAX_VALUES[field];
	    }
	    var value = undefined;
	    var fields = this.fields;
	    switch (field) {
	      case DAY_OF_MONTH:
	        value = getMonthLength(fields[YEAR], fields[MONTH]);
	        break;

	      case WEEK_OF_YEAR:
	        var endOfYear = this.clone();
	        endOfYear.clear();
	        endOfYear.set(fields[YEAR], GregorianCalendar.DECEMBER, 31);
	        value = endOfYear.get(WEEK_OF_YEAR);
	        if (value === 1) {
	          value = 52;
	        }
	        break;

	      case WEEK_OF_MONTH:
	        var endOfMonth = this.clone();
	        endOfMonth.clear();
	        endOfMonth.set(fields[YEAR], fields[MONTH], getMonthLength(fields[YEAR], fields[MONTH]));
	        value = endOfMonth.get(WEEK_OF_MONTH);
	        break;

	      case DAY_OF_YEAR:
	        value = getYearLength(fields[YEAR]);
	        break;

	      case DAY_OF_WEEK_IN_MONTH:
	        value = toInt((getMonthLength(fields[YEAR], fields[MONTH]) - 1) / 7) + 1;
	        break;
	      default:
	        break;
	    }
	    if (value === undefined) {
	      throw new Error('maximum value not defined!');
	    }
	    return value;
	  },

	  /*
	   * Determines if the given calendar field has a value set,
	   * including cases that the value has been set by internal fields calculations
	   * triggered by a get method call.
	   * @param field the calendar field to be cleared.
	   * @returns {boolean} true if the given calendar field has a value set; false otherwise.
	   */
	  isSet: function isSet(field) {
	    return this.fields[field] !== undefined;
	  },

	  /*
	   * Converts the time value (millisecond offset from the Epoch)
	   * to calendar field values.
	   * @protected
	   */
	  computeFields: function computeFields() {
	    var time = this.time;
	    var timezoneOffset = this.timezoneOffset * ONE_MINUTE;
	    var fixedDate = toInt(timezoneOffset / ONE_DAY);
	    var timeOfDay = timezoneOffset % ONE_DAY;
	    fixedDate += toInt(time / ONE_DAY);
	    timeOfDay += time % ONE_DAY;
	    if (timeOfDay >= ONE_DAY) {
	      timeOfDay -= ONE_DAY;
	      fixedDate++;
	    } else {
	      while (timeOfDay < 0) {
	        timeOfDay += ONE_DAY;
	        fixedDate--;
	      }
	    }

	    fixedDate += EPOCH_OFFSET;

	    var date = Utils.getGregorianDateFromFixedDate(fixedDate);

	    var year = date.year;

	    var fields = this.fields;
	    fields[YEAR] = year;
	    fields[MONTH] = date.month;
	    fields[DAY_OF_MONTH] = date.dayOfMonth;
	    fields[DAY_OF_WEEK] = date.dayOfWeek;

	    if (timeOfDay !== 0) {
	      fields[HOUR_OF_DAY] = toInt(timeOfDay / ONE_HOUR);
	      var r = timeOfDay % ONE_HOUR;
	      fields[MINUTE] = toInt(r / ONE_MINUTE);
	      r %= ONE_MINUTE;
	      fields[SECONDS] = toInt(r / ONE_SECOND);
	      fields[MILLISECONDS] = r % ONE_SECOND;
	    } else {
	      fields[HOUR_OF_DAY] = fields[MINUTE] = fields[SECONDS] = fields[MILLISECONDS] = 0;
	    }

	    var fixedDateJan1 = Utils.getFixedDate(year, GregorianCalendar.JANUARY, 1);
	    var dayOfYear = fixedDate - fixedDateJan1 + 1;
	    var fixDateMonth1 = fixedDate - date.dayOfMonth + 1;

	    fields[DAY_OF_YEAR] = dayOfYear;
	    fields[DAY_OF_WEEK_IN_MONTH] = toInt((date.dayOfMonth - 1) / 7) + 1;

	    var weekOfYear = getWeekNumber(this, fixedDateJan1, fixedDate);

	    // 本周没有足够的时间在当前年
	    if (weekOfYear === 0) {
	      // If the date belongs to the last week of the
	      // previous year, use the week number of "12/31" of
	      // the "previous" year.
	      var fixedDec31 = fixedDateJan1 - 1;
	      var prevJan1 = fixedDateJan1 - getYearLength(year - 1);
	      weekOfYear = getWeekNumber(this, prevJan1, fixedDec31);
	    } else
	      // 本周是年末最后一周，可能有足够的时间在新的一年
	      if (weekOfYear >= 52) {
	        var nextJan1 = fixedDateJan1 + getYearLength(year);
	        var nextJan1st = getDayOfWeekDateOnOrBefore(nextJan1 + 6, this.firstDayOfWeek);
	        var nDays = nextJan1st - nextJan1;
	        // 本周有足够天数在新的一年
	        if (nDays >= this.minimalDaysInFirstWeek &&
	        // 当天确实在本周，weekOfYear === 53 时是不需要这个判断
	        fixedDate >= nextJan1st - 7) {
	          weekOfYear = 1;
	        }
	      }

	    fields[WEEK_OF_YEAR] = weekOfYear;
	    fields[WEEK_OF_MONTH] = getWeekNumber(this, fixDateMonth1, fixedDate);

	    this.fieldsComputed = true;
	  },

	  /*
	   * Converts calendar field values to the time value
	   * (millisecond offset from the Epoch).
	   * @protected
	   */
	  computeTime: function computeTime() {
	    var year = undefined;
	    var fields = this.fields;
	    if (this.isSet(YEAR)) {
	      year = fields[YEAR];
	    } else {
	      year = new Date().getFullYear();
	    }
	    var timeOfDay = 0;
	    if (this.isSet(HOUR_OF_DAY)) {
	      timeOfDay += fields[HOUR_OF_DAY];
	    }
	    timeOfDay *= 60;
	    timeOfDay += fields[MINUTE] || 0;
	    timeOfDay *= 60;
	    timeOfDay += fields[SECONDS] || 0;
	    timeOfDay *= 1000;
	    timeOfDay += fields[MILLISECONDS] || 0;
	    var fixedDate = 0;
	    fields[YEAR] = year;
	    fixedDate = fixedDate + this.getFixedDate();
	    // millis represents local wall-clock time in milliseconds.
	    var millis = (fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;
	    millis -= this.timezoneOffset * ONE_MINUTE;
	    this.time = millis;
	    this.computeFields();
	  },

	  /*
	   * Fills in any unset fields in the calendar fields. First,
	   * the computeTime() method is called if the time value (millisecond offset from the Epoch)
	   * has not been calculated from calendar field values.
	   * Then, the computeFields() method is called to calculate all calendar field values.
	   * @protected
	   */
	  complete: function complete() {
	    if (this.time === undefined) {
	      this.computeTime();
	    }
	    if (!this.fieldsComputed) {
	      this.computeFields();
	    }
	  },

	  getFixedDate: function getFixedDate() {
	    var self = this;

	    var fields = self.fields;

	    var firstDayOfWeekCfg = self.firstDayOfWeek;

	    var year = fields[YEAR];

	    var month = GregorianCalendar.JANUARY;

	    if (self.isSet(MONTH)) {
	      month = fields[MONTH];
	      if (month > GregorianCalendar.DECEMBER) {
	        year += toInt(month / 12);
	        month %= 12;
	      } else if (month < GregorianCalendar.JANUARY) {
	        year += floorDivide(month / 12);
	        month = mod(month, 12);
	      }
	    }

	    // Get the fixed date since Jan 1, 1 (Gregorian). We are on
	    // the first day of either `month' or January in 'year'.
	    var fixedDate = Utils.getFixedDate(year, month, 1);
	    var firstDayOfWeek = undefined;
	    var dayOfWeek = self.firstDayOfWeek;

	    if (self.isSet(DAY_OF_WEEK)) {
	      dayOfWeek = fields[DAY_OF_WEEK];
	    }

	    if (self.isSet(MONTH)) {
	      if (self.isSet(DAY_OF_MONTH)) {
	        fixedDate += fields[DAY_OF_MONTH] - 1;
	      } else {
	        if (self.isSet(WEEK_OF_MONTH)) {
	          firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg);

	          // If we have enough days in the first week, then
	          // move to the previous week.
	          if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {
	            firstDayOfWeek -= 7;
	          }

	          if (dayOfWeek !== firstDayOfWeekCfg) {
	            firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);
	          }

	          fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_MONTH] - 1);
	        } else {
	          var dowim = undefined;
	          if (self.isSet(DAY_OF_WEEK_IN_MONTH)) {
	            dowim = fields[DAY_OF_WEEK_IN_MONTH];
	          } else {
	            dowim = 1;
	          }
	          var lastDate = 7 * dowim;
	          if (dowim < 0) {
	            lastDate = getMonthLength(year, month) + 7 * (dowim + 1);
	          }
	          fixedDate = getDayOfWeekDateOnOrBefore(fixedDate + lastDate - 1, dayOfWeek);
	        }
	      }
	    } else {
	      // We are on the first day of the year.
	      if (self.isSet(DAY_OF_YEAR)) {
	        fixedDate += fields[DAY_OF_YEAR] - 1;
	      } else if (self.isSet(WEEK_OF_YEAR)) {
	        firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg);
	        // If we have enough days in the first week, then move
	        // to the previous week.
	        if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {
	          firstDayOfWeek -= 7;
	        }
	        if (dayOfWeek !== firstDayOfWeekCfg) {
	          firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);
	        }
	        fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_YEAR] - 1);
	      }
	    }

	    return fixedDate;
	  },

	  /*
	   * Returns this Calendar's time value in milliseconds
	   * @member Date.Gregorian
	   * @returns {Number} the current time as UTC milliseconds from the epoch.
	   */
	  getTime: function getTime() {
	    if (this.time === undefined) {
	      this.computeTime();
	    }
	    return this.time;
	  },

	  /*
	   * Sets this Calendar's current time from the given long value.
	   * @param time the new time in UTC milliseconds from the epoch.
	   */
	  setTime: function setTime(time) {
	    this.time = time;
	    this.fieldsComputed = false;
	    this.complete();
	  },

	  /*
	   * Returns the value of the given calendar field.
	   * @param field the given calendar field.
	   * @returns {Number} the value for the given calendar field.
	   */
	  get: function get(field) {
	    this.complete();
	    return this.fields[field];
	  },

	  /*
	   * Returns the year of the given calendar field.
	   * @method getYear
	   * @returns {Number} the year for the given calendar field.
	   */

	  /*
	   * Returns the month of the given calendar field.
	   * @method getMonth
	   * @returns {Number} the month for the given calendar field.
	   */

	  /*
	   * Returns the day of month of the given calendar field.
	   * @method getDayOfMonth
	   * @returns {Number} the day of month for the given calendar field.
	   */

	  /*
	   * Returns the hour of day of the given calendar field.
	   * @method getHourOfDay
	   * @returns {Number} the hour of day for the given calendar field.
	   */

	  /*
	   * Returns the minute of the given calendar field.
	   * @method getMinute
	   * @returns {Number} the minute for the given calendar field.
	   */

	  /*
	   * Returns the second of the given calendar field.
	   * @method getSecond
	   * @returns {Number} the second for the given calendar field.
	   */

	  /*
	   * Returns the millisecond of the given calendar field.
	   * @method getMilliSecond
	   * @returns {Number} the millisecond for the given calendar field.
	   */

	  /*
	   * Returns the week of year of the given calendar field.
	   * @method getWeekOfYear
	   * @returns {Number} the week of year for the given calendar field.
	   */

	  /*
	   * Returns the week of month of the given calendar field.
	   * @method getWeekOfMonth
	   * @returns {Number} the week of month for the given calendar field.
	   */

	  /*
	   * Returns the day of year of the given calendar field.
	   * @method getDayOfYear
	   * @returns {Number} the day of year for the given calendar field.
	   */

	  /*
	   * Returns the day of week of the given calendar field.
	   * @method getDayOfWeek
	   * @returns {Number} the day of week for the given calendar field.
	   */

	  /*
	   * Returns the day of week in month of the given calendar field.
	   * @method getDayOfWeekInMonth
	   * @returns {Number} the day of week in month for the given calendar field.
	   */

	  /*
	   * Sets the given calendar field to the given value.
	   * @param field the given calendar field.
	   * @param v the value to be set for the given calendar field.
	   */
	  set: function set(field, v) {
	    var len = arguments.length;
	    if (len === 2) {
	      this.fields[field] = v;
	    } else if (len < MILLISECONDS + 1) {
	      for (var i = 0; i < len; i++) {
	        this.fields[YEAR + i] = arguments[i];
	      }
	    } else {
	      throw new Error('illegal arguments for GregorianCalendar set');
	    }
	    this.time = undefined;
	  },

	  /*
	   * Set the year of the given calendar field.
	   * @method setYear
	   */

	  /*
	   * Set the month of the given calendar field.
	   * @method setMonth
	   */

	  /*
	   * Set the day of month of the given calendar field.
	   * @method setDayOfMonth
	   */

	  /*
	   * Set the hour of day of the given calendar field.
	   * @method setHourOfDay
	   */

	  /*
	   * Set the minute of the given calendar field.
	   * @method setMinute
	   */

	  /*
	   * Set the second of the given calendar field.
	   * @method setSecond
	   */

	  /*
	   * Set the millisecond of the given calendar field.
	   * @method setMilliSecond
	   */

	  /*
	   * Set the week of year of the given calendar field.
	   * @method setWeekOfYear
	   */

	  /*
	   * Set the week of month of the given calendar field.
	   * @method setWeekOfMonth
	   */

	  /*
	   * Set the day of year of the given calendar field.
	   * @method setDayOfYear
	   */

	  /*
	   * Set the day of week of the given calendar field.
	   * @method setDayOfWeek
	   */

	  /*
	   * Set the day of week in month of the given calendar field.
	   * @method setDayOfWeekInMonth
	   */

	  /*
	   * add for specified field based on two rules:
	   *
	   *  - Add rule 1. The value of field after the call minus the value of field before the
	   *  call is amount, modulo any overflow that has occurred in field
	   *  Overflow occurs when a field value exceeds its range and,
	   *  as a result, the next larger field is incremented or
	   *  decremented and the field value is adjusted back into its range.
	   *
	   *  - Add rule 2. If a smaller field is expected to be invariant,
	   *  but it is impossible for it to be equal to its
	   *  prior value because of changes in its minimum or maximum after
	   *  field is changed, then its value is adjusted to be as close
	   *  as possible to its expected value. A smaller field represents a
	   *  smaller unit of time. HOUR_OF_DAY is a smaller field than
	   *  DAY_OF_MONTH. No adjustment is made to smaller fields
	   *  that are not expected to be invariant. The calendar system
	   *  determines what fields are expected to be invariant.
	   *
	   *
	   *      @example
	   *      use('date/gregorian',function(S, GregorianCalendar){
	   *          const d = new GregorianCalendar();
	   *          d.set(2012, GregorianCalendar.JANUARY, 31);
	   *          d.add(Gregorian.MONTH,1);
	   *          // 2012-2-29
	   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())
	   *          d.add(Gregorian.MONTH,12);
	   *          // 2013-2-28
	   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())
	   *      });
	   *
	   * @param field the calendar field.
	   * @param {Number} amount he amount of date or time to be added to the field.
	   */
	  add: function add(field, a) {
	    if (!a) {
	      return;
	    }
	    var amount = a;
	    var self = this;
	    var fields = self.fields;
	    // computer and retrieve original value
	    var value = self.get(field);
	    if (field === YEAR) {
	      value += amount;
	      self.set(YEAR, value);
	      adjustDayOfMonth(self);
	    } else if (field === MONTH) {
	      value += amount;
	      var yearAmount = floorDivide(value / 12);
	      value = mod(value, 12);
	      if (yearAmount) {
	        self.set(YEAR, fields[YEAR] + yearAmount);
	      }
	      self.set(MONTH, value);
	      adjustDayOfMonth(self);
	    } else {
	      switch (field) {
	        case HOUR_OF_DAY:
	          amount *= ONE_HOUR;
	          break;
	        case MINUTE:
	          amount *= ONE_MINUTE;
	          break;
	        case SECONDS:
	          amount *= ONE_SECOND;
	          break;
	        case MILLISECONDS:
	          break;
	        case WEEK_OF_MONTH:
	        case WEEK_OF_YEAR:
	        case DAY_OF_WEEK_IN_MONTH:
	          amount *= ONE_WEEK;
	          break;
	        case DAY_OF_WEEK:
	        case DAY_OF_YEAR:
	        case DAY_OF_MONTH:
	          amount *= ONE_DAY;
	          break;
	        default:
	          throw new Error('illegal field for add');
	      }
	      self.setTime(self.time + amount);
	    }
	  },

	  /*
	   * add the year of the given calendar field.
	   * @method addYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the month of the given calendar field.
	   * @method addMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of month of the given calendar field.
	   * @method addDayOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the hour of day of the given calendar field.
	   * @method addHourOfDay
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the minute of the given calendar field.
	   * @method addMinute
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the second of the given calendar field.
	   * @method addSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the millisecond of the given calendar field.
	   * @method addMilliSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the week of year of the given calendar field.
	   * @method addWeekOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the week of month of the given calendar field.
	   * @method addWeekOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of year of the given calendar field.
	   * @method addDayOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of week of the given calendar field.
	   * @method addDayOfWeek
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of week in month of the given calendar field.
	   * @method addDayOfWeekInMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * Get rolled value for the field
	   * @protected
	   */
	  getRolledValue: function getRolledValue(value, a, min, max) {
	    var amount = a;
	    var diff = value - min;
	    var range = max - min + 1;
	    amount %= range;
	    return min + (diff + amount + range) % range;
	  },

	  /*
	   * Adds a signed amount to the specified calendar field without changing larger fields.
	   * A negative roll amount means to subtract from field without changing
	   * larger fields. If the specified amount is 0, this method performs nothing.
	   *
	   *
	   *
	   *      @example
	   *      const d = new GregorianCalendar();
	   *      d.set(1999, GregorianCalendar.AUGUST, 31);
	   *      // 1999-4-30
	   *      // Tuesday June 1, 1999
	   *      d.set(1999, GregorianCalendar.JUNE, 1);
	   *      d.add(Gregorian.WEEK_OF_MONTH,-1); // === d.add(Gregorian.WEEK_OF_MONTH,
	   *      d.get(Gregorian.WEEK_OF_MONTH));
	   *      // 1999-06-29
	   *
	   *
	   * @param field the calendar field.
	   * @param {Number} amount the signed amount to add to field.
	   */
	  roll: function roll(field, amount) {
	    if (!amount) {
	      return;
	    }
	    var self = this;
	    // computer and retrieve original value
	    var value = self.get(field);
	    var min = self.getActualMinimum(field);
	    var max = self.getActualMaximum(field);
	    value = self.getRolledValue(value, amount, min, max);

	    self.set(field, value);

	    // consider compute time priority
	    switch (field) {
	      case MONTH:
	        adjustDayOfMonth(self);
	        break;
	      default:
	        // other fields are set already when get
	        self.updateFieldsBySet(field);
	        break;
	    }
	  },

	  /*
	   * keep field stable.
	   *
	   * 2015-09-29 setMonth 2 vs rollSetMonth 2
	   *
	   */
	  rollSet: function rollSet(field, v) {
	    this.set(field, v);
	    switch (field) {
	      case MONTH:
	        adjustDayOfMonth(this);
	        break;
	      default:
	        // other fields are set already when get
	        this.updateFieldsBySet(field);
	        break;
	    }
	  },

	  /*
	   * roll the year of the given calendar field.
	   * @method rollYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the month of the given calendar field.
	   * @param {Number} amount the signed amount to add to field.
	   * @method rollMonth
	   */

	  /*
	   * roll the day of month of the given calendar field.
	   * @method rollDayOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the hour of day of the given calendar field.
	   * @method rollHourOfDay
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the minute of the given calendar field.
	   * @method rollMinute
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the second of the given calendar field.
	   * @method rollSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the millisecond of the given calendar field.
	   * @method rollMilliSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the week of year of the given calendar field.
	   * @method rollWeekOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the week of month of the given calendar field.
	   * @method rollWeekOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the day of year of the given calendar field.
	   * @method rollDayOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the day of week of the given calendar field.
	   * @method rollDayOfWeek
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * remove other priority fields when call getFixedDate
	   * precondition: other fields are all set or computed
	   * @protected
	   */
	  updateFieldsBySet: function updateFieldsBySet(field) {
	    var fields = this.fields;
	    switch (field) {
	      case WEEK_OF_MONTH:
	        fields[DAY_OF_MONTH] = undefined;
	        break;
	      case DAY_OF_YEAR:
	        fields[MONTH] = undefined;
	        break;
	      case DAY_OF_WEEK:
	        fields[DAY_OF_MONTH] = undefined;
	        break;
	      case WEEK_OF_YEAR:
	        fields[DAY_OF_YEAR] = undefined;
	        fields[MONTH] = undefined;
	        break;
	      default:
	        break;
	    }
	  },

	  /*
	   * get current date instance's timezone offset
	   * @returns {Number}
	   */
	  getTimezoneOffset: function getTimezoneOffset() {
	    return this.timezoneOffset;
	  },

	  /*
	   * set current date instance's timezone offset
	   */
	  setTimezoneOffset: function setTimezoneOffset(timezoneOffset) {
	    if (this.timezoneOffset !== timezoneOffset) {
	      this.fieldsComputed = undefined;
	      this.timezoneOffset = timezoneOffset;
	    }
	  },

	  /*
	   * set first day of week for current date instance
	   */
	  setFirstDayOfWeek: function setFirstDayOfWeek(firstDayOfWeek) {
	    if (this.firstDayOfWeek !== firstDayOfWeek) {
	      this.firstDayOfWeek = firstDayOfWeek;
	      this.fieldsComputed = false;
	    }
	  },

	  /*
	   * Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
	   * @returns {Number} the first day of the week.
	   */
	  getFirstDayOfWeek: function getFirstDayOfWeek() {
	    return this.firstDayOfWeek;
	  },

	  /*
	   * Sets what the minimal days required in the first week of the year are; For example,
	   * if the first week is defined as one that contains the first day of the first month of a year,
	   * call this method with value 1.
	   * If it must be a full week, use value 7.
	   * @param minimalDaysInFirstWeek the given minimal days required in the first week of the year.
	   */
	  setMinimalDaysInFirstWeek: function setMinimalDaysInFirstWeek(minimalDaysInFirstWeek) {
	    if (this.minimalDaysInFirstWeek !== minimalDaysInFirstWeek) {
	      this.minimalDaysInFirstWeek = minimalDaysInFirstWeek;
	      this.fieldsComputed = false;
	    }
	  },

	  /*
	   * Gets what the minimal days required in the first week of the year are; e.g.,
	   * if the first week is defined as one that contains the first day of the first month of a year,
	   * this method returns 1.
	   * If the minimal days required must be a full week, this method returns 7.
	   * @returns {Number} the minimal days required in the first week of the year.
	   */
	  getMinimalDaysInFirstWeek: function getMinimalDaysInFirstWeek() {
	    return this.minimalDaysInFirstWeek;
	  },

	  /*
	   * Returns the number of weeks in the week year
	   * represented by this GregorianCalendar.
	   *
	   * For example, if this GregorianCalendar's date is
	   * December 31, 2008 with the ISO
	   * 8601 compatible setting, this method will return 53 for the
	   * period: December 29, 2008 to January 3, 2010
	   * while getActualMaximum(WEEK_OF_YEAR) will return
	   * 52 for the period: December 31, 2007 to December 28, 2008.
	   *
	   * @return {Number} the number of weeks in the week year.
	   */
	  getWeeksInWeekYear: function getWeeksInWeekYear() {
	    var weekYear = this.getWeekYear();
	    if (weekYear === this.get(YEAR)) {
	      return this.getActualMaximum(WEEK_OF_YEAR);
	    }
	    // Use the 2nd week for calculating the max of WEEK_OF_YEAR
	    var gc = this.clone();
	    gc.clear();
	    gc.setWeekDate(weekYear, 2, this.get(DAY_OF_WEEK));
	    return gc.getActualMaximum(WEEK_OF_YEAR);
	  },

	  /*
	   * Returns the week year represented by this GregorianCalendar.
	   * The dates in the weeks between 1 and the
	   * maximum week number of the week year have the same week year value
	   * that may be one year before or after the calendar year value.
	   *
	   * @return {Number} the week year represented by this GregorianCalendar.
	   */
	  getWeekYear: function getWeekYear() {
	    var year = this.get(YEAR); // implicitly  complete
	    var weekOfYear = this.get(WEEK_OF_YEAR);
	    var month = this.get(MONTH);
	    if (month === GregorianCalendar.JANUARY) {
	      if (weekOfYear >= 52) {
	        --year;
	      }
	    } else if (month === GregorianCalendar.DECEMBER) {
	      if (weekOfYear === 1) {
	        ++year;
	      }
	    }
	    return year;
	  },
	  /*
	   * Sets this GregorianCalendar to the date given by the date specifiers - weekYear,
	   * weekOfYear, and dayOfWeek. weekOfYear follows the WEEK_OF_YEAR numbering.
	   * The dayOfWeek value must be one of the DAY_OF_WEEK values: SUNDAY to SATURDAY.
	   *
	   * @param weekYear    the week year
	   * @param weekOfYear  the week number based on weekYear
	   * @param dayOfWeek   the day of week value
	   */
	  setWeekDate: function setWeekDate(weekYear, weekOfYear, dayOfWeek) {
	    if (dayOfWeek < GregorianCalendar.SUNDAY || dayOfWeek > GregorianCalendar.SATURDAY) {
	      throw new Error('invalid dayOfWeek: ' + dayOfWeek);
	    }
	    var fields = this.fields;
	    // To avoid changing the time of day fields by date
	    // calculations, use a clone with the GMT time zone.
	    var gc = this.clone();
	    gc.clear();
	    gc.setTimezoneOffset(0);
	    gc.set(YEAR, weekYear);
	    gc.set(WEEK_OF_YEAR, 1);
	    gc.set(DAY_OF_WEEK, this.getFirstDayOfWeek());
	    var days = dayOfWeek - this.getFirstDayOfWeek();
	    if (days < 0) {
	      days += 7;
	    }
	    days += 7 * (weekOfYear - 1);
	    if (days !== 0) {
	      gc.add(DAY_OF_YEAR, days);
	    } else {
	      gc.complete();
	    }
	    fields[YEAR] = gc.get(YEAR);
	    fields[MONTH] = gc.get(MONTH);
	    fields[DAY_OF_MONTH] = gc.get(DAY_OF_MONTH);
	    this.complete();
	  },
	  /*
	   * Creates and returns a copy of this object.
	   * @returns {Date.Gregorian}
	   */
	  clone: function clone() {
	    if (this.time === undefined) {
	      this.computeTime();
	    }
	    var cal = new GregorianCalendar(this.locale);
	    cal.setTimezoneOffset(cal.getTimezoneOffset());
	    cal.setFirstDayOfWeek(cal.getFirstDayOfWeek());
	    cal.setMinimalDaysInFirstWeek(cal.getMinimalDaysInFirstWeek());
	    cal.setTime(this.time);
	    return cal;
	  },

	  /*
	   * Compares this GregorianCalendar to the specified Object.
	   * The result is true if and only if the argument is a GregorianCalendar object
	   * that represents the same time value (millisecond offset from the Epoch)
	   * under the same Calendar parameters and Gregorian change date as this object.
	   * @param {Date.Gregorian} obj the object to compare with.
	   * @returns {boolean} true if this object is equal to obj; false otherwise.
	   */
	  equals: function equals(obj) {
	    return this.getTime() === obj.getTime() && this.firstDayOfWeek === obj.firstDayOfWeek && this.timezoneOffset === obj.timezoneOffset && this.minimalDaysInFirstWeek === obj.minimalDaysInFirstWeek;
	  },

	  compareToDay: function compareToDay(d2) {
	    var d1Year = this.getYear();
	    var d2Year = d2.getYear();
	    var d1Month = this.getMonth();
	    var d2Month = d2.getMonth();
	    var d1Day = this.getDayOfMonth();
	    var d2Day = d2.getDayOfMonth();
	    if (d1Year !== d2Year) {
	      return d1Year - d2Year;
	    }
	    if (d1Month !== d2Month) {
	      return d1Month - d2Month;
	    }
	    return d1Day - d2Day;
	  },

	  /*
	   * Sets all the calendar field values or specified field and the time value
	   * (millisecond offset from the Epoch) of this Calendar undefined.
	   * This means that isSet() will return false for all the calendar fields,
	   * and the date and time calculations will treat the fields as if they had never been set.
	   * @param [field] the calendar field to be cleared.
	   */
	  clear: function clear(field) {
	    if (field === undefined) {
	      this.field = [];
	    } else {
	      this.fields[field] = undefined;
	    }
	    this.time = undefined;
	    this.fieldsComputed = false;
	  },

	  toString: function toString() {
	    // for debug
	    var v = this;
	    return '[GregorianCalendar]: ' + v.getYear() + '/' + v.getMonth() + '/' + v.getDayOfMonth() + ' ' + v.getHourOfDay() + ':' + v.getMinutes() + ':' + v.getSeconds();
	  }
	};

	var GregorianCalendarProto = GregorianCalendar.prototype;

	Utils.each(FIELDS, function (f, index) {
	  if (f) {
	    GregorianCalendarProto['get' + f] = function get() {
	      return this.get(index);
	    };

	    GregorianCalendarProto['isSet' + f] = function isSet() {
	      return this.isSet(index);
	    };

	    GregorianCalendarProto['set' + f] = function set(v) {
	      return this.set(index, v);
	    };

	    GregorianCalendarProto['add' + f] = function add(v) {
	      return this.add(index, v);
	    };

	    GregorianCalendarProto['roll' + f] = function roll(v) {
	      return this.roll(index, v);
	    };

	    GregorianCalendarProto['rollSet' + f] = function rollSet(v) {
	      return this.rollSet(index, v);
	    };
	  }
	});

	module.exports = GregorianCalendar;
	/*
	 http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html

	 TODO
	 - day saving time
	 - i18n
	 - julian calendar
	 */

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * utils for gregorian date
	 * @ignore
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	var Const = __webpack_require__(310);
	var floor = Math.floor;
	var ACCUMULATED_DAYS_IN_MONTH
	//   1/1 2/1 3/1 4/1 5/1 6/1 7/1 8/1 9/1 10/1 11/1 12/1
	= [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];

	var ACCUMULATED_DAYS_IN_MONTH_LEAP
	//   1/1 2/1   3/1   4/1   5/1   6/1   7/1   8/1   9/1
	// 10/1   11/1   12/1
	= [0, 31, 59 + 1, 90 + 1, 120 + 1, 151 + 1, 181 + 1, 212 + 1, 243 + 1, 273 + 1, 304 + 1, 334 + 1];

	var DAYS_OF_YEAR = 365;
	var DAYS_OF_4YEAR = 365 * 4 + 1;
	var DAYS_OF_100YEAR = DAYS_OF_4YEAR * 25 - 1;
	var DAYS_OF_400YEAR = DAYS_OF_100YEAR * 4 + 1;
	var _exports = {};

	function getDayOfYear(year, month, dayOfMonth) {
	  return dayOfMonth + (_exports.isLeapYear(year) ? ACCUMULATED_DAYS_IN_MONTH_LEAP[month] : ACCUMULATED_DAYS_IN_MONTH[month]);
	}

	function getDayOfWeekFromFixedDate(fixedDate) {
	  // The fixed day 1 (January 1, 1 Gregorian) is Monday.
	  if (fixedDate >= 0) {
	    return fixedDate % 7;
	  }
	  return _exports.mod(fixedDate, 7);
	}

	function getGregorianYearFromFixedDate(fixedDate) {
	  var d0 = undefined;
	  var d1 = undefined;
	  var d2 = undefined;
	  var d3 = undefined;
	  var n400 = undefined;
	  var n100 = undefined;
	  var n4 = undefined;
	  var n1 = undefined;
	  var year = undefined;
	  d0 = fixedDate - 1;

	  n400 = floor(d0 / DAYS_OF_400YEAR);
	  d1 = _exports.mod(d0, DAYS_OF_400YEAR);
	  n100 = floor(d1 / DAYS_OF_100YEAR);
	  d2 = _exports.mod(d1, DAYS_OF_100YEAR);
	  n4 = floor(d2 / DAYS_OF_4YEAR);
	  d3 = _exports.mod(d2, DAYS_OF_4YEAR);
	  n1 = floor(d3 / DAYS_OF_YEAR);

	  year = 400 * n400 + 100 * n100 + 4 * n4 + n1;

	  // ?
	  if (!(n100 === 4 || n1 === 4)) {
	    ++year;
	  }

	  return year;
	}

	_exports = module.exports = {
	  each: function each(arr, fn) {
	    for (var i = 0, len = arr.length; i < len; i++) {
	      if (fn(arr[i], i, arr) === false) {
	        break;
	      }
	    }
	  },

	  mix: function mix(t, s) {
	    for (var p in s) {
	      if (s.hasOwnProperty(p)) {
	        t[p] = s[p];
	      }
	    }
	  },

	  isLeapYear: function isLeapYear(year) {
	    if ((year & 3) !== 0) {
	      return false;
	    }
	    return year % 100 !== 0 || year % 400 === 0;
	  },

	  mod: function mod(x, y) {
	    // 负数时不是镜像关系
	    return x - y * floor(x / y);
	  },

	  // month: 0 based
	  getFixedDate: function getFixedDate(year, month, dayOfMonth) {
	    var prevYear = year - 1;
	    // 考虑公元前
	    return DAYS_OF_YEAR * prevYear + floor(prevYear / 4) - floor(prevYear / 100) + floor(prevYear / 400) + getDayOfYear(year, month, dayOfMonth);
	  },

	  getGregorianDateFromFixedDate: function getGregorianDateFromFixedDate(fixedDate) {
	    var year = getGregorianYearFromFixedDate(fixedDate);
	    var jan1 = _exports.getFixedDate(year, Const.JANUARY, 1);
	    var isLeap = _exports.isLeapYear(year);
	    var ACCUMULATED_DAYS = isLeap ? ACCUMULATED_DAYS_IN_MONTH_LEAP : ACCUMULATED_DAYS_IN_MONTH;
	    var daysDiff = fixedDate - jan1;
	    var month = undefined;

	    for (var i = 0; i < ACCUMULATED_DAYS.length; i++) {
	      if (ACCUMULATED_DAYS[i] <= daysDiff) {
	        month = i;
	      } else {
	        break;
	      }
	    }

	    var dayOfMonth = fixedDate - jan1 - ACCUMULATED_DAYS[month] + 1;
	    var dayOfWeek = getDayOfWeekFromFixedDate(fixedDate);

	    return {
	      year: year,
	      month: month,
	      dayOfMonth: dayOfMonth,
	      dayOfWeek: dayOfWeek,
	      isLeap: isLeap
	    };
	  }
	};

/***/ },
/* 310 */
/***/ function(module, exports) {

	/*
	 * @ignore
	 * const for gregorian date
	 * @author yiminghe@gmail.com
	 */

	"use strict";

	module.exports = {
	  /*
	   * Enum indicating sunday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  SUNDAY: 0,
	  /*
	   * Enum indicating monday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  MONDAY: 1,
	  /*
	   * Enum indicating tuesday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  TUESDAY: 2,
	  /*
	   * Enum indicating wednesday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  WEDNESDAY: 3,
	  /*
	   * Enum indicating thursday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  THURSDAY: 4,
	  /*
	   * Enum indicating friday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  FRIDAY: 5,
	  /*
	   * Enum indicating saturday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  SATURDAY: 6,
	  /*
	   * Enum indicating january
	   * @type Number
	   * @member Date.Gregorian
	   */
	  JANUARY: 0,
	  /*
	   * Enum indicating february
	   * @type Number
	   * @member Date.Gregorian
	   */
	  FEBRUARY: 1,
	  /*
	   * Enum indicating march
	   * @type Number
	   * @member Date.Gregorian
	   */
	  MARCH: 2,
	  /*
	   * Enum indicating april
	   * @type Number
	   * @member Date.Gregorian
	   */
	  APRIL: 3,
	  /*
	   * Enum indicating may
	   * @type Number
	   * @member Date.Gregorian
	   */
	  MAY: 4,
	  /*
	   * Enum indicating june
	   * @type Number
	   * @member Date.Gregorian
	   */
	  JUNE: 5,
	  /*
	   * Enum indicating july
	   * @type Number
	   * @member Date.Gregorian
	   */
	  JULY: 6,
	  /*
	   * Enum indicating august
	   * @type Number
	   * @member Date.Gregorian
	   */
	  AUGUST: 7,
	  /*
	   * Enum indicating september
	   * @type Number
	   * @member Date.Gregorian
	   */
	  SEPTEMBER: 8,
	  /*
	   * Enum indicating october
	   * @type Number
	   * @member Date.Gregorian
	   */
	  OCTOBER: 9,
	  /*
	   * Enum indicating november
	   * @type Number
	   * @member Date.Gregorian
	   */
	  NOVEMBER: 10,
	  /*
	   * Enum indicating december
	   * @type Number
	   * @member Date.Gregorian
	   */
	  DECEMBER: 11
	};

/***/ },
/* 311 */
/***/ function(module, exports) {

	/*
	 * en-us locale
	 * @ignore
	 * @author yiminghe@gmail.com
	 */
	"use strict";

	module.exports = {
	  // in minutes
	  timezoneOffset: -8 * 60,
	  firstDayOfWeek: 0,
	  minimalDaysInFirstWeek: 1
	};

/***/ },
/* 312 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  eras: ['BC', 'AD'],
	  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	  weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	  shortWeekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	  veryShortWeekdays: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	  ampms: ['AM', 'PM'],
	  datePatterns: ['EEEE, MMMM d, yyyy', 'MMMM d, yyyy', 'MMM d, yyyy', 'M/d/yy'],
	  timePatterns: ['h:mm:ss a \'GMT\'Z', 'h:mm:ss a', 'h:mm:ss a', 'h:mm a'],
	  dateTimePattern: '{date} {time}'
	};

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _createChainedFunction = __webpack_require__(117);

	var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _placements = __webpack_require__(314);

	var _placements2 = _interopRequireDefault(_placements);

	var _rcTrigger = __webpack_require__(137);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	function refFn(field, component) {
	  this[field] = component;
	}

	var Picker = _react2["default"].createClass({
	  displayName: 'Picker',

	  propTypes: {
	    animation: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	    disabled: _react.PropTypes.bool,
	    transitionName: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onOpen: _react.PropTypes.func,
	    onClose: _react.PropTypes.func,
	    children: _react.PropTypes.func,
	    getCalendarContainer: _react.PropTypes.func,
	    calendar: _react.PropTypes.element,
	    style: _react.PropTypes.object,
	    open: _react.PropTypes.bool,
	    defaultOpen: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    placement: _react.PropTypes.any,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
	    defaultValue: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
	    align: _react.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-calendar-picker',
	      style: {},
	      align: {},
	      placement: 'bottomLeft',
	      defaultOpen: false,
	      onChange: noop,
	      onOpen: noop,
	      onClose: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var open = void 0;
	    if ('open' in props) {
	      open = props.open;
	    } else {
	      open = props.defaultOpen;
	    }
	    var value = props.value || props.defaultValue;
	    this.saveCalendarRef = refFn.bind(this, 'calendarInstance');
	    return {
	      open: open,
	      value: value
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    var open = nextProps.open;

	    if ('value' in nextProps) {
	      this.setState({
	        value: value
	      });
	    }
	    if (open !== undefined) {
	      this.setState({
	        open: open
	      });
	    }
	  },
	  onCalendarKeyDown: function onCalendarKeyDown(event) {
	    if (event.keyCode === _KeyCode2["default"].ESC) {
	      event.stopPropagation();
	      this.close(this.focus);
	    }
	  },
	  onCalendarSelect: function onCalendarSelect(value) {
	    var cause = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var props = this.props;
	    if (!('value' in props)) {
	      this.setState({
	        value: value
	      });
	    }
	    if (cause.source === 'keyboard' || !props.calendar.props.timePicker && cause.source !== 'dateInput' || cause.source === 'todayButton') {
	      this.close(this.focus);
	    }
	    props.onChange(value);
	  },
	  onKeyDown: function onKeyDown(event) {
	    if (event.keyCode === _KeyCode2["default"].DOWN && !this.state.open) {
	      this.open(this.focusCalendar);
	      event.preventDefault();
	    }
	  },
	  onCalendarOk: function onCalendarOk() {
	    this.close(this.focus);
	  },
	  onCalendarClear: function onCalendarClear() {
	    this.close(this.focus);
	  },
	  onVisibleChange: function onVisibleChange(open) {
	    this.setOpen(open, this.focusCalendar);
	  },
	  getCalendarElement: function getCalendarElement() {
	    var props = this.props;
	    var state = this.state;
	    var calendarProp = props.calendar;
	    var value = state.value;

	    var defaultValue = void 0;
	    // RangeCalendar
	    if (Array.isArray(value)) {
	      defaultValue = value[0];
	    } else {
	      defaultValue = value;
	    }
	    var extraProps = {
	      ref: this.saveCalendarRef,
	      defaultValue: defaultValue || calendarProp.props.defaultValue,
	      defaultSelectedValue: value,
	      onKeyDown: this.onCalendarKeyDown,
	      onOk: (0, _createChainedFunction2["default"])(calendarProp.props.onOk, this.onCalendarOk),
	      onSelect: (0, _createChainedFunction2["default"])(calendarProp.props.onSelect, this.onCalendarSelect),
	      onClear: (0, _createChainedFunction2["default"])(calendarProp.props.onClear, this.onCalendarClear)
	    };

	    return _react2["default"].cloneElement(calendarProp, extraProps);
	  },
	  setOpen: function setOpen(open, callback) {
	    var _props = this.props;
	    var onOpen = _props.onOpen;
	    var onClose = _props.onClose;

	    if (this.state.open !== open) {
	      this.setState({
	        open: open
	      }, callback);
	      var event = {
	        open: open
	      };
	      if (open) {
	        onOpen(event);
	      } else {
	        onClose(event);
	      }
	    }
	  },
	  open: function open(callback) {
	    this.setOpen(true, callback);
	  },
	  close: function close(callback) {
	    this.setOpen(false, callback);
	  },
	  focus: function focus() {
	    if (!this.state.open) {
	      _reactDom2["default"].findDOMNode(this).focus();
	    }
	  },
	  focusCalendar: function focusCalendar() {
	    if (this.state.open) {
	      this.calendarInstance.focus();
	    }
	  },
	  render: function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var placement = props.placement;
	    var style = props.style;
	    var getCalendarContainer = props.getCalendarContainer;
	    var align = props.align;
	    var animation = props.animation;
	    var disabled = props.disabled;
	    var transitionName = props.transitionName;
	    var children = props.children;

	    var state = this.state;
	    return _react2["default"].createElement(
	      _rcTrigger2["default"],
	      {
	        popup: this.getCalendarElement(),
	        popupAlign: align,
	        builtinPlacements: _placements2["default"],
	        popupPlacement: placement,
	        action: disabled && !state.open ? [] : ['click'],
	        destroyPopupOnHide: true,
	        getPopupContainer: getCalendarContainer,
	        popupStyle: style,
	        popupAnimation: animation,
	        popupTransitionName: transitionName,
	        popupVisible: state.open,
	        onPopupVisibleChange: this.onVisibleChange,
	        prefixCls: prefixCls
	      },
	      _react2["default"].cloneElement(children(state, props), { onKeyDown: this.onKeyDown })
	    );
	  }
	});

	exports["default"] = Picker;
	module.exports = exports['default'];

/***/ },
/* 314 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = {
	  bottomLeft: {
	    points: ['tl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  }
	};

	exports["default"] = placements;
	module.exports = exports['default'];

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _mixinCommonMixin = __webpack_require__(316);

	var _mixinCommonMixin2 = _interopRequireDefault(_mixinCommonMixin);

	var _Header = __webpack_require__(318);

	var _Header2 = _interopRequireDefault(_Header);

	var _Combobox = __webpack_require__(320);

	var _Combobox2 = _interopRequireDefault(_Combobox);

	function noop() {}

	function generateOptions(length, disabledOptions, hideDisabledOptions) {
	  var arr = [];
	  for (var value = 0; value < length; value++) {
	    if (!disabledOptions || disabledOptions.indexOf(value) < 0 || !hideDisabledOptions) {
	      arr.push(value);
	    }
	  }
	  return arr;
	}

	var Panel = _react2['default'].createClass({
	  displayName: 'Panel',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    value: _react.PropTypes.object,
	    locale: _react.PropTypes.object,
	    placeholder: _react.PropTypes.string,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    formatter: _react.PropTypes.object,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    hideDisabledOptions: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func,
	    onEsc: _react.PropTypes.func,
	    allowEmpty: _react.PropTypes.bool,
	    showHour: _react.PropTypes.bool,
	    showSecond: _react.PropTypes.bool,
	    onClear: _react.PropTypes.func
	  },

	  mixins: [_mixinCommonMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-time-picker-panel',
	      onChange: noop,
	      onClear: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      value: this.props.value,
	      selectionRange: []
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    if (value) {
	      this.setState({
	        value: value
	      });
	    }
	  },

	  onChange: function onChange(newValue) {
	    this.setState({ value: newValue });
	    this.props.onChange(newValue);
	  },

	  onClear: function onClear() {
	    this.props.onClear();
	  },

	  onCurrentSelectPanelChange: function onCurrentSelectPanelChange(currentSelectPanel) {
	    this.setState({ currentSelectPanel: currentSelectPanel });
	  },

	  render: function render() {
	    var _props = this.props;
	    var locale = _props.locale;
	    var prefixCls = _props.prefixCls;
	    var placeholder = _props.placeholder;
	    var disabledHours = _props.disabledHours;
	    var disabledMinutes = _props.disabledMinutes;
	    var disabledSeconds = _props.disabledSeconds;
	    var hideDisabledOptions = _props.hideDisabledOptions;
	    var allowEmpty = _props.allowEmpty;
	    var showHour = _props.showHour;
	    var showSecond = _props.showSecond;
	    var formatter = _props.formatter;
	    var gregorianCalendarLocale = _props.gregorianCalendarLocale;

	    var value = this.state.value;
	    var disabledHourOptions = disabledHours();
	    var disabledMinuteOptions = disabledMinutes(value ? value.getHourOfDay() : null);
	    var disabledSecondOptions = disabledSeconds(value ? value.getHourOfDay() : null, value ? value.getMinutes() : null);
	    var hourOptions = generateOptions(24, disabledHourOptions, hideDisabledOptions);
	    var minuteOptions = generateOptions(60, disabledMinuteOptions, hideDisabledOptions);
	    var secondOptions = generateOptions(60, disabledSecondOptions, hideDisabledOptions);

	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-inner' },
	      _react2['default'].createElement(_Header2['default'], {
	        prefixCls: prefixCls,
	        gregorianCalendarLocale: gregorianCalendarLocale,
	        locale: locale,
	        value: value,
	        currentSelectPanel: this.state.currentSelectPanel,
	        onEsc: this.props.onEsc,
	        formatter: formatter,
	        placeholder: placeholder,
	        hourOptions: hourOptions,
	        minuteOptions: minuteOptions,
	        secondOptions: secondOptions,
	        disabledHours: disabledHours,
	        disabledMinutes: disabledMinutes,
	        disabledSeconds: disabledSeconds,
	        onChange: this.onChange,
	        onClear: this.onClear,
	        allowEmpty: allowEmpty
	      }),
	      _react2['default'].createElement(_Combobox2['default'], {
	        prefixCls: prefixCls,
	        value: value,
	        gregorianCalendarLocale: gregorianCalendarLocale,
	        formatter: formatter,
	        onChange: this.onChange,
	        showHour: showHour,
	        showSecond: showSecond,
	        hourOptions: hourOptions,
	        minuteOptions: minuteOptions,
	        secondOptions: secondOptions,
	        disabledHours: disabledHours,
	        disabledMinutes: disabledMinutes,
	        disabledSeconds: disabledSeconds,
	        onCurrentSelectPanelChange: this.onCurrentSelectPanelChange
	      })
	    );
	  }
	});

	exports['default'] = Panel;
	module.exports = exports['default'];

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(7);

	var _localeEn_US = __webpack_require__(317);

	var _localeEn_US2 = _interopRequireDefault(_localeEn_US);

	exports['default'] = {
	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    locale: _react.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      locale: _localeEn_US2['default']
	    };
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _gregorianCalendarFormatLibLocaleEn_US = __webpack_require__(312);

	var _gregorianCalendarFormatLibLocaleEn_US2 = _interopRequireDefault(_gregorianCalendarFormatLibLocaleEn_US);

	var _gregorianCalendarLibLocaleEn_US = __webpack_require__(311);

	var _gregorianCalendarLibLocaleEn_US2 = _interopRequireDefault(_gregorianCalendarLibLocaleEn_US);

	exports['default'] = {
	  clear: 'Clear',
	  format: _gregorianCalendarFormatLibLocaleEn_US2['default'],
	  calendar: _gregorianCalendarLibLocaleEn_US2['default']
	};
	module.exports = exports['default'];

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _utilSelection = __webpack_require__(319);

	var _utilSelection2 = _interopRequireDefault(_utilSelection);

	var Header = _react2['default'].createClass({
	  displayName: 'Header',

	  propTypes: {
	    formatter: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    locale: _react.PropTypes.object,
	    disabledDate: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    value: _react.PropTypes.object,
	    hourOptions: _react.PropTypes.array,
	    minuteOptions: _react.PropTypes.array,
	    secondOptions: _react.PropTypes.array,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    onClear: _react.PropTypes.func,
	    onEsc: _react.PropTypes.func,
	    allowEmpty: _react.PropTypes.bool,
	    currentSelectPanel: _react.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    var value = this.props.value;
	    return {
	      str: value && this.props.formatter.format(value) || '',
	      invalid: false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this.timer = setTimeout(this.selectRange, 0);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    this.setState({
	      str: value && nextProps.formatter.format(value) || '',
	      invalid: false
	    });
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this.timer = setTimeout(this.selectRange, 0);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.timer);
	  },

	  onInputChange: function onInputChange(event) {
	    var str = event.target.value;
	    this.setState({
	      str: str
	    });
	    var value = null;
	    var _props = this.props;
	    var formatter = _props.formatter;
	    var gregorianCalendarLocale = _props.gregorianCalendarLocale;
	    var hourOptions = _props.hourOptions;
	    var minuteOptions = _props.minuteOptions;
	    var secondOptions = _props.secondOptions;
	    var disabledHours = _props.disabledHours;
	    var disabledMinutes = _props.disabledMinutes;
	    var disabledSeconds = _props.disabledSeconds;
	    var onChange = _props.onChange;
	    var allowEmpty = _props.allowEmpty;

	    if (str) {
	      var originalValue = this.props.value;
	      try {
	        value = formatter.parse(str, {
	          locale: gregorianCalendarLocale,
	          obeyCount: true
	        });
	      } catch (ex) {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }

	      if (value) {
	        // if time value not allowed, response warning.
	        if (hourOptions.indexOf(value.getHourOfDay()) < 0 || minuteOptions.indexOf(value.getMinutes()) < 0 || secondOptions.indexOf(value.getSeconds()) < 0) {
	          this.setState({
	            invalid: true
	          });
	          return;
	        }

	        // if time value is disabled, response warning.
	        var disabledHourOptions = disabledHours();
	        var disabledMinuteOptions = disabledMinutes(value.getHourOfDay());
	        var disabledSecondOptions = disabledSeconds(value.getHourOfDay(), value.getMinutes());
	        if (disabledHourOptions && disabledHourOptions.indexOf(value.getHourOfDay()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(value.getMinutes()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(value.getSeconds()) >= 0) {
	          this.setState({
	            invalid: true
	          });
	          return;
	        }

	        if (originalValue && value) {
	          if (originalValue.getHourOfDay() !== value.getHourOfDay() || originalValue.getMinutes() !== value.getMinutes() || originalValue.getSeconds() !== value.getSeconds()) {
	            // keep other fields for rc-calendar
	            var changedValue = originalValue.clone();
	            changedValue.setHourOfDay(value.getHourOfDay());
	            changedValue.setMinutes(value.getMinutes());
	            changedValue.setSeconds(value.getSeconds());
	            onChange(changedValue);
	          }
	        } else if (originalValue !== value) {
	          onChange(value);
	        }
	      } else {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }
	    } else if (allowEmpty) {
	      onChange(null);
	    } else {
	      this.setState({
	        invalid: true
	      });
	      return;
	    }

	    this.setState({
	      invalid: false
	    });
	  },

	  onKeyDown: function onKeyDown(e) {
	    if (e.keyCode === 27) {
	      this.props.onEsc();
	    }
	  },

	  onClear: function onClear() {
	    this.setState({ str: '' });
	    this.props.onClear();
	  },

	  getClearButton: function getClearButton() {
	    var _props2 = this.props;
	    var locale = _props2.locale;
	    var prefixCls = _props2.prefixCls;
	    var allowEmpty = _props2.allowEmpty;

	    if (!allowEmpty) {
	      return null;
	    }
	    return _react2['default'].createElement('a', { className: prefixCls + '-clear-btn', role: 'button', title: locale.clear, onMouseDown: this.onClear });
	  },

	  getInput: function getInput() {
	    var _props3 = this.props;
	    var prefixCls = _props3.prefixCls;
	    var placeholder = _props3.placeholder;
	    var _state = this.state;
	    var invalid = _state.invalid;
	    var str = _state.str;

	    var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
	    return _react2['default'].createElement('input', {
	      className: prefixCls + '-input  ' + invalidClass,
	      ref: 'input',
	      onKeyDown: this.onKeyDown,
	      value: str,
	      placeholder: placeholder, onChange: this.onInputChange
	    });
	  },

	  selectRange: function selectRange() {
	    this.refs.input.select();
	    if (this.props.currentSelectPanel && this.refs.input.value) {
	      var selectionRangeStart = 0;
	      var selectionRangeEnd = 0;
	      if (this.props.currentSelectPanel === 'hour') {
	        selectionRangeStart = 0;
	        selectionRangeEnd = this.refs.input.value.indexOf(':');
	      } else if (this.props.currentSelectPanel === 'minute') {
	        selectionRangeStart = this.refs.input.value.indexOf(':') + 1;
	        selectionRangeEnd = this.refs.input.value.lastIndexOf(':');
	      } else if (this.props.currentSelectPanel === 'second') {
	        selectionRangeStart = this.refs.input.value.lastIndexOf(':') + 1;
	        selectionRangeEnd = this.refs.input.value.length;
	      }
	      if (selectionRangeEnd - selectionRangeStart === 2) {
	        (0, _utilSelection2['default'])(this.refs.input, selectionRangeStart, selectionRangeEnd);
	      }
	    }
	  },

	  render: function render() {
	    var prefixCls = this.props.prefixCls;

	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-input-wrap' },
	      this.getInput(),
	      this.getClearButton()
	    );
	  }
	});

	exports['default'] = Header;
	module.exports = exports['default'];

/***/ },
/* 319 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = createSelection;

	function createSelection(field, start, end) {
	  if (field.createTextRange) {
	    var selRange = field.createTextRange();
	    selRange.collapse(true);
	    selRange.moveStart('character', start);
	    selRange.moveEnd('character', end);
	    selRange.select();
	    field.focus();
	  } else if (field.setSelectionRange) {
	    field.focus();
	    field.setSelectionRange(start, end);
	  } else if (typeof field.selectionStart !== 'undefined') {
	    field.selectionStart = start;
	    field.selectionEnd = end;
	    field.focus();
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _Select = __webpack_require__(321);

	var _Select2 = _interopRequireDefault(_Select);

	var _gregorianCalendar = __webpack_require__(308);

	var _gregorianCalendar2 = _interopRequireDefault(_gregorianCalendar);

	var formatOption = function formatOption(option, disabledOptions) {
	  var value = '' + option;
	  if (option < 10) {
	    value = '0' + option;
	  }

	  var disabled = false;
	  if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
	    disabled = true;
	  }

	  return {
	    value: value,
	    disabled: disabled
	  };
	};

	var Combobox = _react2['default'].createClass({
	  displayName: 'Combobox',

	  propTypes: {
	    formatter: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    value: _react.PropTypes.object,
	    onChange: _react.PropTypes.func,
	    showHour: _react.PropTypes.bool,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    showSecond: _react.PropTypes.bool,
	    hourOptions: _react.PropTypes.array,
	    minuteOptions: _react.PropTypes.array,
	    secondOptions: _react.PropTypes.array,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    onCurrentSelectPanelChange: _react.PropTypes.func
	  },

	  onItemChange: function onItemChange(type, itemValue) {
	    var onChange = this.props.onChange;

	    var value = this.props.value;
	    if (value) {
	      value = value.clone();
	    } else {
	      value = this.getNow().clone();
	    }
	    if (type === 'hour') {
	      value.setHourOfDay(itemValue);
	    } else if (type === 'minute') {
	      value.setMinutes(itemValue);
	    } else {
	      value.setSeconds(itemValue);
	    }
	    onChange(value);
	  },

	  onEnterSelectPanel: function onEnterSelectPanel(range) {
	    this.props.onCurrentSelectPanelChange(range);
	  },

	  getHourSelect: function getHourSelect(hour) {
	    var _props = this.props;
	    var prefixCls = _props.prefixCls;
	    var hourOptions = _props.hourOptions;
	    var disabledHours = _props.disabledHours;
	    var showHour = _props.showHour;

	    if (!showHour) {
	      return null;
	    }
	    var disabledOptions = disabledHours();

	    return _react2['default'].createElement(_Select2['default'], {
	      prefixCls: prefixCls,
	      options: hourOptions.map(function (option) {
	        return formatOption(option, disabledOptions);
	      }),
	      selectedIndex: hourOptions.indexOf(hour),
	      type: 'hour',
	      onSelect: this.onItemChange,
	      onMouseEnter: this.onEnterSelectPanel.bind(this, 'hour')
	    });
	  },

	  getMinuteSelect: function getMinuteSelect(minute) {
	    var _props2 = this.props;
	    var prefixCls = _props2.prefixCls;
	    var minuteOptions = _props2.minuteOptions;
	    var disabledMinutes = _props2.disabledMinutes;

	    var value = this.props.value || this.getNow();
	    var disabledOptions = disabledMinutes(value.getHourOfDay());

	    return _react2['default'].createElement(_Select2['default'], {
	      prefixCls: prefixCls,
	      options: minuteOptions.map(function (option) {
	        return formatOption(option, disabledOptions);
	      }),
	      selectedIndex: minuteOptions.indexOf(minute),
	      type: 'minute',
	      onSelect: this.onItemChange,
	      onMouseEnter: this.onEnterSelectPanel.bind(this, 'minute')
	    });
	  },

	  getSecondSelect: function getSecondSelect(second) {
	    var _props3 = this.props;
	    var prefixCls = _props3.prefixCls;
	    var secondOptions = _props3.secondOptions;
	    var disabledSeconds = _props3.disabledSeconds;
	    var showSecond = _props3.showSecond;

	    if (!showSecond) {
	      return null;
	    }
	    var value = this.props.value || this.getNow();
	    var disabledOptions = disabledSeconds(value.getHourOfDay(), value.getMinutes());

	    return _react2['default'].createElement(_Select2['default'], {
	      prefixCls: prefixCls,
	      options: secondOptions.map(function (option) {
	        return formatOption(option, disabledOptions);
	      }),
	      selectedIndex: secondOptions.indexOf(second),
	      type: 'second',
	      onSelect: this.onItemChange,
	      onMouseEnter: this.onEnterSelectPanel.bind(this, 'second')
	    });
	  },

	  getNow: function getNow() {
	    if (this.showNow) {
	      return this.showNow;
	    }
	    var value = new _gregorianCalendar2['default'](this.props.gregorianCalendarLocale);
	    value.setTime(Date.now());
	    this.showNow = value;
	    return value;
	  },

	  render: function render() {
	    var prefixCls = this.props.prefixCls;

	    var value = this.props.value || this.getNow();
	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-combobox' },
	      this.getHourSelect(value.getHourOfDay()),
	      this.getMinuteSelect(value.getMinutes()),
	      this.getSecondSelect(value.getSeconds())
	    );
	  }
	});

	exports['default'] = Combobox;
	module.exports = exports['default'];

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var scrollTo = function scrollTo(element, to, duration) {
	  var requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
	    return setTimeout(arguments[0], 10);
	  };
	  // jump to target if duration zero
	  if (duration <= 0) {
	    element.scrollTop = to;
	    return;
	  }
	  var difference = to - element.scrollTop;
	  var perTick = difference / duration * 10;

	  requestAnimationFrame(function () {
	    element.scrollTop = element.scrollTop + perTick;
	    if (element.scrollTop === to) return;
	    scrollTo(element, to, duration - 10);
	  });
	};

	var Select = _react2['default'].createClass({
	  displayName: 'Select',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    options: _react.PropTypes.array,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    selectedIndex: _react.PropTypes.number,
	    type: _react.PropTypes.string,
	    onSelect: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func
	  },

	  componentDidMount: function componentDidMount() {
	    // jump to selected option
	    this.scrollToSelected(0);
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    // smooth scroll to selected option
	    if (prevProps.selectedIndex !== this.props.selectedIndex) {
	      this.scrollToSelected(120);
	    }
	  },

	  onSelect: function onSelect(value) {
	    var _props = this.props;
	    var onSelect = _props.onSelect;
	    var type = _props.type;

	    onSelect(type, value);
	  },

	  getOptions: function getOptions() {
	    var _this = this;

	    var _props2 = this.props;
	    var options = _props2.options;
	    var selectedIndex = _props2.selectedIndex;
	    var prefixCls = _props2.prefixCls;

	    return options.map(function (item, index) {
	      var _classnames;

	      var cls = (0, _classnames3['default'])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-select-option-selected', selectedIndex === index), _defineProperty(_classnames, prefixCls + '-select-option-disabled', item.disabled), _classnames));
	      var onclick = null;
	      if (!item.disabled) {
	        onclick = _this.onSelect.bind(_this, +item.value);
	      }
	      return _react2['default'].createElement(
	        'li',
	        { className: cls, key: index, onClick: onclick, disabled: item.disabled },
	        item.value
	      );
	    });
	  },

	  scrollToSelected: function scrollToSelected(duration) {
	    // move to selected item
	    var select = _reactDom2['default'].findDOMNode(this);
	    var list = _reactDom2['default'].findDOMNode(this.refs.list);
	    var index = this.props.selectedIndex;
	    if (index < 0) {
	      index = 0;
	    }
	    var topOption = list.children[index];
	    var to = topOption.offsetTop;
	    scrollTo(select, to, duration);
	  },

	  render: function render() {
	    if (this.props.options.length === 0) {
	      return null;
	    }

	    var prefixCls = this.props.prefixCls;

	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-select',
	        onMouseEnter: this.props.onMouseEnter },
	      _react2['default'].createElement(
	        'ul',
	        { ref: 'list' },
	        this.getOptions()
	      )
	    );
	  }
	});

	exports['default'] = Select;
	module.exports = exports['default'];

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // customized rc-calendar https://github.com/react-component/calendar/blob/master/src/Calendar.jsx

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _gregorianCalendar = __webpack_require__(308);

	var _gregorianCalendar2 = _interopRequireDefault(_gregorianCalendar);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _CalendarHeader = __webpack_require__(323);

	var _CalendarHeader2 = _interopRequireDefault(_CalendarHeader);

	var _CalendarFooter = __webpack_require__(330);

	var _CalendarFooter2 = _interopRequireDefault(_CalendarFooter);

	var _CalendarMixin = __webpack_require__(334);

	var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

	var _CommonMixin = __webpack_require__(335);

	var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

	var _DateInput = __webpack_require__(337);

	var _DateInput2 = _interopRequireDefault(_DateInput);

	var _index = __webpack_require__(328);

	var _DateTable = __webpack_require__(338);

	var _DateTable2 = _interopRequireDefault(_DateTable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	function goStartMonth() {
	  var next = this.state.value.clone();
	  next.setDayOfMonth(1);
	  this.setValue(next);
	}

	function goEndMonth() {
	  var next = this.state.value.clone();
	  next.setDayOfMonth(next.getActualMaximum(_gregorianCalendar2["default"].MONTH));
	  this.setValue(next);
	}

	function goMonth(direction) {
	  var next = this.state.value.clone();
	  next.addMonth(direction);
	  this.setValue(next);
	}

	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.addYear(direction);
	  this.setValue(next);
	}

	function goWeek(direction) {
	  var next = this.state.value.clone();
	  next.addWeekOfYear(direction);
	  this.setValue(next);
	}

	function goDay(direction) {
	  var next = this.state.value.clone();
	  next.addDayOfMonth(direction);
	  this.setValue(next);
	}

	var Calendar = _react2["default"].createClass({
	  displayName: 'Calendar',

	  propTypes: {
	    disabledDate: _react.PropTypes.func,
	    disabledTime: _react.PropTypes.any,
	    value: _react.PropTypes.object,
	    selectedValue: _react.PropTypes.object,
	    defaultValue: _react.PropTypes.object,
	    className: _react.PropTypes.string,
	    locale: _react.PropTypes.object,
	    showWeekNumber: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    showToday: _react.PropTypes.bool,
	    showHour: _react.PropTypes.bool,
	    showSecond: _react.PropTypes.bool,
	    showDateInput: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    onOk: _react.PropTypes.func,
	    showOk: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    onKeyDown: _react.PropTypes.func,
	    timePicker: _react.PropTypes.element,
	    dateInputPlaceholder: _react.PropTypes.any,
	    onClear: _react.PropTypes.func,
	    onChange: _react.PropTypes.func
	  },

	  mixins: [_CommonMixin2["default"], _CalendarMixin2["default"]],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      showToday: true,
	      showDateInput: true,
	      timePicker: null,
	      onOk: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      showTimePicker: false
	    };
	  },
	  onKeyDown: function onKeyDown(event) {
	    if (event.target.nodeName.toLowerCase() === 'input') {
	      return undefined;
	    }
	    var keyCode = event.keyCode;
	    // mac
	    var ctrlKey = event.ctrlKey || event.metaKey;
	    switch (keyCode) {
	      case _KeyCode2["default"].DOWN:
	        goWeek.call(this, 1);
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].UP:
	        goWeek.call(this, -1);
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].LEFT:
	        if (ctrlKey) {
	          goYear.call(this, -1);
	        } else {
	          goDay.call(this, -1);
	        }
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].RIGHT:
	        if (ctrlKey) {
	          goYear.call(this, 1);
	        } else {
	          goDay.call(this, 1);
	        }
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].HOME:
	        goStartMonth.call(this);
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].END:
	        goEndMonth.call(this);
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].PAGE_DOWN:
	        goMonth.call(this, 1);
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].PAGE_UP:
	        goMonth.call(this, -1);
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].ENTER:
	        this.onSelect(this.state.value, {
	          source: 'keyboard'
	        });
	        event.preventDefault();
	        return 1;
	      default:
	        this.props.onKeyDown(event);
	        return 1;
	    }
	  },
	  onClear: function onClear() {
	    this.onSelect(null);
	    this.props.onClear();
	  },
	  onOk: function onOk() {
	    var selectedValue = this.state.selectedValue;

	    if (this.isAllowedDate(selectedValue)) {
	      this.props.onOk(selectedValue);
	    }
	  },
	  onDateInputChange: function onDateInputChange(value) {
	    this.onSelect(value, {
	      source: 'dateInput'
	    });
	  },
	  onDateTableSelect: function onDateTableSelect(value) {
	    this.onSelect(value);
	  },
	  getRootDOMNode: function getRootDOMNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  openTimePicker: function openTimePicker() {
	    this.setState({
	      showTimePicker: true
	    });
	  },
	  closeTimePicker: function closeTimePicker() {
	    this.setState({
	      showTimePicker: false
	    });
	  },
	  chooseToday: function chooseToday() {
	    var today = this.state.value.clone();
	    today.setTime(Date.now());
	    this.onSelect(today, {
	      source: 'todayButton'
	    });
	  },
	  render: function render() {
	    var props = this.props;
	    var locale = props.locale,
	        prefixCls = props.prefixCls,
	        disabledDate = props.disabledDate,
	        dateInputPlaceholder = props.dateInputPlaceholder,
	        timePicker = props.timePicker,
	        disabledTime = props.disabledTime,
	        showHour = props.showHour,
	        showSecond = props.showSecond;

	    var state = this.state;
	    var value = state.value,
	        selectedValue = state.selectedValue,
	        showTimePicker = state.showTimePicker;

	    var disabledTimeConfig = disabledTime && timePicker ? (0, _index.getTimeConfig)(selectedValue, disabledTime) : null;

	    var timePickerEle = timePicker && showTimePicker ? _react2["default"].cloneElement(timePicker, _extends({
	      showHour: showHour !== undefined ? showHour : true,
	      formatter: this.getFormatter(),
	      showSecond: showSecond !== undefined ? showSecond : true,
	      onChange: this.onDateInputChange,
	      gregorianCalendarLocale: value.locale,
	      value: selectedValue,
	      disabledHours: noop,
	      disabledMinutes: noop,
	      disabledSeconds: noop
	    }, disabledTimeConfig)) : null;
	    var dateInputElement = props.showDateInput ? _react2["default"].createElement(_DateInput2["default"], {
	      ref: 'dateInput',
	      formatter: this.getFormatter(),
	      key: 'date-input',
	      gregorianCalendarLocale: value.locale,
	      locale: locale,
	      placeholder: dateInputPlaceholder,
	      showClear: true,
	      disabledTime: disabledTime,
	      disabledDate: disabledDate,
	      onClear: this.onClear,
	      prefixCls: prefixCls,
	      selectedValue: selectedValue,
	      onChange: this.onDateInputChange
	    }) : null;
	    var children = [dateInputElement, _react2["default"].createElement(
	      'div',
	      {
	        key: 'date-panel',
	        className: prefixCls + '-date-panel'
	      },
	      _react2["default"].createElement(_CalendarHeader2["default"], {
	        locale: locale,
	        onValueChange: this.setValue,
	        value: value,
	        showTimePicker: showTimePicker,
	        prefixCls: prefixCls
	      }),
	      timePicker && showTimePicker ? _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-time-picker' },
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-time-picker-panel' },
	          timePickerEle
	        )
	      ) : null,
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-body' },
	        _react2["default"].createElement(_DateTable2["default"], {
	          locale: locale,
	          value: value,
	          selectedValue: selectedValue,
	          prefixCls: prefixCls,
	          dateRender: props.dateRender,
	          contentRender: props.contentRender,
	          onSelect: this.onDateTableSelect,
	          disabledDate: disabledDate,
	          showWeekNumber: props.showWeekNumber
	        })
	      ),
	      _react2["default"].createElement(_CalendarFooter2["default"], {
	        showOk: props.showOk,
	        locale: locale,
	        prefixCls: prefixCls,
	        showToday: props.showToday,
	        disabledTime: disabledTime,
	        showTimePicker: showTimePicker,
	        gregorianCalendarLocale: value.locale,
	        showDateInput: props.showDateInput,
	        timePicker: timePicker,
	        selectedValue: selectedValue,
	        value: value,
	        disabledDate: disabledDate,
	        onOk: this.onOk,
	        onSelect: this.onSelect,
	        onToday: this.chooseToday,
	        onOpenTimePicker: this.openTimePicker,
	        onCloseTimePicker: this.closeTimePicker
	      })
	    )];

	    return this.renderRoot({
	      children: children,
	      className: props.showWeekNumber ? prefixCls + '-week-number' : ''
	    });
	  }
	});

	exports["default"] = Calendar;
	module.exports = exports['default'];

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _MonthPanel = __webpack_require__(324);

	var _MonthPanel2 = _interopRequireDefault(_MonthPanel);

	var _index = __webpack_require__(328);

	var _YearPanel = __webpack_require__(325);

	var _YearPanel2 = _interopRequireDefault(_YearPanel);

	var _mapSelf = __webpack_require__(329);

	var _mapSelf2 = _interopRequireDefault(_mapSelf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function goMonth(direction) {
	  var next = this.props.value.clone();
	  next.addMonth(direction);
	  this.props.onValueChange(next);
	}

	function goYear(direction) {
	  var next = this.props.value.clone();
	  next.addYear(direction);
	  this.props.onValueChange(next);
	}

	var CalendarHeader = _react2["default"].createClass({
	  displayName: 'CalendarHeader',

	  propTypes: {
	    enablePrev: _react.PropTypes.any,
	    enableNext: _react.PropTypes.any,
	    prefixCls: _react.PropTypes.string,
	    showTimePicker: _react.PropTypes.bool,
	    locale: _react.PropTypes.object,
	    value: _react.PropTypes.object,
	    onValueChange: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enableNext: 1,
	      enablePrev: 1
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    this.yearFormatter = (0, _index.getFormatter)(props.locale.yearFormat, props.locale);
	    this.monthFormatter = (0, _index.getFormatter)(props.locale.monthFormat, props.locale);
	    this.dayFormatter = (0, _index.getFormatter)(props.locale.dayFormat, props.locale);
	    this.nextMonth = goMonth.bind(this, 1);
	    this.previousMonth = goMonth.bind(this, -1);
	    this.nextYear = goYear.bind(this, 1);
	    this.previousYear = goYear.bind(this, -1);
	    return {};
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var locale = this.props.locale;
	    var nextLocale = nextProps.locale;

	    if (nextLocale !== locale) {
	      this.yearFormatter = (0, _index.getFormatter)(nextLocale.yearFormat, nextLocale);
	      this.monthFormatter = (0, _index.getFormatter)(nextLocale.monthFormat, nextLocale);
	    }
	  },
	  onSelect: function onSelect(value) {
	    this.setState({
	      showMonthPanel: 0,
	      showYearPanel: 0
	    });
	    this.props.onValueChange(value);
	  },
	  getMonthYearElement: function getMonthYearElement(showTimePicker) {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var locale = props.locale;
	    var value = this.props.value;
	    var monthBeforeYear = locale.monthBeforeYear;
	    var selectClassName = prefixCls + '-' + (monthBeforeYear ? 'my-select' : 'ym-select');
	    var year = _react2["default"].createElement(
	      'a',
	      {
	        className: prefixCls + '-year-select',
	        role: 'button',
	        onClick: showTimePicker ? null : this.showYearPanel,
	        title: locale.monthSelect
	      },
	      this.yearFormatter.format(value)
	    );
	    var month = _react2["default"].createElement(
	      'a',
	      {
	        className: prefixCls + '-month-select',
	        role: 'button',
	        onClick: showTimePicker ? null : this.showMonthPanel,
	        title: locale.monthSelect
	      },
	      this.monthFormatter.format(value)
	    );
	    var day = void 0;
	    if (showTimePicker) {
	      day = _react2["default"].createElement(
	        'a',
	        {
	          className: prefixCls + '-day-select',
	          role: 'button'
	        },
	        this.dayFormatter.format(value)
	      );
	    }
	    var my = [];
	    if (monthBeforeYear) {
	      my = [month, day, year];
	    } else {
	      my = [year, month, day];
	    }
	    return _react2["default"].createElement(
	      'span',
	      { className: selectClassName },
	      (0, _mapSelf2["default"])(my)
	    );
	  },
	  showIf: function showIf(condition, el) {
	    return condition ? el : null;
	  },
	  showMonthPanel: function showMonthPanel() {
	    this.setState({
	      showMonthPanel: 1,
	      showYearPanel: 0
	    });
	  },
	  showYearPanel: function showYearPanel() {
	    this.setState({
	      showMonthPanel: 0,
	      showYearPanel: 1
	    });
	  },
	  render: function render() {
	    var props = this.props;
	    var enableNext = props.enableNext;
	    var enablePrev = props.enablePrev;
	    var prefixCls = props.prefixCls;
	    var locale = props.locale;
	    var value = props.value;
	    var showTimePicker = props.showTimePicker;

	    var state = this.state;
	    var PanelClass = null;
	    if (state.showMonthPanel) {
	      PanelClass = _MonthPanel2["default"];
	    } else if (state.showYearPanel) {
	      PanelClass = _YearPanel2["default"];
	    }
	    var panel = void 0;
	    if (PanelClass) {
	      panel = _react2["default"].createElement(PanelClass, {
	        locale: locale,
	        defaultValue: value,
	        rootPrefixCls: prefixCls,
	        onSelect: this.onSelect
	      });
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-header' },
	      _react2["default"].createElement(
	        'div',
	        { style: { position: 'relative' } },
	        this.showIf(enablePrev && !showTimePicker, _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-prev-year-btn',
	            role: 'button',
	            onClick: this.previousYear,
	            title: locale.previousYear
	          },
	          '«'
	        )),
	        this.showIf(enablePrev && !showTimePicker, _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-prev-month-btn',
	            role: 'button',
	            onClick: this.previousMonth,
	            title: locale.previousMonth
	          },
	          '‹'
	        )),
	        this.getMonthYearElement(showTimePicker),
	        this.showIf(enableNext && !showTimePicker, _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-next-month-btn',
	            onClick: this.nextMonth,
	            title: locale.nextMonth
	          },
	          '›'
	        )),
	        this.showIf(enableNext && !showTimePicker, _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-next-year-btn',
	            onClick: this.nextYear,
	            title: locale.nextYear
	          },
	          '»'
	        ))
	      ),
	      panel
	    );
	  }
	});

	exports["default"] = CalendarHeader;
	module.exports = exports['default'];

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _YearPanel = __webpack_require__(325);

	var _YearPanel2 = _interopRequireDefault(_YearPanel);

	var _MonthTable = __webpack_require__(327);

	var _MonthTable2 = _interopRequireDefault(_MonthTable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.addYear(direction);
	  this.setAndChangeValue(next);
	}

	function noop() {}

	var MonthPanel = _react2["default"].createClass({
	  displayName: 'MonthPanel',

	  propTypes: {
	    onChange: _react.PropTypes.func,
	    disabledDate: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onChange: noop,
	      onSelect: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    // bind methods
	    this.nextYear = goYear.bind(this, 1);
	    this.previousYear = goYear.bind(this, -1);
	    this.prefixCls = props.rootPrefixCls + '-month-panel';
	    return {
	      value: props.value || props.defaultValue
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      this.setState({
	        value: nextProps.value
	      });
	    }
	  },
	  onYearPanelSelect: function onYearPanelSelect(current) {
	    this.setState({
	      showYearPanel: 0
	    });
	    this.setAndChangeValue(current);
	  },
	  setAndChangeValue: function setAndChangeValue(value) {
	    this.setValue(value);
	    this.props.onChange(value);
	  },
	  setAndSelectValue: function setAndSelectValue(value) {
	    this.setValue(value);
	    this.props.onSelect(value);
	  },
	  setValue: function setValue(value) {
	    if (!('value' in this.props)) {
	      this.setState({
	        value: value
	      });
	    }
	  },
	  showYearPanel: function showYearPanel() {
	    this.setState({
	      showYearPanel: 1
	    });
	  },
	  render: function render() {
	    var props = this.props;
	    var value = this.state.value;
	    var locale = props.locale;
	    var year = value.getYear();
	    var prefixCls = this.prefixCls;
	    var yearPanel = void 0;
	    if (this.state.showYearPanel) {
	      yearPanel = _react2["default"].createElement(_YearPanel2["default"], {
	        locale: locale,
	        value: value,
	        rootPrefixCls: props.rootPrefixCls,
	        onSelect: this.onYearPanelSelect
	      });
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls, style: props.style },
	      _react2["default"].createElement(
	        'div',
	        null,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-header' },
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-prev-year-btn',
	              role: 'button',
	              onClick: this.previousYear,
	              title: locale.previousYear
	            },
	            '«'
	          ),
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-year-select',
	              role: 'button',
	              onClick: this.showYearPanel,
	              title: locale.yearSelect
	            },
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-year-select-content' },
	              year
	            ),
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-year-select-arrow' },
	              'x'
	            )
	          ),
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-next-year-btn',
	              role: 'button',
	              onClick: this.nextYear,
	              title: locale.nextYear
	            },
	            '»'
	          )
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body' },
	          _react2["default"].createElement(_MonthTable2["default"], {
	            disabledDate: props.disabledDate,
	            onSelect: this.setAndSelectValue,
	            locale: locale,
	            value: value,
	            prefixCls: prefixCls
	          })
	        )
	      ),
	      yearPanel
	    );
	  }
	});

	exports["default"] = MonthPanel;
	module.exports = exports['default'];

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DecadePanel = __webpack_require__(326);

	var _DecadePanel2 = _interopRequireDefault(_DecadePanel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ROW = 4;
	var COL = 3;

	function goYear(direction) {
	  var value = this.state.value.clone();
	  value.addYear(direction);
	  this.setState({
	    value: value
	  });
	}

	function chooseYear(year) {
	  var value = this.state.value.clone();
	  value.setYear(year);
	  value.rollSetMonth(this.state.value.getMonth());
	  this.props.onSelect(value);
	}

	var YearPanel = function (_React$Component) {
	  _inherits(YearPanel, _React$Component);

	  function YearPanel(props) {
	    _classCallCheck(this, YearPanel);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.prefixCls = props.rootPrefixCls + '-year-panel';
	    _this.state = {
	      value: props.value || props.defaultValue
	    };
	    _this.nextDecade = goYear.bind(_this, 10);
	    _this.previousDecade = goYear.bind(_this, -10);
	    ['showDecadePanel', 'onDecadePanelSelect'].forEach(function (method) {
	      _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  YearPanel.prototype.onDecadePanelSelect = function onDecadePanelSelect(current) {
	    this.setState({
	      value: current,
	      showDecadePanel: 0
	    });
	  };

	  YearPanel.prototype.getYears = function getYears() {
	    var value = this.state.value;
	    var currentYear = value.getYear();
	    var startYear = parseInt(currentYear / 10, 10) * 10;
	    var previousYear = startYear - 1;
	    var endYear = startYear + 9;
	    var years = [];
	    var index = 0;
	    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	      years[rowIndex] = [];
	      for (var colIndex = 0; colIndex < COL; colIndex++) {
	        var year = previousYear + index;
	        var content = void 0;
	        if (year < startYear) {
	          content = '';
	        } else if (year > endYear) {
	          content = '';
	        } else {
	          content = String(year);
	        }
	        years[rowIndex][colIndex] = {
	          content: content,
	          year: year,
	          title: content
	        };
	        index++;
	      }
	    }
	    return years;
	  };

	  YearPanel.prototype.showDecadePanel = function showDecadePanel() {
	    this.setState({
	      showDecadePanel: 1
	    });
	  };

	  YearPanel.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var value = this.state.value;
	    var locale = props.locale;
	    var years = this.getYears();
	    var currentYear = value.getYear();
	    var startYear = parseInt(currentYear / 10, 10) * 10;
	    var endYear = startYear + 9;
	    var prefixCls = this.prefixCls;

	    var yeasEls = years.map(function (row, index) {
	      var tds = row.map(function (yearData) {
	        var _classNameMap;

	        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', yearData.year === currentYear), _defineProperty(_classNameMap, prefixCls + '-last-decade-cell', yearData.year < startYear), _defineProperty(_classNameMap, prefixCls + '-next-decade-cell', yearData.year > endYear), _classNameMap);
	        var clickHandler = void 0;
	        if (yearData.year < startYear) {
	          clickHandler = _this2.previousDecade;
	        } else if (yearData.year > endYear) {
	          clickHandler = _this2.nextDecade;
	        } else {
	          clickHandler = chooseYear.bind(_this2, yearData.year);
	        }
	        return _react2["default"].createElement(
	          'td',
	          {
	            role: 'gridcell',
	            title: yearData.title,
	            key: yearData.content,
	            onClick: clickHandler,
	            className: (0, _classnames2["default"])(classNameMap)
	          },
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-year'
	            },
	            yearData.content
	          )
	        );
	      });
	      return _react2["default"].createElement(
	        'tr',
	        { key: index, role: 'row' },
	        tds
	      );
	    });

	    var decadePanel = void 0;
	    if (this.state.showDecadePanel) {
	      decadePanel = _react2["default"].createElement(_DecadePanel2["default"], {
	        locale: locale,
	        value: value,
	        rootPrefixCls: props.rootPrefixCls,
	        onSelect: this.onDecadePanelSelect
	      });
	    }

	    return _react2["default"].createElement(
	      'div',
	      { className: this.prefixCls },
	      _react2["default"].createElement(
	        'div',
	        null,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-header' },
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-prev-decade-btn',
	              role: 'button',
	              onClick: this.previousDecade,
	              title: locale.previousDecade
	            },
	            '«'
	          ),
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-decade-select',
	              role: 'button',
	              onClick: this.showDecadePanel,
	              title: locale.decadeSelect
	            },
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-decade-select-content' },
	              startYear,
	              '-',
	              endYear
	            ),
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-decade-select-arrow' },
	              'x'
	            )
	          ),
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-next-decade-btn',
	              role: 'button',
	              onClick: this.nextDecade,
	              title: locale.nextDecade
	            },
	            '»'
	          )
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body' },
	          _react2["default"].createElement(
	            'table',
	            { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	            _react2["default"].createElement(
	              'tbody',
	              { className: prefixCls + '-tbody' },
	              yeasEls
	            )
	          )
	        )
	      ),
	      decadePanel
	    );
	  };

	  return YearPanel;
	}(_react2["default"].Component);

	exports["default"] = YearPanel;


	YearPanel.propTypes = {
	  rootPrefixCls: _react.PropTypes.string,
	  value: _react.PropTypes.object,
	  defaultValue: _react.PropTypes.object
	};

	YearPanel.defaultProps = {
	  onSelect: function onSelect() {}
	};
	module.exports = exports['default'];

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ROW = 4;
	var COL = 3;


	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.addYear(direction);
	  this.setState({
	    value: next
	  });
	}

	function chooseDecade(year, event) {
	  var next = this.state.value.clone();
	  next.setYear(year);
	  next.rollSetMonth(this.state.value.getMonth());
	  this.props.onSelect(next);
	  event.preventDefault();
	}

	var DecadePanel = function (_React$Component) {
	  _inherits(DecadePanel, _React$Component);

	  function DecadePanel(props) {
	    _classCallCheck(this, DecadePanel);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      value: props.value || props.defaultValue
	    };

	    // bind methods
	    _this.prefixCls = props.rootPrefixCls + '-decade-panel';
	    _this.nextCentury = goYear.bind(_this, 100);
	    _this.previousCentury = goYear.bind(_this, -100);
	    return _this;
	  }

	  DecadePanel.prototype.render = function render() {
	    var _this2 = this;

	    var value = this.state.value;
	    var locale = this.props.locale;
	    var currentYear = value.getYear();
	    var startYear = parseInt(currentYear / 100, 10) * 100;
	    var preYear = startYear - 10;
	    var endYear = startYear + 99;
	    var decades = [];
	    var index = 0;
	    var prefixCls = this.prefixCls;

	    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	      decades[rowIndex] = [];
	      for (var colIndex = 0; colIndex < COL; colIndex++) {
	        var startDecade = preYear + index * 10;
	        var endDecade = preYear + index * 10 + 9;
	        decades[rowIndex][colIndex] = {
	          startDecade: startDecade,
	          endDecade: endDecade
	        };
	        index++;
	      }
	    }

	    var decadesEls = decades.map(function (row, decadeIndex) {
	      var tds = row.map(function (decadeData) {
	        var _classNameMap;

	        var dStartDecade = decadeData.startDecade;
	        var dEndDecade = decadeData.endDecade;
	        var isLast = dStartDecade < startYear;
	        var isNext = dEndDecade > endYear;
	        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', dStartDecade <= currentYear && currentYear <= dEndDecade), _defineProperty(_classNameMap, prefixCls + '-last-century-cell', isLast), _defineProperty(_classNameMap, prefixCls + '-next-century-cell', isNext), _classNameMap);
	        var content = void 0;
	        var clickHandler = void 0;
	        if (isLast) {
	          clickHandler = _this2.previousCentury;
	        } else if (isNext) {
	          clickHandler = _this2.nextCentury;
	        } else {
	          content = dStartDecade + '-' + dEndDecade;
	          clickHandler = chooseDecade.bind(_this2, dStartDecade);
	        }
	        return _react2["default"].createElement(
	          'td',
	          {
	            key: dStartDecade,
	            onClick: clickHandler,
	            role: 'gridcell',
	            className: (0, _classnames2["default"])(classNameMap)
	          },
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-decade'
	            },
	            content
	          )
	        );
	      });
	      return _react2["default"].createElement(
	        'tr',
	        { key: decadeIndex, role: 'row' },
	        tds
	      );
	    });

	    return _react2["default"].createElement(
	      'div',
	      { className: this.prefixCls },
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-header' },
	        _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-prev-century-btn',
	            role: 'button',
	            onClick: this.previousCentury,
	            title: locale.previousCentury
	          },
	          '«'
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-century' },
	          startYear,
	          '-',
	          endYear
	        ),
	        _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-next-century-btn',
	            role: 'button',
	            onClick: this.nextCentury,
	            title: locale.nextCentury
	          },
	          '»'
	        )
	      ),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-body' },
	        _react2["default"].createElement(
	          'table',
	          { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	          _react2["default"].createElement(
	            'tbody',
	            { className: prefixCls + '-tbody' },
	            decadesEls
	          )
	        )
	      )
	    );
	  };

	  return DecadePanel;
	}(_react2["default"].Component);

	exports["default"] = DecadePanel;


	DecadePanel.propTypes = {
	  locale: _react.PropTypes.object,
	  value: _react.PropTypes.object,
	  defaultValue: _react.PropTypes.object,
	  rootPrefixCls: _react.PropTypes.string
	};

	DecadePanel.defaultProps = {
	  onSelect: function onSelect() {}
	};
	module.exports = exports['default'];

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ROW = 4;
	var COL = 3;

	function chooseMonth(month) {
	  var next = this.state.value.clone();
	  next.rollSetMonth(month);
	  this.setAndSelectValue(next);
	}

	function noop() {}

	var MonthTable = function (_Component) {
	  _inherits(MonthTable, _Component);

	  function MonthTable(props) {
	    _classCallCheck(this, MonthTable);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.state = {
	      value: props.value
	    };
	    return _this;
	  }

	  MonthTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      this.setState({
	        value: nextProps.value
	      });
	    }
	  };

	  MonthTable.prototype.getMonths = function getMonths() {
	    var props = this.props;
	    var value = this.state.value;
	    var current = value.clone();
	    var locale = props.locale;
	    var months = [];
	    var shortMonths = locale.format.shortMonths;
	    var index = 0;
	    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	      months[rowIndex] = [];
	      for (var colIndex = 0; colIndex < COL; colIndex++) {
	        current.rollSetMonth(index);
	        months[rowIndex][colIndex] = {
	          value: index,
	          content: shortMonths[index],
	          title: shortMonths[index]
	        };
	        index++;
	      }
	    }
	    return months;
	  };

	  MonthTable.prototype.setAndSelectValue = function setAndSelectValue(value) {
	    this.setState({
	      value: value
	    });
	    this.props.onSelect(value);
	  };

	  MonthTable.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var value = this.state.value;
	    var today = value.clone();
	    today.setTime(Date.now());
	    var months = this.getMonths();
	    var currentMonth = value.getMonth();
	    var prefixCls = props.prefixCls;
	    var locale = props.locale;
	    var contentRender = props.contentRender;
	    var cellRender = props.cellRender;

	    var monthsEls = months.map(function (month, index) {
	      var tds = month.map(function (monthData) {
	        var _classNameMap;

	        var disabled = false;
	        if (props.disabledDate) {
	          var testValue = value.clone();
	          testValue.rollSetMonth(monthData.value);
	          disabled = props.disabledDate(testValue);
	        }
	        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-cell-disabled', disabled), _defineProperty(_classNameMap, prefixCls + '-selected-cell', monthData.value === currentMonth), _defineProperty(_classNameMap, prefixCls + '-current-cell', today.getYear() === value.getYear() && monthData.value === today.getMonth()), _classNameMap);
	        var cellEl = void 0;
	        if (cellRender) {
	          var currentValue = value.clone();
	          currentValue.rollSetMonth(monthData.value);
	          cellEl = cellRender(currentValue, locale);
	        } else {
	          var content = void 0;
	          if (contentRender) {
	            var _currentValue = value.clone();
	            _currentValue.rollSetMonth(monthData.value);
	            content = contentRender(_currentValue, locale);
	          } else {
	            content = monthData.content;
	          }
	          cellEl = _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-month' },
	            content
	          );
	        }
	        return _react2["default"].createElement(
	          'td',
	          {
	            role: 'gridcell',
	            key: monthData.value,
	            onClick: disabled ? null : chooseMonth.bind(_this2, monthData.value),
	            title: monthData.title,
	            className: (0, _classnames2["default"])(classNameMap)
	          },
	          cellEl
	        );
	      });
	      return _react2["default"].createElement(
	        'tr',
	        { key: index, role: 'row' },
	        tds
	      );
	    });

	    return _react2["default"].createElement(
	      'table',
	      { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	      _react2["default"].createElement(
	        'tbody',
	        { className: prefixCls + '-tbody' },
	        monthsEls
	      )
	    );
	  };

	  return MonthTable;
	}(_react.Component);

	MonthTable.defaultProps = {
	  onSelect: noop
	};
	MonthTable.propTypes = {
	  onSelect: _react.PropTypes.func,
	  cellRender: _react.PropTypes.func,
	  prefixCls: _react.PropTypes.string,
	  value: _react.PropTypes.object
	};
	exports["default"] = MonthTable;
	module.exports = exports['default'];

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getTodayTime = getTodayTime;
	exports.getTitleString = getTitleString;
	exports.getTodayTimeStr = getTodayTimeStr;
	exports.getFormatter = getFormatter;
	exports.syncTime = syncTime;
	exports.getTimeConfig = getTimeConfig;
	exports.isTimeValidByConfig = isTimeValidByConfig;
	exports.isTimeValid = isTimeValid;
	exports.isAllowedDate = isAllowedDate;

	var _gregorianCalendarFormat = __webpack_require__(307);

	var _gregorianCalendarFormat2 = _interopRequireDefault(_gregorianCalendarFormat);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var defaultDisabledTime = {
	  disabledHours: function disabledHours() {
	    return [];
	  },
	  disabledMinutes: function disabledMinutes() {
	    return [];
	  },
	  disabledSeconds: function disabledSeconds() {
	    return [];
	  }
	};

	function getTodayTime(value) {
	  var today = value.clone();
	  today.setTime(Date.now());
	  return today;
	}

	function getTitleString(value) {
	  return value.getYear() + '-' + (value.getMonth() + 1) + '-' + value.getDayOfMonth();
	}

	function getTodayTimeStr(value) {
	  var today = getTodayTime(value);
	  return getTitleString(today);
	}

	function getFormatter(format, locale) {
	  if (typeof format === 'string') {
	    return new _gregorianCalendarFormat2["default"](format, locale.format);
	  }
	  return format;
	}

	function syncTime(from, to) {
	  to.setHourOfDay(from.getHourOfDay());
	  to.setMinutes(from.getMinutes());
	  to.setSeconds(from.getSeconds());
	}

	function getTimeConfig(value, disabledTime) {
	  var disabledTimeConfig = disabledTime ? disabledTime(value) : {};
	  disabledTimeConfig = _extends({}, defaultDisabledTime, disabledTimeConfig);
	  return disabledTimeConfig;
	}

	function isTimeValidByConfig(value, disabledTimeConfig) {
	  var invalidTime = false;
	  if (value) {
	    var hour = value.getHourOfDay();
	    var minutes = value.getMinutes();
	    var seconds = value.getSeconds();
	    var disabledHours = disabledTimeConfig.disabledHours();
	    if (disabledHours.indexOf(hour) === -1) {
	      var disabledMinutes = disabledTimeConfig.disabledMinutes(hour);
	      if (disabledMinutes.indexOf(minutes) === -1) {
	        var disabledSeconds = disabledTimeConfig.disabledSeconds(hour, minutes);
	        invalidTime = disabledSeconds.indexOf(seconds) !== -1;
	      } else {
	        invalidTime = true;
	      }
	    } else {
	      invalidTime = true;
	    }
	  }
	  return !invalidTime;
	}

	function isTimeValid(value, disabledTime) {
	  var disabledTimeConfig = getTimeConfig(value, disabledTime);
	  return isTimeValidByConfig(value, disabledTimeConfig);
	}

	function isAllowedDate(value, disabledDate, disabledTime) {
	  if (disabledDate) {
	    if (disabledDate(value)) {
	      return false;
	    }
	  }
	  if (disabledTime) {
	    if (!isTimeValid(value, disabledTime)) {
	      return false;
	    }
	  }
	  return true;
	}

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(7);

	function mirror(o) {
	  return o;
	}

	module.exports = function mapSelf(children) {
	  // return ReactFragment
	  return React.Children.map(children, mirror);
	};

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _mapSelf = __webpack_require__(329);

	var _mapSelf2 = _interopRequireDefault(_mapSelf);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _TodayButton = __webpack_require__(331);

	var _TodayButton2 = _interopRequireDefault(_TodayButton);

	var _OkButton = __webpack_require__(332);

	var _OkButton2 = _interopRequireDefault(_OkButton);

	var _TimePickerButton = __webpack_require__(333);

	var _TimePickerButton2 = _interopRequireDefault(_TimePickerButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var CalendarFooter = _react2["default"].createClass({
	  displayName: 'CalendarFooter',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    showDateInput: _react.PropTypes.bool,
	    disabledTime: _react.PropTypes.any,
	    timePicker: _react.PropTypes.element,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    selectedValue: _react.PropTypes.any,
	    showOk: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    value: _react.PropTypes.object,
	    defaultValue: _react.PropTypes.object
	  },

	  onSelect: function onSelect(value) {
	    this.props.onSelect(value);
	  },
	  getRootDOMNode: function getRootDOMNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  render: function render() {
	    var props = this.props;
	    var value = props.value;
	    var prefixCls = props.prefixCls;
	    var showOk = props.showOk;
	    var timePicker = props.timePicker;

	    var footerEl = null;
	    if (props.showToday || timePicker) {
	      var _cx;

	      var nowEl = void 0;
	      if (props.showToday) {
	        nowEl = _react2["default"].createElement(_TodayButton2["default"], _extends({}, props, { value: value }));
	      }
	      var okBtn = void 0;
	      if (showOk === true || showOk !== false && !!props.timePicker) {
	        okBtn = _react2["default"].createElement(_OkButton2["default"], props);
	      }
	      var timePickerBtn = void 0;
	      if (!!props.timePicker) {
	        timePickerBtn = _react2["default"].createElement(_TimePickerButton2["default"], props);
	      }

	      var footerBtn = void 0;
	      if (nowEl || okBtn) {
	        footerBtn = _react2["default"].createElement(
	          'span',
	          { className: prefixCls + '-footer-btn' },
	          (0, _mapSelf2["default"])([nowEl, timePickerBtn, okBtn])
	        );
	      }
	      var cls = (0, _classnames2["default"])((_cx = {}, _defineProperty(_cx, prefixCls + '-footer', true), _defineProperty(_cx, prefixCls + '-footer-show-ok', okBtn), _cx));
	      footerEl = _react2["default"].createElement(
	        'div',
	        { className: cls },
	        footerBtn
	      );
	    }
	    return footerEl;
	  }
	});

	exports["default"] = CalendarFooter;
	module.exports = exports['default'];

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = TodayButton;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _util = __webpack_require__(328);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function TodayButton(_ref) {
	  var prefixCls = _ref.prefixCls;
	  var locale = _ref.locale;
	  var value = _ref.value;
	  var timePicker = _ref.timePicker;
	  var disabledDate = _ref.disabledDate;
	  var disabledTime = _ref.disabledTime;
	  var onToday = _ref.onToday;
	  var text = _ref.text;

	  var today = value.clone();
	  today.setTime(Date.now());
	  var disabledToday = false;
	  var localeNow = text;
	  if (!localeNow && timePicker) {
	    localeNow = locale.now;
	  }
	  localeNow = localeNow || locale.today;
	  var disabledTodayClass = '';
	  if (disabledDate) {
	    disabledToday = !(0, _util.isAllowedDate)((0, _util.getTodayTime)(value), disabledDate, disabledTime);
	    if (disabledToday) {
	      disabledTodayClass = prefixCls + '-today-btn-disabled';
	    }
	  }
	  return _react2["default"].createElement(
	    'a',
	    {
	      className: prefixCls + '-today-btn ' + disabledTodayClass,
	      role: 'button',
	      onClick: disabledToday ? null : onToday,
	      title: (0, _util.getTodayTimeStr)(value)
	    },
	    localeNow
	  );
	}
	module.exports = exports['default'];

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = OkButton;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function OkButton(_ref) {
	  var prefixCls = _ref.prefixCls;
	  var locale = _ref.locale;
	  var okDisabled = _ref.okDisabled;
	  var onOk = _ref.onOk;

	  var className = prefixCls + "-ok-btn";
	  if (okDisabled) {
	    className += " " + prefixCls + "-ok-btn-disabled";
	  }
	  return _react2["default"].createElement(
	    "a",
	    {
	      className: className,
	      role: "button",
	      onClick: okDisabled ? null : onOk
	    },
	    locale.ok
	  );
	}
	module.exports = exports['default'];

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = TimePickerButton;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function TimePickerButton(_ref) {
	  var _classnames;

	  var prefixCls = _ref.prefixCls;
	  var locale = _ref.locale;
	  var showTimePicker = _ref.showTimePicker;
	  var onOpenTimePicker = _ref.onOpenTimePicker;
	  var onCloseTimePicker = _ref.onCloseTimePicker;
	  var timePickerDisabled = _ref.timePickerDisabled;

	  var className = (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-time-picker-btn', true), _defineProperty(_classnames, prefixCls + '-time-picker-btn-disabled', timePickerDisabled), _classnames));
	  var onClick = null;
	  if (!timePickerDisabled) {
	    onClick = showTimePicker ? onCloseTimePicker : onOpenTimePicker;
	  }
	  return _react2["default"].createElement(
	    'a',
	    {
	      className: className,
	      role: 'button',
	      onClick: onClick
	    },
	    showTimePicker ? locale.dateSelect : locale.timeSelect
	  );
	}
	module.exports = exports['default'];

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _gregorianCalendar = __webpack_require__(308);

	var _gregorianCalendar2 = _interopRequireDefault(_gregorianCalendar);

	var _index = __webpack_require__(328);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function noop() {}

	function getNow() {
	  var value = new _gregorianCalendar2["default"]();
	  value.setTime(Date.now());
	  return value;
	}

	function getNowByCurrentStateValue(value) {
	  var ret = void 0;
	  if (value) {
	    ret = value.clone();
	    ret.setTime(Date.now());
	  } else {
	    ret = getNow();
	  }
	  return ret;
	}

	var CalendarMixin = {
	  propTypes: {
	    value: _react.PropTypes.object,
	    defaultValue: _react.PropTypes.object,
	    onKeyDown: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onKeyDown: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var value = props.value || props.defaultValue || getNow();
	    return {
	      value: value,
	      selectedValue: props.selectedValue || props.defaultSelectedValue
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    var selectedValue = nextProps.selectedValue;

	    if ('value' in nextProps) {
	      value = value || nextProps.defaultValue || getNowByCurrentStateValue(this.state.value);
	      this.setState({
	        value: value
	      });
	    }
	    if ('selectedValue' in nextProps) {
	      this.setState({
	        selectedValue: selectedValue
	      });
	    }
	  },
	  onSelect: function onSelect(value, cause) {
	    if (value) {
	      this.setValue(value);
	    }
	    this.setSelectedValue(value, cause);
	  },
	  renderRoot: function renderRoot(newProps) {
	    var _className;

	    var props = this.props;
	    var prefixCls = props.prefixCls;

	    var className = (_className = {}, _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, props.className, !!props.className), _defineProperty(_className, newProps.className, !!newProps.className), _className);

	    return _react2["default"].createElement(
	      'div',
	      {
	        ref: 'root',
	        className: '' + (0, _classnames2["default"])(className),
	        style: this.props.style,
	        tabIndex: '0',
	        onKeyDown: this.onKeyDown
	      },
	      newProps.children
	    );
	  },
	  setSelectedValue: function setSelectedValue(selectedValue, cause) {
	    if (this.isAllowedDate(selectedValue)) {
	      if (!('selectedValue' in this.props)) {
	        this.setState({
	          selectedValue: selectedValue
	        });
	      }
	      this.props.onSelect(selectedValue, cause);
	    }
	  },
	  setValue: function setValue(value) {
	    var originalValue = this.state.value;
	    if (!('value' in this.props)) {
	      this.setState({
	        value: value
	      });
	    }
	    if (originalValue && value && originalValue.getTime() !== value.getTime() || !originalValue && value || originalValue && !value) {
	      this.props.onChange(value);
	    }
	  },
	  isAllowedDate: function isAllowedDate(value) {
	    var disabledDate = this.props.disabledDate;
	    var disabledTime = this.props.disabledTime;
	    return (0, _index.isAllowedDate)(value, disabledDate, disabledTime);
	  }
	};

	exports["default"] = CalendarMixin;
	module.exports = exports['default'];

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _en_US = __webpack_require__(336);

	var _en_US2 = _interopRequireDefault(_en_US);

	var _index = __webpack_require__(328);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	exports["default"] = {
	  propTypes: {
	    className: _react.PropTypes.string,
	    locale: _react.PropTypes.object,
	    style: _react.PropTypes.object,
	    visible: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onOk: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      locale: _en_US2["default"],
	      style: {},
	      visible: true,
	      prefixCls: 'rc-calendar',
	      className: '',
	      onSelect: noop,
	      onChange: noop,
	      onClear: noop
	    };
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  },
	  getFormatter: function getFormatter() {
	    var formatter = this.props.formatter;
	    var locale = this.props.locale;
	    if (!formatter) {
	      if (this.props.timePicker) {
	        formatter = locale.dateTimeFormat;
	      } else {
	        formatter = locale.dateFormat;
	      }
	    }
	    if (this.normalFormatter && formatter === this.lastFormatter) {
	      return this.normalFormatter;
	    }
	    this.normalFormatter = (0, _index.getFormatter)(formatter, locale);
	    this.lastFormatter = formatter;
	    return this.normalFormatter;
	  },
	  focus: function focus() {
	    if (this.refs.root) {
	      this.refs.root.focus();
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _en_US = __webpack_require__(312);

	var _en_US2 = _interopRequireDefault(_en_US);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = {
	  today: 'Today',
	  now: 'Now',
	  backToToday: 'Back to today',
	  ok: 'Ok',
	  clear: 'Clear',
	  month: 'Month',
	  year: 'Year',
	  timeSelect: 'Select time',
	  dateSelect: 'Select date',
	  monthSelect: 'Choose a month',
	  yearSelect: 'Choose a year',
	  decadeSelect: 'Choose a decade',
	  yearFormat: 'yyyy',
	  dateFormat: 'M/d/yyyy',
	  dayFormat: 'd',
	  dateTimeFormat: 'M/d/yyyy HH:mm:ss',
	  monthFormat: 'MMMM',
	  monthBeforeYear: true,
	  previousMonth: 'Previous month (PageUp)',
	  nextMonth: 'Next month (PageDown)',
	  previousYear: 'Last year (Control + left)',
	  nextYear: 'Next year (Control + right)',
	  previousDecade: 'Last decade',
	  nextDecade: 'Next decade',
	  previousCentury: 'Last century',
	  nextCentury: 'Next century',
	  format: _en_US2["default"]
	};
	module.exports = exports['default'];

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var DateInput = _react2["default"].createClass({
	  displayName: 'DateInput',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    timePicker: _react.PropTypes.object,
	    disabledTime: _react.PropTypes.any,
	    formatter: _react.PropTypes.object,
	    locale: _react.PropTypes.object,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    disabledDate: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    onClear: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    onSelect: _react.PropTypes.func,
	    selectedValue: _react.PropTypes.object
	  },

	  getInitialState: function getInitialState() {
	    var selectedValue = this.props.selectedValue;
	    return {
	      str: selectedValue && this.props.formatter.format(selectedValue) || '',
	      invalid: false
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    // when popup show, click body will call this, bug!
	    var selectedValue = nextProps.selectedValue;
	    this.setState({
	      str: selectedValue && nextProps.formatter.format(selectedValue) || '',
	      invalid: false
	    });
	  },
	  onInputChange: function onInputChange(event) {
	    var str = event.target.value;
	    this.setState({
	      str: str
	    });
	    var value = void 0;
	    var _props = this.props;
	    var disabledDate = _props.disabledDate;
	    var formatter = _props.formatter;
	    var gregorianCalendarLocale = _props.gregorianCalendarLocale;
	    var onChange = _props.onChange;

	    if (str) {
	      try {
	        // remove `copyTime`, to enable input time
	        value = formatter.parse(str, {
	          locale: gregorianCalendarLocale,
	          obeyCount: true
	        });
	      } catch (ex) {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }
	      if (value && (!disabledDate || !disabledDate(value))) {
	        var originalValue = this.props.selectedValue;
	        if (originalValue && value) {
	          if (originalValue.getTime() !== value.getTime()) {
	            onChange(value);
	          }
	        } else if (originalValue !== value) {
	          onChange(value);
	        }
	      } else {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }
	    } else {
	      onChange(null);
	    }
	    this.setState({
	      invalid: false
	    });
	  },
	  onClear: function onClear() {
	    this.setState({
	      str: ''
	    });
	    this.props.onClear(null);
	  },
	  getRootDOMNode: function getRootDOMNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  focus: function focus() {
	    this.refs.dateInput.focus();
	  },
	  render: function render() {
	    var props = this.props;
	    var _state = this.state;
	    var invalid = _state.invalid;
	    var str = _state.str;
	    var locale = props.locale;
	    var prefixCls = props.prefixCls;
	    var placeholder = props.placeholder;

	    var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-input-wrap' },
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-date-input-wrap' },
	        _react2["default"].createElement('input', {
	          ref: 'dateInput',
	          className: prefixCls + '-input  ' + invalidClass,
	          value: str,
	          placeholder: placeholder,
	          onChange: this.onInputChange
	        })
	      ),
	      props.showClear ? _react2["default"].createElement('a', {
	        className: prefixCls + '-clear-btn',
	        role: 'button',
	        title: locale.clear,
	        onClick: this.onClear
	      }) : null
	    );
	  }
	});

	exports["default"] = DateInput;
	module.exports = exports['default'];

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _DateTHead = __webpack_require__(339);

	var _DateTHead2 = _interopRequireDefault(_DateTHead);

	var _DateTBody = __webpack_require__(341);

	var _DateTBody2 = _interopRequireDefault(_DateTBody);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } // customized rc-calendar https://github.com/react-component/calendar/blob/master/

	var DateTable = function (_React$Component) {
	  _inherits(DateTable, _React$Component);

	  function DateTable() {
	    _classCallCheck(this, DateTable);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTable.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    return _react2["default"].createElement(
	      'table',
	      { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	      _react2["default"].createElement(_DateTHead2["default"], props),
	      _react2["default"].createElement(_DateTBody2["default"], props)
	    );
	  };

	  return DateTable;
	}(_react2["default"].Component);

	exports["default"] = DateTable;
	module.exports = exports['default'];

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _DateConstants = __webpack_require__(340);

	var _DateConstants2 = _interopRequireDefault(_DateConstants);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var DateTHead = function (_React$Component) {
	  _inherits(DateTHead, _React$Component);

	  function DateTHead() {
	    _classCallCheck(this, DateTHead);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTHead.prototype.render = function render() {
	    var props = this.props;
	    var value = props.value;
	    var locale = props.locale;
	    var prefixCls = props.prefixCls;
	    var veryShortWeekdays = [];
	    var weekDays = [];
	    var firstDayOfWeek = value.getFirstDayOfWeek();
	    var showWeekNumberEl = void 0;

	    for (var dateColIndex = 0; dateColIndex < _DateConstants2["default"].DATE_COL_COUNT; dateColIndex++) {
	      var index = (firstDayOfWeek + dateColIndex) % _DateConstants2["default"].DATE_COL_COUNT;
	      veryShortWeekdays[dateColIndex] = locale.format.veryShortWeekdays[index];
	      weekDays[dateColIndex] = locale.format.weekdays[index];
	    }

	    if (props.showWeekNumber) {
	      showWeekNumberEl = _react2["default"].createElement(
	        'th',
	        {
	          role: 'columnheader',
	          className: prefixCls + '-column-header ' + prefixCls + '-week-number-header'
	        },
	        _react2["default"].createElement(
	          'span',
	          { className: prefixCls + '-column-header-inner' },
	          'x'
	        )
	      );
	    }
	    var weekDaysEls = weekDays.map(function (day, xindex) {
	      var _classnames;

	      var spanCls = (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-column-header-inner', true), _defineProperty(_classnames, 'weekend', xindex === 0 || xindex === 6), _classnames));
	      return _react2["default"].createElement(
	        'th',
	        {
	          key: xindex,
	          role: 'columnheader',
	          title: day,
	          className: prefixCls + '-column-header'
	        },
	        _react2["default"].createElement(
	          'span',
	          { className: spanCls },
	          veryShortWeekdays[xindex]
	        )
	      );
	    });
	    return _react2["default"].createElement(
	      'thead',
	      null,
	      _react2["default"].createElement(
	        'tr',
	        { role: 'row' },
	        showWeekNumberEl,
	        weekDaysEls
	      )
	    );
	  };

	  return DateTHead;
	}(_react2["default"].Component);

	exports["default"] = DateTHead;
	module.exports = exports['default'];

/***/ },
/* 340 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  DATE_ROW_COUNT: 6,
	  DATE_COL_COUNT: 7
	};
	module.exports = exports["default"];

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _DateConstants = __webpack_require__(342);

	var _DateConstants2 = _interopRequireDefault(_DateConstants);

	var _util = __webpack_require__(328);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // customized rc-calendar https://github.com/react-component/calendar/blob/master/

	function isSameDay(one, two) {
	  return one && two && one.compareToDay(two) === 0;
	}

	function beforeCurrentMonthYear(current, today) {
	  if (current.getYear() < today.getYear()) {
	    return 1;
	  }
	  return current.getYear() === today.getYear() && current.getMonth() < today.getMonth();
	}

	function afterCurrentMonthYear(current, today) {
	  if (current.getYear() > today.getYear()) {
	    return 1;
	  }
	  return current.getYear() === today.getYear() && current.getMonth() > today.getMonth();
	}

	function getIdFromDate(date) {
	  return 'rc-calendar-' + date.getYear() + '-' + date.getMonth() + '-' + date.getDayOfMonth();
	}

	function noop() {}

	function handleDayClick(current) {
	  this.props.onSelect(current);
	}

	function handleCellMouseEnter(current) {
	  this.props.onDayHover(current);
	}

	var DateTBody = _react2["default"].createClass({
	  displayName: 'DateTBody',

	  propTypes: {
	    contentRender: _react.PropTypes.func,
	    dateRender: _react.PropTypes.func,
	    disabledDate: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    selectedValue: _react.PropTypes.object,
	    value: _react.PropTypes.object,
	    showWeekNumber: _react.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onDayHover: noop
	    };
	  },
	  render: function render() {
	    var props = this.props;
	    var contentRender = props.contentRender,
	        prefixCls = props.prefixCls,
	        selectedValue = props.selectedValue,
	        value = props.value,
	        showWeekNumber = props.showWeekNumber,
	        dateRender = props.dateRender,
	        disabledDate = props.disabledDate;

	    var iIndex = void 0;
	    var jIndex = void 0;
	    var current = void 0;
	    var dateTable = [];
	    var today = value.clone();
	    var cellClass = prefixCls + '-cell';
	    var weekNumberCellClass = prefixCls + '-week-number-cell';
	    var dateClass = prefixCls + '-date';
	    var todayClass = prefixCls + '-today';
	    var selectedClass = prefixCls + '-selected-day';
	    var inRangeClass = prefixCls + '-in-range-cell';
	    var lastMonthDayClass = prefixCls + '-last-month-cell';
	    var nextMonthDayClass = prefixCls + '-next-month-btn-day';
	    var disabledClass = prefixCls + '-disabled-cell';
	    var firstDisableClass = prefixCls + '-disabled-cell-first-of-row';
	    var lastDisableClass = prefixCls + '-disabled-cell-last-of-row';
	    today.setTime(Date.now());
	    var month1 = value.clone();
	    month1.set(value.getYear(), value.getMonth(), 1);
	    var day = month1.getDayOfWeek();
	    var lastMonthDiffDay = (day + 7 - value.getFirstDayOfWeek()) % 7;
	    // calculate last month
	    var lastMonth1 = month1.clone();
	    lastMonth1.addDayOfMonth(0 - lastMonthDiffDay);
	    var passed = 0;
	    for (iIndex = 0; iIndex < _DateConstants2["default"].DATE_ROW_COUNT; iIndex++) {
	      for (jIndex = 0; jIndex < _DateConstants2["default"].DATE_COL_COUNT; jIndex++) {
	        current = lastMonth1;
	        if (passed) {
	          current = current.clone();
	          current.addDayOfMonth(passed);
	        }
	        dateTable.push(current);
	        passed++;
	      }
	    }
	    var tableHtml = [];
	    passed = 0;
	    for (iIndex = 0; iIndex < _DateConstants2["default"].DATE_ROW_COUNT; iIndex++) {
	      var weekNumberCell = void 0;
	      var dateCells = [];
	      if (showWeekNumber) {
	        weekNumberCell = _react2["default"].createElement(
	          'td',
	          {
	            key: dateTable[passed].getWeekOfYear(),
	            role: 'gridcell',
	            className: weekNumberCellClass
	          },
	          dateTable[passed].getWeekOfYear()
	        );
	      }
	      for (jIndex = 0; jIndex < _DateConstants2["default"].DATE_COL_COUNT; jIndex++) {
	        var next = null;
	        var last = null;
	        current = dateTable[passed];
	        if (jIndex < _DateConstants2["default"].DATE_COL_COUNT - 1) {
	          next = dateTable[passed + 1];
	        }
	        if (jIndex > 0) {
	          last = dateTable[passed - 1];
	        }
	        var cls = cellClass;
	        var disabled = false;
	        var selected = false;

	        if (isSameDay(current, today)) {
	          cls += ' ' + todayClass;
	        }

	        var isBeforeCurrentMonthYear = beforeCurrentMonthYear(current, value);
	        var isAfterCurrentMonthYear = afterCurrentMonthYear(current, value);

	        if (selectedValue && Array.isArray(selectedValue)) {
	          if (!isBeforeCurrentMonthYear && !isAfterCurrentMonthYear) {
	            var startValue = selectedValue[0];
	            var endValue = selectedValue[1];
	            if (startValue) {
	              if (isSameDay(current, startValue)) {
	                selected = true;
	              }
	            }
	            if (startValue && endValue) {
	              if (isSameDay(current, endValue) && !selectedValue.hovering) {
	                selected = true;
	              } else if (current.compareToDay(startValue) > 0 && current.compareToDay(endValue) < 0) {
	                cls += ' ' + inRangeClass;
	              }
	            }
	          }
	        } else if (isSameDay(current, selectedValue)) {
	          selected = true;
	        }
	        if (isBeforeCurrentMonthYear) {
	          cls += ' ' + lastMonthDayClass;
	        }
	        if (isAfterCurrentMonthYear) {
	          cls += ' ' + nextMonthDayClass;
	        }

	        if (disabledDate) {
	          if (disabledDate(current, value)) {
	            disabled = true;

	            if (!last || !disabledDate(last, value)) {
	              cls += ' ' + firstDisableClass;
	            }

	            if (!next || !disabledDate(next, value)) {
	              cls += ' ' + lastDisableClass;
	            }
	          }
	        }

	        if (selected) {
	          cls += ' ' + selectedClass;
	        }

	        if (disabled) {
	          cls += ' ' + disabledClass;
	        }

	        var dateHtml = void 0;
	        if (dateRender) {
	          dateHtml = dateRender(current, value);
	        } else {
	          var _classnames;

	          var content = contentRender ? contentRender(current, value) : current.getDayOfMonth();
	          var dayOfWeek = current.getDayOfWeek();
	          dateHtml = _react2["default"].createElement(
	            'div',
	            {
	              key: getIdFromDate(current),
	              className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, dateClass, true), _defineProperty(_classnames, 'weekend', dayOfWeek == 0 || dayOfWeek == 6), _classnames)),
	              'aria-selected': selected,
	              'aria-disabled': disabled
	            },
	            content
	          );
	        }

	        dateCells.push(_react2["default"].createElement(
	          'td',
	          {
	            key: passed,
	            onClick: disabled ? noop : handleDayClick.bind(this, current),
	            onMouseEnter: disabled ? noop : handleCellMouseEnter.bind(this, current),
	            role: 'gridcell',
	            title: (0, _util.getTitleString)(current), className: cls
	          },
	          dateHtml
	        ));

	        passed++;
	      }
	      tableHtml.push(_react2["default"].createElement(
	        'tr',
	        {
	          key: iIndex,
	          role: 'row'
	        },
	        weekNumberCell,
	        dateCells
	      ));
	    }
	    return _react2["default"].createElement(
	      'tbody',
	      { className: prefixCls + 'tbody' },
	      tableHtml
	    );
	  }
	});

	exports["default"] = DateTBody;
	module.exports = exports['default'];

/***/ },
/* 342 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  DATE_ROW_COUNT: 6,
	  DATE_COL_COUNT: 7
	};
	module.exports = exports['default'];

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Formatter = __webpack_require__(291);
	var Tooltip = __webpack_require__(295);
	var classnames = __webpack_require__(5);
	var i18n = __webpack_require__(344);
	var React = __webpack_require__(7);

	/**
	 * code should be an object like this {'xxxx-xx-xx': 'work/leave/schedule'}
	 */
	var generateContentRender = function generateContentRender(str) {
	  var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zh-cn';
	  return function contentRender(code, locale, current) {
	    // see https://github.com/yiminghe/gregorian-calendar to get details about `current` API
	    var time = current.getTime();
	    var date = Formatter.date(time, 'YYYY-MM-DD');
	    var type = code[date];
	    if (typeof type === 'string') {
	      type = [type];
	    } else if (type === undefined) {
	      type = [];
	    }
	    var tipMap = i18n[locale];
	    var content = [];
	    var isWork = type.indexOf('work') !== -1;
	    var isLeave = type.indexOf('leave') !== -1;
	    var isSchedule = type.indexOf('schedule') !== -1;
	    content.push(React.createElement(
	      'span',
	      {
	        key: 'date',
	        className: classnames({
	          'kuma-calendar-date-content': true,
	          work: isWork,
	          leave: isLeave,
	          schedule: isSchedule
	        })
	      },
	      current.getDayOfMonth()
	    ));
	    if (isSchedule) {
	      content.push(React.createElement('span', { key: 'bottom-line', className: 'kuma-calendar-date-decoration' }));
	    }

	    if (isWork || isLeave) {
	      return React.createElement(
	        Tooltip,
	        { placement: 'right', trigger: ['hover'], overlay: tipMap[isWork ? 'work' : 'leave'] },
	        React.createElement(
	          'div',
	          { className: 'kuma-calendar-date-content-box' },
	          content
	        )
	      );
	    }
	    // only one child can be passed.
	    return React.createElement(
	      'div',
	      { className: 'kuma-calendar-date-content-box' },
	      content
	    );
	  }.bind(null, str, lang);
	};

	function getCalendarContainer() {
	  var c = document.createElement('div');
	  c.className = 'uxcore';
	  document.body.appendChild(c);
	  return c;
	}

	module.exports = {
	  generateContentRender: generateContentRender,
	  getCalendarContainer: getCalendarContainer
	};

/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';

	var locale = {
	    'zh-cn': {
	        'work': '上班',
	        'leave': '休假'
	    },
	    'en-us': {
	        'work': 'work',
	        'leave': 'leave'
	    },
	    'pl-pl': {
	        'work': 'zadanie',
	        'leave': 'porzuć'
	    }
	};

	locale['en'] = locale['en-us'];
	locale['pl'] = locale['pl-pl'];

	module.exports = locale;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var GregorianCalendar = __webpack_require__(308);
	var DateTimeFormat = __webpack_require__(307);
	var Datepicker = __webpack_require__(313);
	var RcMonthCalendar = __webpack_require__(346);
	var util = __webpack_require__(343);
	var React = __webpack_require__(7);

	var defaultValueLocale = {};
	var CalendarLocale = {};
	var TimePickerLocale = {};
	var getCalendarContainer = util.getCalendarContainer;


	defaultValueLocale['zh-cn'] = __webpack_require__(347);
	defaultValueLocale['en-us'] = __webpack_require__(311);
	CalendarLocale['zh-cn'] = __webpack_require__(348);
	CalendarLocale['en-us'] = __webpack_require__(336);
	TimePickerLocale['zh-cn'] = __webpack_require__(350);
	TimePickerLocale['en-us'] = __webpack_require__(317);

	var MonthCalendar = function (_React$Component) {
	  _inherits(MonthCalendar, _React$Component);

	  function MonthCalendar(props) {
	    _classCallCheck(this, MonthCalendar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {};
	    _this.clearValue = _this.clearValue.bind(_this);
	    _this.handleChange = _this.handleChange.bind(_this);
	    return _this;
	  }

	  MonthCalendar.prototype.getTriggerNode = function getTriggerNode() {
	    return this.trigger;
	  };

	  MonthCalendar.prototype.getGregorianCalendarDate = function getGregorianCalendarDate(date) {
	    var me = this;
	    var _me$props = me.props,
	        timezone = _me$props.timezone,
	        locale = _me$props.locale;

	    if (timezone) {
	      defaultValueLocale[locale].timezoneOffset = parseInt(timezone, 10) * 60;
	    } else {
	      defaultValueLocale[locale].timezoneOffset = -new Date().getTimezoneOffset();
	    }
	    var value = new GregorianCalendar(defaultValueLocale[locale]);
	    value.setTime(new Date(date).valueOf());
	    return value;
	  };

	  MonthCalendar.prototype.clearValue = function clearValue(e) {
	    e.stopPropagation();
	    this.props.onSelect(null, null);
	  };

	  MonthCalendar.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	    };
	  };

	  MonthCalendar.prototype.handleChange = function handleChange(v) {
	    var p = this.props;
	    var formatter = new DateTimeFormat(p.format);
	    if (v) {
	      var date = v.getTime();
	      var value = this.getGregorianCalendarDate(date);
	      this.props.onSelect(new Date(date), formatter.format(value));
	    } else {
	      this.props.onSelect(v, v);
	    }
	  };

	  MonthCalendar.prototype.render = function render() {
	    var _this2 = this;

	    var me = this;
	    var p = me.props;
	    var formatter = new DateTimeFormat(p.format);
	    var calendarOptions = {
	      className: p.className,
	      style: p.style,
	      locale: CalendarLocale[p.locale],
	      orient: ['top', 'left'],
	      showDateInput: p.showDateInput,
	      prefixCls: 'kuma-calendar'
	    };
	    var pickerOptions = {
	      disabled: p.disabled,
	      align: p.align,
	      transitionName: p.transitionName,
	      formatter: formatter,
	      adjustOrientOnCalendarOverflow: false,
	      prefixCls: 'kuma-calendar-picker',
	      getCalendarContainer: p.getPopupContainer || getCalendarContainer
	    };

	    if (p.value) {
	      var value = this.getGregorianCalendarDate(p.value);
	      pickerOptions.value = calendarOptions.defaultValue = value;
	    } else {
	      pickerOptions.value = calendarOptions.defaultValue = null;
	    }

	    if (p.defaultValue) {
	      var _value = this.getGregorianCalendarDate(p.defaultValue);
	      calendarOptions.defaultValue = _value;
	    }
	    var calendar = React.createElement(RcMonthCalendar, calendarOptions);

	    var triggerStyle = {};
	    if (p.inputWidth) {
	      triggerStyle.width = p.inputWidth;
	    }

	    return React.createElement(
	      Datepicker,
	      _extends({
	        calendar: calendar,
	        onChange: me.handleChange
	      }, pickerOptions),
	      function (_ref) {
	        var value = _ref.value;

	        var showClear = value && !p.disabled;
	        return React.createElement(
	          'span',
	          { className: 'kuma-calendar-picker-input', style: triggerStyle, ref: me.saveRef('trigger') },
	          React.createElement('input', {
	            value: value && formatter.format(value),
	            readOnly: true,
	            disabled: me.props.disabled,
	            placeholder: _this2.props.placeholder,
	            className: 'kuma-input'
	          }),
	          p.hasTrigger ? React.createElement('i', { className: 'kuma-icon kuma-icon-calender ' + (showClear ? 'kuma-icon-calender__has-clear' : '') }) : null,
	          showClear ? React.createElement('i', { className: 'kuma-icon kuma-icon-close', onClick: _this2.clearValue }) : null
	        );
	      }
	    );
	  };

	  return MonthCalendar;
	}(React.Component);

	MonthCalendar.displayName = 'MonthCalendar';
	MonthCalendar.defaultProps = {
	  format: 'yyyy-MM',
	  placeholder: '请选择月份',
	  onSelect: function onSelect() {},

	  locale: 'zh-cn',
	  transitionName: 'slideUp',
	  align: {
	    offset: [0, 0]
	  },
	  showDateInput: false,
	  hasTrigger: true
	};
	MonthCalendar.propTypes = {
	  format: React.PropTypes.string,
	  inputWidth: React.PropTypes.number,
	  placeholder: React.PropTypes.string,
	  onSelect: React.PropTypes.func,
	  locale: React.PropTypes.string,
	  getPopupContainer: React.PropTypes.func
	};

	module.exports = MonthCalendar;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _MonthPanel = __webpack_require__(324);

	var _MonthPanel2 = _interopRequireDefault(_MonthPanel);

	var _CalendarMixin = __webpack_require__(334);

	var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

	var _CommonMixin = __webpack_require__(335);

	var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var MonthCalendar = _react2["default"].createClass({
	  displayName: 'MonthCalendar',

	  mixins: [_CommonMixin2["default"], _CalendarMixin2["default"]],

	  onKeyDown: function onKeyDown(event) {
	    var keyCode = event.keyCode;
	    var ctrlKey = event.ctrlKey || event.metaKey;
	    var stateValue = this.state.value;
	    var value = stateValue;
	    switch (keyCode) {
	      case _KeyCode2["default"].DOWN:
	        value = stateValue.clone();
	        value.addMonth(3);
	        break;
	      case _KeyCode2["default"].UP:
	        value = stateValue.clone();
	        value.addMonth(-3);
	        break;
	      case _KeyCode2["default"].LEFT:
	        value = stateValue.clone();
	        if (ctrlKey) {
	          value.addYear(-1);
	        } else {
	          value.addMonth(-1);
	        }
	        break;
	      case _KeyCode2["default"].RIGHT:
	        value = stateValue.clone();
	        if (ctrlKey) {
	          value.addYear(1);
	        } else {
	          value.addMonth(1);
	        }
	        break;
	      case _KeyCode2["default"].ENTER:
	        this.onSelect(stateValue);
	        event.preventDefault();
	        return 1;
	      default:
	        return undefined;
	    }
	    if (value !== stateValue) {
	      this.setValue(value);
	      event.preventDefault();
	      return 1;
	    }
	  },
	  render: function render() {
	    var props = this.props;
	    var children = _react2["default"].createElement(_MonthPanel2["default"], {
	      locale: props.locale,
	      disabledDate: props.disabledDate,
	      style: { position: 'relative' },
	      value: this.state.value,
	      rootPrefixCls: props.prefixCls,
	      onChange: this.setValue,
	      onSelect: this.onSelect
	    });
	    return this.renderRoot({
	      children: children
	    });
	  }
	});

	exports["default"] = MonthCalendar;
	module.exports = exports['default'];

/***/ },
/* 347 */
/***/ function(module, exports) {

	/*
	 * zh-cn locale
	 * @ignore
	 * @author yiminghe@gmail.com
	 */
	"use strict";

	module.exports = {
	  // in minutes
	  timezoneOffset: 8 * 60,
	  firstDayOfWeek: 1,
	  minimalDaysInFirstWeek: 1
	};

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _zh_CN = __webpack_require__(349);

	var _zh_CN2 = _interopRequireDefault(_zh_CN);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = {
	  today: '今天',
	  now: '此刻',
	  backToToday: '返回今天',
	  ok: '确定',
	  timeSelect: '选择时间',
	  dateSelect: '选择日期',
	  clear: '清除',
	  month: '月',
	  year: '年',
	  previousMonth: '上个月 (翻页上键)',
	  nextMonth: '下个月 (翻页下键)',
	  monthSelect: '选择月份',
	  yearSelect: '选择年份',
	  decadeSelect: '选择年代',
	  yearFormat: 'yyyy\'年\'',
	  monthFormat: 'M\'月\'',
	  dayFormat: 'd\'日\'',
	  dateFormat: 'yyyy\'年\'M\'月\'d\'日\'',
	  dateTimeFormat: 'yyyy\'年\'M\'月\'d\'日\' HH\'时\'mm\'分\'ss\'秒\'',
	  previousYear: '上一年 (Control键加左方向键)',
	  nextYear: '下一年 (Control键加右方向键)',
	  previousDecade: '上一年代',
	  nextDecade: '下一年代',
	  previousCentury: '上一世纪',
	  nextCentury: '下一世纪',
	  format: _zh_CN2["default"]
	};
	module.exports = exports['default'];

/***/ },
/* 349 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  eras: ['公元前', '公元'],
	  months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
	  shortMonths: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
	  weekdays: ['星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
	  shortWeekdays: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
	  veryShortWeekdays: ['日', '一', '二', '三', '四', '五', '六'],
	  ampms: ['上午', '下午'],
	  datePatterns: ['yyyy\'年\'M\'月\'d\'日\' EEEE', 'yyyy\'年\'M\'月\'d\'日\'', 'yyyy-M-d', 'yy-M-d'],
	  timePatterns: ['ahh\'时\'mm\'分\'ss\'秒\' \'GMT\'Z', 'ahh\'时\'mm\'分\'ss\'秒\'', 'H:mm:ss', 'ah:mm'],
	  dateTimePattern: '{date} {time}'
	};

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _gregorianCalendarFormatLibLocaleZh_CN = __webpack_require__(349);

	var _gregorianCalendarFormatLibLocaleZh_CN2 = _interopRequireDefault(_gregorianCalendarFormatLibLocaleZh_CN);

	var _gregorianCalendarLibLocaleZh_CN = __webpack_require__(347);

	var _gregorianCalendarLibLocaleZh_CN2 = _interopRequireDefault(_gregorianCalendarLibLocaleZh_CN);

	exports['default'] = {
	  clear: '清除',
	  format: _gregorianCalendarFormatLibLocaleZh_CN2['default'],
	  calendar: _gregorianCalendarLibLocaleZh_CN2['default']
	};
	module.exports = exports['default'];

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var DateTimeFormat = __webpack_require__(307);
	var Datepicker = __webpack_require__(313);
	var RcYearCalendar = __webpack_require__(352);
	var util = __webpack_require__(343);
	var React = __webpack_require__(7);
	var GregorianCalendar = __webpack_require__(308);

	var defaultValueLocale = {};
	var CalendarLocale = {};
	var TimePickerLocale = {};

	defaultValueLocale['zh-cn'] = __webpack_require__(347);
	defaultValueLocale['en-us'] = __webpack_require__(311);
	CalendarLocale['zh-cn'] = __webpack_require__(348);
	CalendarLocale['en-us'] = __webpack_require__(336);
	TimePickerLocale['zh-cn'] = __webpack_require__(350);
	TimePickerLocale['en-us'] = __webpack_require__(317);

	var getCalendarContainer = util.getCalendarContainer;

	var YearCalendar = function (_React$Component) {
	  _inherits(YearCalendar, _React$Component);

	  function YearCalendar(props) {
	    _classCallCheck(this, YearCalendar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {};
	    _this.clearValue = _this.clearValue.bind(_this);
	    _this.handleChange = _this.handleChange.bind(_this);
	    return _this;
	  }

	  YearCalendar.prototype.getTriggerNode = function getTriggerNode() {
	    return this.trigger;
	  };

	  YearCalendar.prototype.getGregorianCalendarDate = function getGregorianCalendarDate(date) {
	    var me = this;
	    var _me$props = me.props,
	        timezone = _me$props.timezone,
	        locale = _me$props.locale;

	    if (timezone) {
	      defaultValueLocale[locale].timezoneOffset = parseInt(timezone, 10) * 60;
	    } else {
	      defaultValueLocale[locale].timezoneOffset = -new Date().getTimezoneOffset();
	    }
	    var value = new GregorianCalendar(defaultValueLocale[locale]);
	    value.setTime(new Date(date).valueOf());
	    return value;
	  };

	  YearCalendar.prototype.clearValue = function clearValue(e) {
	    e.stopPropagation();
	    this.props.onSelect(null, null);
	  };

	  YearCalendar.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	    };
	  };

	  YearCalendar.prototype.handleChange = function handleChange(v) {
	    var p = this.props;
	    var formatter = new DateTimeFormat(p.format);
	    if (v) {
	      var date = v.getTime();
	      var value = this.getGregorianCalendarDate(date);
	      this.props.onSelect(new Date(date), formatter.format(value));
	    } else {
	      this.props.onSelect(v, v);
	    }
	  };

	  YearCalendar.prototype.render = function render() {
	    var _this2 = this;

	    var me = this;
	    var p = me.props;
	    var formatter = new DateTimeFormat(p.format);
	    var calendarOptions = {
	      className: p.className,
	      style: p.style,
	      locale: CalendarLocale[p.locale],
	      showDateInput: p.showDateInput,
	      orient: ['top', 'left'],
	      prefixCls: 'kuma-calendar'
	    };
	    var pickerOptions = {
	      disabled: p.disabled,
	      align: p.align,
	      formatter: formatter,
	      transitionName: p.transitionName,
	      adjustOrientOnCalendarOverflow: false,
	      prefixCls: 'kuma-calendar-picker',
	      getCalendarContainer: p.getPopupContainer || getCalendarContainer
	    };

	    if (p.value) {
	      var value = this.getGregorianCalendarDate(p.value);
	      pickerOptions.value = calendarOptions.defaultValue = value;
	    } else {
	      pickerOptions.value = calendarOptions.defaultValue = null;
	    }

	    if (p.defaultValue) {
	      var _value = this.getGregorianCalendarDate(p.defaultValue);
	      calendarOptions.defaultValue = _value;
	    }
	    var calendar = React.createElement(RcYearCalendar, calendarOptions);

	    var triggerStyle = {};
	    if (p.inputWidth) {
	      triggerStyle.width = p.inputWidth;
	    }

	    return React.createElement(
	      Datepicker,
	      _extends({
	        calendar: calendar,
	        onChange: me.handleChange
	      }, pickerOptions),
	      function (_ref) {
	        var value = _ref.value;

	        var showClear = value && !p.disabled;
	        return React.createElement(
	          'span',
	          { className: 'kuma-calendar-picker-input', style: triggerStyle, ref: me.saveRef('trigger') },
	          React.createElement('input', {
	            value: value && formatter.format(value),
	            readOnly: true,
	            disabled: me.props.disabled,
	            placeholder: _this2.props.placeholder,
	            className: 'kuma-input'
	          }),
	          p.hasTrigger ? React.createElement('i', { className: 'kuma-icon kuma-icon-calender ' + (showClear ? 'kuma-icon-calender__has-clear' : '') }) : null,
	          showClear ? React.createElement('i', { className: 'kuma-icon kuma-icon-close', onClick: _this2.clearValue }) : null
	        );
	      }
	    );
	  };

	  return YearCalendar;
	}(React.Component);

	YearCalendar.displayName = 'YearCalendar';
	YearCalendar.defaultProps = {
	  format: 'yyyy',
	  placeholder: '请选择年份',
	  onSelect: function onSelect() {},

	  locale: 'zh-cn',
	  transitionName: 'slideUp',
	  align: {
	    offset: [0, 0]
	  },
	  showDateInput: false,
	  hasTrigger: true
	};
	YearCalendar.propTypes = {
	  format: React.PropTypes.string,
	  inputWidth: React.PropTypes.number,
	  placeholder: React.PropTypes.string,
	  onSelect: React.PropTypes.func,
	  locale: React.PropTypes.string,
	  getPopupContainer: React.PropTypes.func
	};

	module.exports = YearCalendar;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _YearPanel = __webpack_require__(325);

	var _YearPanel2 = _interopRequireDefault(_YearPanel);

	var _CalendarMixin = __webpack_require__(334);

	var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

	var _CommonMixin = __webpack_require__(335);

	var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var YearCalendar = _react2["default"].createClass({
	  displayName: 'YearCalendar',

	  mixins: [_CalendarMixin2["default"], _CommonMixin2["default"]],

	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    var ctrlKey = e.ctrlKey || e.metaKey;
	    var stateValue = this.state.value;
	    var value = stateValue;
	    switch (keyCode) {
	      case _KeyCode2["default"].DOWN:
	        value = stateValue.clone();
	        value.addMonth(3);
	        break;
	      case _KeyCode2["default"].UP:
	        value = stateValue.clone();
	        value.addMonth(-3);
	        break;
	      case _KeyCode2["default"].LEFT:
	        value = stateValue.clone();
	        if (ctrlKey) {
	          value.addYear(-1);
	        } else {
	          value.addMonth(-1);
	        }
	        break;
	      case _KeyCode2["default"].RIGHT:
	        value = stateValue.clone();
	        if (ctrlKey) {
	          value.addYear(1);
	        } else {
	          value.addMonth(1);
	        }
	        break;
	      case _KeyCode2["default"].ENTER:
	        this.onSelect(stateValue);
	        e.preventDefault();
	        return 1;
	      default:
	        return undefined;
	    }
	    if (value !== stateValue) {
	      this.setValue(value);
	      e.preventDefault();
	      return 1;
	    }
	  },
	  render: function render() {
	    var props = this.props;
	    var children = _react2["default"].createElement(_YearPanel2["default"], {
	      locale: props.locale,
	      disabledDate: props.disabledDate,
	      value: this.state.value,
	      rootPrefixCls: props.prefixCls,
	      onChange: this.setValue,
	      onSelect: this.onSelect
	    });
	    return this.renderRoot({
	      children: children,
	      className: props.prefixCls + '-year-calendar-container'

	    });
	  }
	});

	exports["default"] = YearCalendar;
	module.exports = exports['default'];

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * CheckboxCellField Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(354);

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * CheckboxCellField Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */
	var CellField = __webpack_require__(3);
	var assign = __webpack_require__(6);
	var CheckboxGroup = __webpack_require__(355);
	var React = __webpack_require__(7);

	var Item = CheckboxGroup.Item;

	var CheckboxCellField = function (_CellField) {
	  _inherits(CheckboxCellField, _CellField);

	  function CheckboxCellField() {
	    _classCallCheck(this, CheckboxCellField);

	    return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
	  }

	  CheckboxCellField.prototype.getTextMap = function getTextMap() {
	    var me = this;
	    var obj = {};
	    var _me$props = me.props,
	        column = _me$props.column,
	        rowData = _me$props.rowData;
	    var config = column.config,
	        renderChildren = column.renderChildren;

	    if (column.renderChildren) {
	      renderChildren().forEach(function (item) {
	        obj[item.props.value] = item.props.text;
	      });
	    } else if (config && config.data) {
	      var configData = [];
	      if (typeof config.data === 'function') {
	        configData = config.data(rowData);
	      }
	      if (config.data instanceof Array) {
	        configData = config.data;
	      }
	      configData.forEach(function (item) {
	        obj[item.value] = item.text;
	      });
	    }
	    return obj;
	  };

	  CheckboxCellField.prototype.renderChildren = function renderChildren() {
	    var me = this;
	    var _me$props2 = me.props,
	        column = _me$props2.column,
	        rowData = _me$props2.rowData;
	    var renderChildren = column.renderChildren,
	        config = column.config;

	    if (renderChildren) {
	      return renderChildren(rowData);
	    }
	    if (config) {
	      var configData = [];
	      if (typeof config.data === 'function') {
	        configData = config.data(rowData);
	      }
	      if (config.data instanceof Array) {
	        configData = config.data;
	      }
	      return configData.map(function (item, index) {
	        return React.createElement(Item, { key: index, value: item.value, text: item.text, disabled: item.disabled });
	      });
	    }
	    return [];
	  };

	  CheckboxCellField.prototype.renderContent = function renderContent() {
	    var me = this;
	    var textMap = me.getTextMap();
	    var fieldProps = {
	      onChange: function onChange(value) {
	        me.handleDataChange({
	          text: (value || []).map(function (item) {
	            return textMap[item];
	          }).join(', '),
	          value: value
	        });
	      },
	      value: me.props.value
	    };
	    if (me.props.column.config) {
	      (function () {
	        var customProps = _extends({}, me.props.column.config);
	        Object.keys(fieldProps).forEach(function (item) {
	          delete customProps[item];
	        });
	        assign(fieldProps, customProps);
	      })();
	    }
	    return React.createElement(
	      CheckboxGroup,
	      fieldProps,
	      me.renderChildren()
	    );
	  };

	  return CheckboxCellField;
	}(CellField);

	CheckboxCellField.propTypes = assign({}, CellField.propTypes);

	CheckboxCellField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = CheckboxCellField;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * CheckboxGroup Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(356);

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	/**
	 * CheckboxGroup Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Item = __webpack_require__(357);
	var React = __webpack_require__(7);

	var shallowArrayCopy = function shallowArrayCopy(a) {
	  var value = a instanceof Array ? [].concat(_toConsumableArray(a)) : a;
	  return value;
	};

	var CheckboxGroup = function (_React$Component) {
	  _inherits(CheckboxGroup, _React$Component);

	  function CheckboxGroup() {
	    _classCallCheck(this, CheckboxGroup);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  CheckboxGroup.prototype.componentWillMount = function componentWillMount() {
	    var me = this;
	    var selected = shallowArrayCopy(me.props.value);
	    if (!Array.isArray(selected)) {
	      selected = [selected];
	    }
	    me.selected = selected;
	  };

	  CheckboxGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var me = this;
	    var selected = shallowArrayCopy(me.props.value);
	    if (!Array.isArray(selected)) {
	      selected = [selected];
	    }
	    me.selected = selected;
	  };

	  CheckboxGroup.prototype.processChild = function processChild() {
	    var me = this;
	    var length = React.Children.count(me.props.children);
	    if (!length) return false;
	    var elements = React.Children.map(me.props.children, function (child, index) {
	      if (!!child.type && child.type.displayName === 'CheckboxItem') {
	        var value = me.props.value;
	        return React.cloneElement(child, {
	          jsxdisabled: me.props.disabled,
	          onChange: me.handleChange.bind(me),
	          key: index,
	          checked: (Array.isArray(value) ? value : [value]).indexOf(child.props.value) !== -1
	        });
	      }
	      return null;
	    });
	    return elements;
	  };

	  CheckboxGroup.prototype.handleChange = function handleChange(checked, value) {
	    var me = this;
	    if (checked) {
	      me.selected.push(value);
	    } else {
	      me.selected = me.selected.filter(function (item) {
	        return item !== value;
	      });
	    }
	    me.props.onChange(shallowArrayCopy(me.selected));
	  };

	  CheckboxGroup.prototype.render = function render() {
	    var me = this;
	    return React.createElement(
	      'div',
	      { className: me.props.className },
	      me.processChild()
	    );
	  };

	  return CheckboxGroup;
	}(React.Component);

	CheckboxGroup.Item = Item;

	CheckboxGroup.defaultProps = {
	  value: [],
	  onChange: function onChange() {},
	  disabled: false,
	  className: 'kuma-checkbox-group'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	CheckboxGroup.propTypes = {
	  value: React.PropTypes.array,
	  onChange: React.PropTypes.func,
	  disabled: React.PropTypes.bool,
	  className: React.PropTypes.string
	};

	CheckboxGroup.displayName = 'CheckboxGroup';

	module.exports = CheckboxGroup;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var React = __webpack_require__(7);

	var CheckboxItem = function (_React$Component) {
	  _inherits(CheckboxItem, _React$Component);

	  function CheckboxItem() {
	    _classCallCheck(this, CheckboxItem);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  CheckboxItem.prototype.handleChange = function handleChange(e) {
	    var me = this;
	    me.props.onChange(e.currentTarget.checked, me.props.value);
	  };

	  CheckboxItem.prototype.render = function render() {
	    var me = this;
	    var prefixCls = me.props.prefixCls;

	    var disabled = false;
	    if ('disabled' in me.props) {
	      disabled = me.props.disabled;
	    } else {
	      disabled = me.props.jsxdisabled;
	    }
	    return React.createElement(
	      'label',
	      { className: '' + prefixCls },
	      React.createElement('input', {
	        type: 'checkbox',
	        disabled: disabled,
	        checked: me.props.checked,
	        className: 'kuma-checkbox',
	        onChange: me.handleChange.bind(me)
	      }),
	      React.createElement('s', null),
	      React.createElement('span', { className: prefixCls + '-content', dangerouslySetInnerHTML: { __html: me.props.text } })
	    );
	  };

	  return CheckboxItem;
	}(React.Component);

	CheckboxItem.defaultProps = {
	  value: '',
	  prefixCls: 'kuma-checkbox-group-item',
	  onChange: function onChange() {}
	};

	CheckboxItem.propTypes = {
	  value: React.PropTypes.string,
	  disabled: React.PropTypes.bool,
	  prefixCls: React.PropTypes.string,
	  onChange: React.PropTypes.func
	};

	CheckboxItem.displayName = 'CheckboxItem';

	module.exports = CheckboxItem;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _uxcoreButton = __webpack_require__(359);

	var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

	var _uxcoreDropdown = __webpack_require__(362);

	var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

	var _uxcoreMenu = __webpack_require__(367);

	var _uxcoreMenu2 = _interopRequireDefault(_uxcoreMenu);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _i18n = __webpack_require__(369);

	var _i18n2 = _interopRequireDefault(_i18n);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * only consider the button style and how to collapse
	 */

	var CollapsedButtonItem = function CollapsedButtonItem() {};

	var CollapsedButton = function (_React$Component) {
	  _inherits(CollapsedButton, _React$Component);

	  function CollapsedButton(props) {
	    _classCallCheck(this, CollapsedButton);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      dropdownVisible: false
	    };
	    _this.handleDropdownVisibleChange = _this.handleDropdownVisibleChange.bind(_this);
	    _this.handleMoreClick = _this.handleMoreClick.bind(_this);
	    return _this;
	  }

	  CollapsedButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (_react2["default"].Children.count(nextProps.children) < this.toNum(nextProps.maxLength)) {
	      this.setState({
	        dropdownVisible: false
	      });
	    }
	  };

	  CollapsedButton.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _props = this.props,
	        children = _props.children,
	        maxLength = _props.maxLength;

	    if (this.state.dropdownVisible && this.toNum(maxLength) === 1 && _react2["default"].Children.count(children) > 1) {
	      var dropdownDOMNode = this.dropdownInstance.getPopupDomNode();
	      var triggerDOMnode = _reactDom2["default"].findDOMNode(this.triggerInstance);

	      dropdownDOMNode.style.minWidth = (triggerDOMnode || this.triggerInstance).offsetWidth + 'px';
	    }
	  };

	  CollapsedButton.prototype.toNum = function toNum(variable) {
	    if (typeof variable === 'string') {
	      return variable - 0;
	    }
	    return variable;
	  };

	  CollapsedButton.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	      return false;
	    };
	  };

	  CollapsedButton.prototype.handleDropdownVisibleChange = function handleDropdownVisibleChange(visible) {
	    var me = this;
	    me.setState({
	      dropdownVisible: visible
	    });
	  };

	  CollapsedButton.prototype.handleMoreClick = function handleMoreClick(e) {
	    e.preventDefault();
	    var me = this;
	    me.setState({
	      dropdownVisible: !me.state.dropdownVisible
	    });
	  };

	  CollapsedButton.prototype.renderItem = function renderItem(item, index) {
	    var me = this;
	    var type = me.props.type;

	    var itemProps = {
	      className: 'action',
	      key: index,
	      onClick: item.props.disabled ? function () {} : item.props.onClick
	    };
	    if (type === 'button') {
	      return _react2["default"].createElement(
	        _uxcoreButton2["default"],
	        _extends({}, itemProps, {
	          type: 'outline',
	          size: 'small',
	          disabled: !!item.props.disabled
	        }),
	        item.props.children
	      );
	    }
	    return _react2["default"].createElement(
	      'a',
	      _extends({}, itemProps, {
	        className: (0, _classnames2["default"])({
	          action: true,
	          disabled: !!item.props.disabled
	        })
	      }),
	      item.props.children
	    );
	  };

	  CollapsedButton.prototype.renderMore = function renderMore(actions) {
	    if (actions.length === 0) {
	      return null;
	    }
	    var me = this;
	    var menu = _react2["default"].createElement(
	      _uxcoreMenu2["default"],
	      null,
	      actions.map(function (action, index) {
	        return _react2["default"].createElement(
	          _uxcoreMenu2["default"].Item,
	          { key: index, disabled: !!action.props.disabled },
	          _react2["default"].createElement(
	            'a',
	            { onClick: action.props.onClick },
	            action.props.children
	          )
	        );
	      })
	    );

	    var offsetY = me.props.type === 'button' ? -5 : -20;
	    var dropdownOptions = {
	      key: 'icon',
	      overlay: menu,
	      trigger: ['click'],
	      align: {
	        offset: [0, offsetY]
	      },
	      visible: me.state.dropdownVisible,
	      overlayClassName: me.props.prefixCls + '-collapsed-button-more-dropdown',
	      onVisibleChange: me.handleDropdownVisibleChange
	    };
	    var content = _react2["default"].createElement(
	      'span',
	      null,
	      _i18n2["default"][me.props.locale].more,
	      _react2["default"].createElement('i', {
	        className: (0, _classnames2["default"])({
	          'kuma-icon': true,
	          'kuma-icon-triangle-down': !me.state.dropdownVisible,
	          'kuma-icon-triangle-up': me.state.dropdownVisible
	        })
	      })
	    );
	    if (me.props.type === 'button') {
	      return _react2["default"].createElement(
	        _uxcoreDropdown2["default"],
	        dropdownOptions,
	        _react2["default"].createElement(
	          _uxcoreButton2["default"],
	          { className: 'action', type: 'outline', size: 'small' },
	          content
	        )
	      );
	    }
	    return _react2["default"].createElement(
	      _uxcoreDropdown2["default"],
	      dropdownOptions,
	      _react2["default"].createElement(
	        'a',
	        { className: 'action', onClick: me.handleMoreClick },
	        content
	      )
	    );
	  };

	  CollapsedButton.prototype.renderHoverMenu = function renderHoverMenu() {
	    var me = this;
	    var _me$props = me.props,
	        children = _me$props.children,
	        type = _me$props.type;

	    var trigger = void 0;
	    var options = [];
	    _react2["default"].Children.forEach(children, function (child, index) {
	      if (index === 0) {
	        var triggerContent = _react2["default"].createElement(
	          'span',
	          null,
	          child.props.children,
	          _react2["default"].createElement('i', {
	            className: (0, _classnames2["default"])({
	              'kuma-icon': true,
	              'kuma-icon-triangle-down': !me.state.dropdownVisible,
	              'kuma-icon-triangle-up': me.state.dropdownVisible
	            })
	          })
	        );
	        if (type === 'button') {
	          trigger = _react2["default"].createElement(
	            _uxcoreButton2["default"],
	            {
	              className: 'action',
	              type: 'outline',
	              size: 'small',
	              ref: me.saveRef('triggerInstance')
	            },
	            triggerContent
	          );
	        } else {
	          trigger = _react2["default"].createElement(
	            'a',
	            { className: 'action collapse-one', ref: me.saveRef('triggerInstance') },
	            triggerContent
	          );
	        }
	      }
	      options.push(_react2["default"].createElement(
	        _uxcoreMenu2["default"].Item,
	        { key: index, disabled: !!child.props.disabled },
	        _react2["default"].createElement(
	          'a',
	          {
	            onClick: child.props.onClick
	          },
	          child.props.children
	        )
	      ));
	    });
	    var menu = _react2["default"].createElement(
	      _uxcoreMenu2["default"],
	      null,
	      options
	    );

	    var offsetY = type === 'button' ? -31 : -44;

	    var dropdownOptions = {
	      key: 'icon',
	      overlay: menu,
	      ref: me.saveRef('dropdownInstance'),
	      trigger: ['hover'],
	      align: {
	        offset: [0, offsetY]
	      },
	      visible: me.state.dropdownVisible,
	      overlayClassName: me.props.prefixCls + '-collapsed-button-more-dropdown',
	      onVisibleChange: me.handleDropdownVisibleChange
	    };

	    return _react2["default"].createElement(
	      _uxcoreDropdown2["default"],
	      dropdownOptions,
	      trigger
	    );
	  };

	  CollapsedButton.prototype.render = function render() {
	    var me = this;
	    var _me$props2 = me.props,
	        children = _me$props2.children,
	        maxLength = _me$props2.maxLength;

	    var buttons = [];
	    var options = [];
	    if (me.toNum(maxLength) === 1 && _react2["default"].Children.count(children) > 1) {
	      return _react2["default"].createElement(
	        'div',
	        null,
	        me.renderHoverMenu()
	      );
	    }
	    if (_react2["default"].Children.count(children) <= me.toNum(maxLength)) {
	      _react2["default"].Children.forEach(children, function (item, index) {
	        buttons.push(me.renderItem(item, index));
	      });
	    } else {
	      _react2["default"].Children.forEach(children, function (item, index) {
	        if (index < me.toNum(maxLength) - 1) {
	          buttons.push(me.renderItem(item, index));
	        } else {
	          options.push(item);
	        }
	      });
	    }

	    return _react2["default"].createElement(
	      'div',
	      null,
	      buttons,
	      me.renderMore(options)
	    );
	  };

	  return CollapsedButton;
	}(_react2["default"].Component);

	CollapsedButton.displayName = 'CollapsedButton';

	CollapsedButton.Item = CollapsedButtonItem;

	CollapsedButton.propTypes = {
	  children: _react2["default"].PropTypes.any,
	  locale: _react2["default"].PropTypes.string,
	  maxLength: _react2["default"].PropTypes.number,
	  onClick: _react2["default"].PropTypes.func
	};
	CollapsedButton.defaultProps = {
	  maxLength: 3,
	  onClick: function onClick() {}
	};

	exports["default"] = CollapsedButton;
	module.exports = exports['default'];

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Button = __webpack_require__(360);

	var _Button2 = _interopRequireDefault(_Button);

	var _ButtonGroup = __webpack_require__(361);

	var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Button Component for uxcore
	 * @author
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	_Button2["default"].ButtonGroup = _ButtonGroup2["default"];
	module.exports = _Button2["default"];

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var sizeMap = {
	    small: 'sm',
	    medium: '',
	    large: 'lg'
	},
	    typeMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    outline: 'outline',
	    disabled: 'disabled'
	},
	    clsPrefix = 'kuma-button';

	var Button = function (_React$Component) {
	    _inherits(Button, _React$Component);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    Button.prototype.render = function render() {
	        var props = this.props;
	        var type = props.type;
	        var disabled = props.disabled;
	        var className = props.className;
	        var size = props.size;
	        var children = props.children;
	        var htmlType = props.htmlType;

	        var others = _objectWithoutProperties(props, ['type', 'disabled', 'className', 'size', 'children', 'htmlType']);

	        type = disabled ? 'disabled' : type;
	        var clsObj = {};
	        if (className) {
	            clsObj[className] = true;
	        }
	        if (sizeMap[size]) {
	            clsObj[clsPrefix + '-' + sizeMap[size]] = true;
	        }
	        var classNames = (0, _classnames2["default"])(clsPrefix, clsPrefix + '-' + typeMap[type], clsObj);
	        return _react2["default"].createElement(
	            'button',
	            _extends({
	                type: htmlType,
	                className: classNames,
	                disabled: disabled
	            }, others),
	            props.children
	        );
	    };

	    return Button;
	}(_react2["default"].Component);

	Button.displayName = 'uxcore-button';
	Button.propTypes = {
	    /**
	     * @title 尺寸
	     */
	    size: _react2["default"].PropTypes.oneOf(['small', 'medium', 'large']),
	    /**
	     * @title 样式
	     */
	    style: _react2["default"].PropTypes.object,
	    /**
	    * @title 类型
	    */
	    type: _react2["default"].PropTypes.oneOf(['primary', 'secondary', 'outline', 'disabled']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _react2["default"].PropTypes.bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _react2["default"].PropTypes.string,
	    /**
	     * @title 内容
	     */
	    children: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.element, _react2["default"].PropTypes.string]),
	    /**
	     * @title <button> 的 type
	     * @veIgnore
	     */
	    htmlType: _react2["default"].PropTypes.oneOf(['submit', 'button', 'reset'])
	};
	Button.defaultProps = {
	    size: 'medium',
	    type: 'primary',
	    disabled: false,
	    className: '',
	    children: 'Button',
	    htmlType: 'button'
	};

	module.exports = Button;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ButtonGroup = function (_React$Component) {
		_inherits(ButtonGroup, _React$Component);

		function ButtonGroup(props) {
			_classCallCheck(this, ButtonGroup);

			return _possibleConstructorReturn(this, _React$Component.call(this, props));
		}

		ButtonGroup.prototype.render = function render() {
			return _react2["default"].createElement(
				'div',
				{ className: 'kuma-button-group' },
				this.props.children
			);
		};

		return ButtonGroup;
	}(_react2["default"].Component);

	ButtonGroup.displayName = 'ButtonGroup';
	ButtonGroup.propTypes = {};
	ButtonGroup.defaultProps = {};

	module.exports = ButtonGroup;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Dropdown Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(363);

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _rcDropdown = __webpack_require__(364);

	var _rcDropdown2 = _interopRequireDefault(_rcDropdown);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Dropdown = function (_RcDropdown) {
		_inherits(Dropdown, _RcDropdown);

		function Dropdown(props) {
			_classCallCheck(this, Dropdown);

			return _possibleConstructorReturn(this, _RcDropdown.call(this, props));
		}

		return Dropdown;
	}(_rcDropdown2["default"]);

	Dropdown.displayName = 'uxcore-dropdown';
	Dropdown.propTypes = _rcDropdown2["default"].propTypes;
	Dropdown.defaultProps = (0, _objectAssign2["default"])(_rcDropdown2["default"].defaultProps, {
		prefixCls: 'kuma-dropdown',
		overlayClassName: 'uxcore'
	});

	exports["default"] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Dropdown = __webpack_require__(365);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Dropdown2["default"];
	module.exports = exports['default'];

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcTrigger = __webpack_require__(137);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var _placements = __webpack_require__(366);

	var _placements2 = _interopRequireDefault(_placements);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/*
	 var MenuItem = Menu.Item;

	 var menu = <Menu><MenuItem>1</MenuItem></Menu>;

	 <DropDown trigger="click" animationName="" overlay={<>} onSelect={}>
	 <button>open</button>
	 </DropDown>
	*/

	var Dropdown = _react2["default"].createClass({
	  displayName: 'Dropdown',

	  propTypes: {
	    minOverlayWidthMatchTrigger: _react.PropTypes.bool,
	    onVisibleChange: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    children: _react.PropTypes.any,
	    transitionName: _react.PropTypes.string,
	    overlayClassName: _react.PropTypes.string,
	    animation: _react.PropTypes.any,
	    align: _react.PropTypes.object,
	    overlayStyle: _react.PropTypes.object,
	    placement: _react.PropTypes.string,
	    trigger: _react.PropTypes.array,
	    showAction: _react.PropTypes.array,
	    hideAction: _react.PropTypes.array,
	    getPopupContainer: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      minOverlayWidthMatchTrigger: true,
	      prefixCls: 'rc-dropdown',
	      trigger: ['hover'],
	      showAction: [],
	      hideAction: [],
	      overlayClassName: '',
	      overlayStyle: {},
	      defaultVisible: false,
	      onVisibleChange: function onVisibleChange() {},

	      placement: 'bottomLeft'
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    if ('visible' in props) {
	      return {
	        visible: props.visible
	      };
	    }
	    return {
	      visible: props.defaultVisible
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	    var visible = _ref.visible;

	    if (visible !== undefined) {
	      this.setState({
	        visible: visible
	      });
	    }
	  },
	  onClick: function onClick(e) {
	    var props = this.props;
	    var overlayProps = props.overlay.props;
	    // do no call onVisibleChange, if you need click to hide, use onClick and control visible
	    if (!('visible' in props)) {
	      this.setState({
	        visible: false
	      });
	    }
	    if (overlayProps.onClick) {
	      overlayProps.onClick(e);
	    }
	  },
	  onVisibleChange: function onVisibleChange(visible) {
	    var props = this.props;
	    if (!('visible' in props)) {
	      this.setState({
	        visible: visible
	      });
	    }
	    props.onVisibleChange(visible);
	  },
	  getMenuElement: function getMenuElement() {
	    var props = this.props;
	    return _react2["default"].cloneElement(props.overlay, {
	      prefixCls: props.prefixCls + '-menu',
	      onClick: this.onClick
	    });
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    return this.refs.trigger.getPopupDomNode();
	  },
	  afterVisibleChange: function afterVisibleChange(visible) {
	    if (visible && this.props.minOverlayWidthMatchTrigger) {
	      var overlayNode = this.getPopupDomNode();
	      var rootNode = _reactDom2["default"].findDOMNode(this);
	      if (rootNode.offsetWidth > overlayNode.offsetWidth) {
	        overlayNode.style.width = rootNode.offsetWidth + 'px';
	      }
	    }
	  },
	  render: function render() {
	    var _props = this.props;
	    var prefixCls = _props.prefixCls;
	    var children = _props.children;
	    var transitionName = _props.transitionName;
	    var animation = _props.animation;
	    var align = _props.align;
	    var placement = _props.placement;
	    var getPopupContainer = _props.getPopupContainer;
	    var showAction = _props.showAction;
	    var hideAction = _props.hideAction;
	    var overlayClassName = _props.overlayClassName;
	    var overlayStyle = _props.overlayStyle;
	    var trigger = _props.trigger;

	    var otherProps = _objectWithoutProperties(_props, ['prefixCls', 'children', 'transitionName', 'animation', 'align', 'placement', 'getPopupContainer', 'showAction', 'hideAction', 'overlayClassName', 'overlayStyle', 'trigger']);

	    return _react2["default"].createElement(
	      _rcTrigger2["default"],
	      _extends({}, otherProps, {
	        prefixCls: prefixCls,
	        ref: 'trigger',
	        popupClassName: overlayClassName,
	        popupStyle: overlayStyle,
	        builtinPlacements: _placements2["default"],
	        action: trigger,
	        showAction: showAction,
	        hideAction: hideAction,
	        popupPlacement: placement,
	        popupAlign: align,
	        popupTransitionName: transitionName,
	        popupAnimation: animation,
	        popupVisible: this.state.visible,
	        afterPopupVisibleChange: this.afterVisibleChange,
	        popup: this.getMenuElement(),
	        onPopupVisibleChange: this.onVisibleChange,
	        getPopupContainer: getPopupContainer
	      }),
	      children
	    );
	  }
	});

	exports["default"] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 366 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = exports.placements = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  topCenter: {
	    points: ['bc', 'tc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  bottomCenter: {
	    points: ['tc', 'bc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  }
	};

	exports["default"] = placements;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Menu Component for uxcore
	 * @author vincent.bian
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(368);

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _rcMenu = __webpack_require__(114);

	var _rcMenu2 = _interopRequireDefault(_rcMenu);

	var _cssAnimation = __webpack_require__(108);

	var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Menu Component for uxcore
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author vincent.bian
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2015, Uxcore Team, Alinw.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/* eslint-disable no-param-reassign */

	var Menu = function (_React$Component) {
	  _inherits(Menu, _React$Component);

	  function Menu() {
	    _classCallCheck(this, Menu);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Menu.prototype.animate = function animate(node, show, done) {
	    var prefixCls = this.props.prefixCls;

	    var height = void 0;
	    return (0, _cssAnimation2["default"])(node, prefixCls + '-collapse', {
	      start: function start() {
	        if (!show) {
	          node.style.height = node.offsetHeight + 'px';
	          node.style.opacity = 0;
	        } else {
	          height = node.offsetHeight;
	          node.style.height = 0;
	          node.style.opacity = 1;
	          // node.style.transform = 'translate(-10px, 0)';
	        }
	      },
	      active: function active() {
	        node.style.height = (show ? height : 0) + 'px';
	        // node.style.transform = `translate(${show ? '0' : '-10px'}, 0)`;
	      },
	      end: function end() {
	        node.style.height = '';
	        done();
	      }
	    });
	  };

	  Menu.prototype.render = function render() {
	    var me = this;
	    var openAnimation = {
	      enter: function enter(node, done) {
	        return me.animate(node, true, done);
	      },
	      appear: function appear(node, done) {
	        return me.animate(node, true, done);
	      },
	      leave: function leave(node, done) {
	        return me.animate(node, false, done);
	      }
	    };
	    if (this.props.mode === 'inline') {
	      return _react2["default"].createElement(_rcMenu2["default"], _extends({}, this.props, { openAnimation: openAnimation }));
	    }
	    return _react2["default"].createElement(_rcMenu2["default"], this.props);
	  };

	  return Menu;
	}(_react2["default"].Component);

	Menu.defaultProps = {
	  prefixCls: 'kuma-menu',
	  openAnimation: ''
	};
	Menu.propTypes = {
	  mode: _react2["default"].PropTypes.string,
	  prefixCls: _react2["default"].PropTypes.string
	};

	Menu.SubMenu = _rcMenu.SubMenu;
	Menu.Item = _rcMenu.Item;
	Menu.Divider = _rcMenu.Divider;

	exports["default"] = Menu;
	module.exports = exports['default'];

/***/ },
/* 369 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'en-us': {
	    'templated-column': 'Templated Column',
	    more: 'more'
	  },
	  'zh-cn': {
	    'templated-column': '自定义列',
	    more: '更多'
	  }
	};

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * A radio field
	 */

	var Const = __webpack_require__(168);
	var React = __webpack_require__(7);

	var Radio = function (_React$Component) {
	  _inherits(Radio, _React$Component);

	  function Radio() {
	    _classCallCheck(this, Radio);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Radio.prototype.getValue = function getValue() {
	    return this.radio.checked;
	  };

	  Radio.prototype.handleChange = function handleChange(e) {
	    this.props.onChange(e);
	  };

	  Radio.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var renderProps = {
	      className: 'kuma-checkbox',
	      checked: this.props.checked
	    };

	    if (props.mode !== Const.MODE.VIEW) {
	      renderProps.onChange = this.handleChange.bind(this);
	      if (props.disable) {
	        renderProps.disabled = true;
	      }
	    } else {
	      renderProps.disabled = true;
	    }

	    return React.createElement(
	      'label',
	      { className: 'kuma-uxtable-row-selector' },
	      React.createElement('input', _extends({ type: 'radio', ref: function ref(c) {
	          _this2.radio = c;
	        } }, renderProps)),
	      React.createElement('s', null)
	    );
	  };

	  return Radio;
	}(React.Component);

	Radio.propTypes = {
	  onChange: React.PropTypes.func,
	  checked: React.PropTypes.bool
	};

	Radio.defaultProps = {};

	exports["default"] = Radio;
	module.exports = exports['default'];

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var CellField = __webpack_require__(3);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(6);
	var React = __webpack_require__(7);

	var TextField = function (_CellField) {
	  _inherits(TextField, _CellField);

	  function TextField() {
	    _classCallCheck(this, TextField);

	    return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
	  }

	  TextField.prototype.renderContent = function renderContent() {
	    var me = this;
	    var fieldProps = {
	      className: classnames({
	        'kuma-input': true
	      }),
	      onChange: function onChange(e) {
	        me.handleDataChange({
	          value: e.target.value,
	          text: e.target.value
	        });
	      },
	      value: me.props.value
	    };
	    if (me.props.column.config) {
	      (function () {
	        var customProps = _extends({}, me.props.column.config);
	        Object.keys(fieldProps).forEach(function (item) {
	          delete customProps[item];
	        });
	        assign(fieldProps, customProps);
	      })();
	    }
	    return React.createElement('input', fieldProps);
	  };

	  return TextField;
	}(CellField);

	TextField.propTypes = assign({}, CellField.propTypes);

	TextField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = TextField;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var assign = __webpack_require__(6);
	var Select = __webpack_require__(10);
	var React = __webpack_require__(7);
	var NattyFetch = __webpack_require__(373);
	var Promise = __webpack_require__(287);
	var isEqual = __webpack_require__(374);

	var CellField = __webpack_require__(3);

	var Option = Select.Option;


	var getTextFromValue = function getTextFromValue(value) {
	  if (Array.isArray(value)) {
	    return value.map(function (item) {
	      return item.label;
	    }).join(', ');
	  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	    return value.label;
	  }
	  return '';
	};

	var processValue = function processValue(value) {
	  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
	    if (value === undefined || value === null) {
	      return value;
	    }
	    return {
	      key: value
	    };
	  }
	  return value;
	};

	var SelectField = function (_CellField) {
	  _inherits(SelectField, _CellField);

	  function SelectField(props) {
	    _classCallCheck(this, SelectField);

	    var _this = _possibleConstructorReturn(this, _CellField.call(this, props));

	    var me = _this;
	    var data = me.getConfig().data;
	    assign(me.state, {
	      data: typeof data === 'function' ? data(props.rowData) : data
	    });
	    return _this;
	  }

	  SelectField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var me = this;
	    var nextData = me.getConfig(nextProps).data;
	    var data = me.getConfig().data;
	    nextData = typeof nextData === 'function' ? nextData(nextProps.rowData) : nextData;
	    data = typeof data === 'function' ? data(me.props.rowData) : data;
	    if (!isEqual(nextData, data)) {
	      me.setState({
	        data: nextData
	      });
	    }
	  };

	  SelectField.prototype.componentDidMount = function componentDidMount() {
	    _CellField.prototype.componentDidMount.call(this);
	    var me = this;
	    me.fetchData();
	  };

	  SelectField.prototype.getConfig = function getConfig(props) {
	    var me = this;
	    return (props || me.props).column.config || {};
	  };

	  SelectField.prototype.fetchData = function fetchData(value) {
	    var me = this;
	    var config = me.getConfig();
	    var defaultBeforeFetch = function defaultBeforeFetch(data) {
	      return data;
	    };
	    var defaultAfterFetch = function defaultAfterFetch(data) {
	      return data;
	    };
	    if (!config.fetchUrl) {
	      return;
	    }
	    if (me.fetch) {
	      me.fetch.abort();
	    }
	    me.fetch = NattyFetch.create({
	      url: config.fetchUrl,
	      jsonp: config.dataType ? config.dataType === 'jsonp' : /\.jsonp/.test(config.fetchUrl),
	      data: (config.beforeFetch || defaultBeforeFetch)({
	        q: value
	      }),
	      fit: function fit(response) {
	        var content = response.content || response;
	        var success = true;
	        if (response.success !== undefined) {
	          success = response.success;
	        } else if (response.hasError !== undefined) {
	          success = !response.hasError;
	        }
	        return {
	          content: content,
	          success: success
	        };
	      },
	      Promise: Promise
	    });
	    me.fetch().then(function (content) {
	      var fetchData = (config.afterFetch || defaultAfterFetch)(content);
	      me.setState({
	        data: fetchData
	      });
	    })["catch"](function (e) {
	      console.error(e.stack);
	    });
	  };

	  SelectField.prototype.renderChildren = function renderChildren() {
	    var me = this;
	    var _me$props = me.props,
	        column = _me$props.column,
	        rowData = _me$props.rowData;
	    var renderChildren = column.renderChildren;

	    if (renderChildren) {
	      return renderChildren(rowData);
	    }
	    return (me.state.data || []).map(function (item) {
	      return React.createElement(
	        Option,
	        { key: item.value },
	        item.text
	      );
	    });
	  };

	  SelectField.prototype.renderContent = function renderContent() {
	    var me = this;
	    var propsToDelete = ['value', 'data', 'onChange'];
	    var fieldProps = {
	      onChange: function onChange(value) {
	        me.handleDataChange({
	          text: getTextFromValue(value),
	          value: value
	        });
	      },
	      onSearch: function onSearch(key) {
	        if (me.searchTimer) {
	          clearTimeout(me.searchTimer);
	        }
	        me.searchTimer = setTimeout(function () {
	          if (me.getConfig().fetchUrl) {
	            me.fetchData(key);
	          } else {
	            var onSearch = me.getConfig().onSearch;
	            if (typeof onSearch === 'function') {
	              onSearch(key);
	            }
	          }
	        }, me.getConfig().searchDelay || 100);
	      },
	      labelInValue: true,
	      value: processValue(me.props.value)
	    };
	    if (me.props.column.config) {
	      (function () {
	        var customProps = _extends({}, me.props.column.config);
	        propsToDelete.forEach(function (item) {
	          delete customProps[item];
	        });
	        assign(fieldProps, customProps);
	      })();
	    }
	    return React.createElement(
	      Select,
	      fieldProps,
	      me.renderChildren()
	    );
	  };

	  return SelectField;
	}(CellField);

	SelectField.propTypes = assign({}, CellField.propTypes);

	SelectField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = SelectField;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(286));
		else if(typeof define === 'function' && define.amd)
			define("nattyFetch", ["natty-storage"], factory);
		else if(typeof exports === 'object')
			exports["nattyFetch"] = factory(require("natty-storage"));
		else
			root["nattyFetch"] = factory(root["nattyStorage"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(1);

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var hasWindow = 'undefined' !== typeof window;
	var nattyStorage = __webpack_require__(2);

	if (nattyStorage === undefined) {
	    console.warn('Please install the `natty-storage` script which is required by `natty-fetch`, go on with' + ' https://www.npmjs.com/package/natty-storage');
	}

	// 下面两个配置了webpack的alias
	var ajax = __webpack_require__(3);
	var jsonp = __webpack_require__(5);

	var Defer = __webpack_require__(6);
	var util = __webpack_require__(4);
	var event = __webpack_require__(7);

	// 内置插件
	var pluginLoop = __webpack_require__(8);
	var pluginSoon = __webpack_require__(9);

	var extend = util.extend;
	var runAsFn = util.runAsFn;
	var isAbsoluteUrl = util.isAbsoluteUrl;
	var isRelativeUrl = util.isRelativeUrl;
	var noop = util.noop;
	var isBoolean = util.isBoolean;
	var isArray = util.isArray;
	var isFunction = util.isFunction;
	var sortPlainObjectKey = util.sortPlainObjectKey;
	var isEmptyObject = util.isEmptyObject;
	var isPlainObject = util.isPlainObject;
	var dummyPromise = util.dummyPromise;
	var isString = util.isString;

	var NULL = null;
	var EMPTY = '';
	var TRUE = true;
	var FALSE = !TRUE;

	// 全局默认配置
	var defaultGlobalConfig = {

	    // 默认参数
	    data: {},

	    // 请求完成钩子函数
	    didFetch: noop,

	    // 预处理回调
	    fit: noop,

	    // 自定义header, 只针对非跨域的ajax有效, 跨域时将忽略自定义header
	    header: {},

	    // 是否忽律接口自身的并发请求
	    ignoreSelfConcurrent: FALSE,

	    // 有两种格式配置`jsonp`的值
	    // {Boolean}
	    // {Array} eg: [TRUE, 'cb', 'j{id}']
	    jsonp: FALSE,

	    // 是否开启log信息
	    log: FALSE,

	    // 非GET方式对JSONP无效
	    method: 'GET',

	    // 是否开启mock模式
	    mock: FALSE,

	    mockUrl: EMPTY,

	    // 全局`mockUrl`前缀
	    mockUrlPrefix: EMPTY,

	    // 成功回调
	    process: noop,

	    // 私有Promise对象, 如果不想用浏览器原生的Promise对象的话
	    Promise: hasWindow ? window.Promise : NULL,

	    // 默认不执行重试
	    retry: 0,

	    // 使用已有的request方法
	    customRequest: NULL,

	    // 0表示不启动超时处理
	    timeout: 0,

	    // http://zeptojs.com/#$.param
	    traditional: FALSE,

	    url: EMPTY,

	    // 全局`url`前缀
	    urlPrefix: EMPTY,

	    // 是否在`url`上添加时间戳, 用于避免浏览器的304缓存
	    urlStamp: TRUE,

	    // TODO 文档中没有暴露
	    withCredentials: NULL,

	    // 请求之前调用的钩子函数
	    willFetch: noop,

	    // 扩展: storage
	    storage: false,

	    // 插件
	    // 目前只支持两种插件
	    // plugins: [
	    //     nattyFetch.plugin.loop
	    //     nattyFetch.plugin.soon
	    // ]
	    plugins: false
	};

	var runtimeGlobalConfig = extend({}, defaultGlobalConfig);

	var API = (function () {
	    function API(path, options, contextConfig, contextId) {
	        _classCallCheck(this, API);

	        var t = this;
	        t.contextConfig = contextConfig;
	        t._path = path;

	        var config = t.config = t.processAPIOptions(options);

	        /**
	         * 一个`DB`的`api`的实现
	         * @param data {Object|Function}
	         * @returns {Object} Promise Object
	         */
	        t.api = function (data) {
	            data = data || {};
	            // 是否忽略自身的并发请求
	            if (config.ignoreSelfConcurrent && t.api.pending) {
	                return dummyPromise;
	            }

	            if (config.overrideSelfConcurrent && t.api._requester) {
	                t.api._requester.abort();
	            }

	            var vars = t.makeVars(data);

	            if (config.retry === 0) {
	                return t.request(vars, config);
	            } else {
	                return t.tryRequest(vars, config);
	            }
	        };

	        t.api.contextId = contextId;
	        t.api._path = path;

	        // 标记是否正在等待请求返回
	        t.api.pending = FALSE;
	        t.api._requester = NULL;

	        // 取消响应
	        t.api.abort = function () {
	            if (t.api.pending && t.api._requester) {
	                t.api._requester.abort();
	            }
	        };

	        t.api.config = config;

	        t.initStorage();

	        // 启动插件
	        var plugins = isArray(config.plugins) ? config.plugins : [];
	        for (var i = 0, l = plugins.length; i < l; i++) {
	            isFunction(plugins[i]) && plugins[i].call(t, t);
	        }
	    }

	    /**
	     * 关键词
	     *     语意化的
	     *     优雅的
	     *     功能增强的
	     *     底层隔离的
	     */

	    _createClass(API, [{
	        key: 'makeVars',
	        value: function makeVars(data) {
	            var t = this;
	            var config = t.config;

	            // 一次请求的私有相关数据
	            var vars = {
	                mark: {
	                    __api: t._path
	                }
	            };

	            if (config.mock) {
	                vars.mark.__mock = TRUE;
	            }

	            if (config.urlStamp) {
	                vars.mark.__stamp = +new Date();
	            }

	            // `data`必须在请求发生时实时创建
	            data = extend({}, config.data, runAsFn(data));

	            // 将数据参数存在私有标记中, 方便API的`process`方法内部使用
	            vars.data = data;

	            return vars;
	        }

	        /**
	         * 处理API的配置
	         * @param options {Object}
	         */
	    }, {
	        key: 'processAPIOptions',
	        value: function processAPIOptions(options) {

	            var t = this;

	            // 插件是不能覆盖的, 应该追加
	            var plugins = [].concat(t.contextConfig.plugins || [], options.plugins || []);

	            var config = extend({}, t.contextConfig, options, {
	                plugins: plugins
	            });

	            if (config.mock) {
	                config.mockUrl = t.getFullUrl(config);
	            }

	            config.url = t.getFullUrl(config);

	            // 按照[boolean, callbackKeyWord, callbackFunctionName]格式处理
	            if (isArray(options.jsonp)) {
	                config.jsonp = isBoolean(options.jsonp[0]) ? options.jsonp[0] : FALSE;
	                // 这个参数只用于jsonp
	                if (config.jsonp) {
	                    config.jsonpFlag = options.jsonp[1];
	                    config.jsonpCallbackName = options.jsonp[2];
	                }
	            }

	            // 配置自动增强 如果`url`的值有`.jsonp`结尾 则认为是`jsonp`请求
	            // NOTE jsonp是描述正式接口的 不影响mock接口!!!
	            if (!config.mock && !!config.url.match(/\.jsonp(\?.*)?$/)) {
	                config.jsonp = TRUE;
	            }

	            return config;
	        }
	    }, {
	        key: 'initStorage',
	        value: function initStorage() {
	            var t = this;
	            var config = t.config;

	            // 开启`storage`的前提条件
	            var storagePrecondition = config.method === 'GET' || config.jsonp;

	            // 不满足`storage`使用条件的情况下, 开启`storage`将抛出错误
	            if (!storagePrecondition && config.storage === TRUE) {
	                throw new Error('A `' + config.method + '` request CAN NOT use `storage` which is only for `GET/jsonp`' + ' request! Please check the options for `' + t._path + '`');
	            }

	            // 简易开启缓存的写法
	            if (config.storage === TRUE) {
	                config.storage = {
	                    type: 'variable'
	                };
	            }

	            // 决定什么情况下缓存可以开启
	            t.api.storageUseable = isPlainObject(config.storage) && (config.method === 'GET' || config.jsonp) && nattyStorage.support[config.storage.type];
	            // 创建缓存实例
	            if (t.api.storageUseable) {
	                // 当使用`localStorage`时, 强制指定`key`值。如果没指定, 抛错!
	                // 当使用`variable`或`sessionStorage`时, 如果没指定`key`, 则自动生成内部`key`
	                // !!!为什么在使用`localStorage`时必须指定`key`值???
	                // !!!因为当key发生变化时, `localStorage`很容易产生死数据, 必须强制开发者有意识的去维护`key`值
	                if (config.storage.type === 'localStorage') {
	                    if (!config.storage.hasOwnProperty('key') || !config.storage.key) {
	                        throw new Error('`key` is required when `storage.type` is `localStorage`.');
	                    }
	                } else {
	                    config.storage.key = config.storage.key || [t.api.contextId, t._path].join('_');
	                }

	                // `key`和`tag`的选择原则:
	                // `key`只选用相对稳定的值, 减少因为`key`的改变而增加的残留缓存
	                // 经常变化的值用于`tag`, 如一个接口在开发过程中可能使用方式不一样, 会在`jsonp`和`get`之间切换。
	                t.api.storage = nattyStorage(extend({}, config.storage, {
	                    async: TRUE,
	                    tag: [config.storage.tag, config.jsonp ? 'jsonp' : config.method, config.url].join('_') // 使用者的`tag`和内部的`tag`, 要同时生效
	                }));
	            }
	        }

	        /**
	         * 请求数据(从storage或者从网络)
	         * @param vars {Object} 发送的数据
	         * @param config {Object} 已经处理完善的请求配置
	         * @returns {Object} defer对象
	         */
	    }, {
	        key: 'request',
	        value: function request(vars, config) {
	            var t = this;

	            if (t.api.storageUseable) {

	                // 只有GET和JSONP才会有storage生效
	                vars.queryString = isEmptyObject(vars.data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(vars.data));

	                return t.api.storage.has(vars.queryString).then(function (data) {
	                    // alert(JSON.stringify(data, null, 4) + JSON.stringify(sessionStorage, null, 4));
	                    // console.warn('has cached: ', hasValue);
	                    if (data.has) {
	                        return data.value;
	                    } else {
	                        return t.remoteRequest(vars, config);
	                    }
	                });
	            } else {
	                return t.remoteRequest(vars, config);
	            }
	        }

	        /**
	         * 获取正式接口的完整`url`
	         * @param config {Object}
	         */
	    }, {
	        key: 'getFullUrl',
	        value: function getFullUrl(config) {
	            var url = config.mock ? config.mockUrl : config.url;
	            if (!url) return EMPTY;
	            var prefixKey = config.mock ? 'mockUrlPrefix' : 'urlPrefix';
	            return config[prefixKey] && !isAbsoluteUrl(url) && !isRelativeUrl(url) ? config[prefixKey] + url : url;
	        }

	        /**
	         * 发起网络请求
	         * @param vars
	         * @param config
	         * @returns {Promise}
	         */
	    }, {
	        key: 'remoteRequest',
	        value: function remoteRequest(vars, config) {
	            var t = this;

	            // 调用 willFetch 钩子
	            config.willFetch(vars, config, 'remote');

	            // 等待状态在此处开启 在相应的`requester`的`complete`回调中关闭
	            t.api.pending = TRUE;

	            var defer = new Defer(config.Promise);

	            // 创建请求实例requester
	            if (config.customRequest) {
	                // 使用已有的request方法
	                t.api._requester = config.customRequest(vars, config, defer);
	            } else if (config.jsonp) {
	                t.api._requester = t.sendJSONP(vars, config, defer);
	            } else {
	                t.api._requester = t.sendAjax(vars, config, defer);
	            }

	            // 超时处理
	            if (0 !== config.timeout) {
	                setTimeout(function () {
	                    if (t.api.pending && t.api._requester) {
	                        // 取消请求
	                        t.api._requester.abort();

	                        var error = {
	                            timeout: TRUE,
	                            message: 'Timeout By ' + config.timeout + 'ms.'
	                        };
	                        defer.reject(error);
	                        event.fire('g.reject', [error, config]);
	                        event.fire(t.api.contextId + '.reject', [error, config]);
	                    }
	                }, config.timeout);
	            }

	            return defer.promise;
	        }

	        /**
	         * 重试功能的实现
	         * @param vars {Object} 发送的数据
	         * @param config
	         * @returns {Object} defer对象
	         */
	    }, {
	        key: 'tryRequest',
	        value: function tryRequest(vars, config) {
	            var t = this;

	            return new config.Promise(function (resolve, reject) {
	                var retryTime = 0;
	                var request = function request() {
	                    // 更新的重试次数
	                    vars.mark.__retryTime = retryTime;
	                    t.request(vars, config).then(function (content) {
	                        resolve(content);
	                        event.fire('g.resolve', [content, config], config);
	                        event.fire(t.api.contextId + '.resolve', [content, config], config);
	                    }, function (error) {
	                        if (retryTime === config.retry) {
	                            reject(error);
	                        } else {
	                            retryTime++;
	                            request();
	                        }
	                    });
	                };

	                request();
	            });
	        }

	        /**
	         * 处理结构化的响应数据
	         * @param config
	         * @param response
	         * @param defer
	         */
	    }, {
	        key: 'processResponse',
	        value: function processResponse(vars, config, defer, response) {
	            var t = this;

	            // 调用 didFetch 钩子函数
	            config.didFetch(vars, config);

	            // 非标准格式数据的预处理
	            response = config.fit(response, vars);

	            if (response.success) {
	                (function () {
	                    // 数据处理
	                    var content = config.process(response.content, vars);

	                    var resolveDefer = function resolveDefer() {
	                        defer.resolve(content);
	                        event.fire('g.resolve', [content, config], config);
	                        event.fire(t.api.contextId + '.resolve', [content, config], config);
	                    };

	                    if (t.api.storageUseable) {
	                        t.api.storage.set(vars.queryString, content).then(function () {
	                            resolveDefer();
	                        })['catch'](function (e) {
	                            resolveDefer();
	                        });
	                    } else {
	                        resolveDefer();
	                    }
	                })();
	            } else {
	                var error = extend({
	                    message: '`success` is false, ' + t._path
	                }, response.error);
	                // NOTE response是只读的对象!!!
	                defer.reject(error);
	                event.fire('g.reject', [error, config]);
	                event.fire(t.api.contextId + '.reject', [error, config]);
	            }
	        }

	        /**
	         * 发起Ajax请求
	         * @param config {Object} 请求配置
	         * @param defer {Object} defer对象
	         * @param retryTime {undefined|Number} 如果没有重试 将是undefined值 见`createAPI`方法
	         *                                     如果有重试 将是重试的当前次数 见`tryRequest`方法
	         * @returns {Object} xhr对象实例
	         */
	    }, {
	        key: 'sendAjax',
	        value: function sendAjax(vars, config, defer) {
	            var t = this;

	            return ajax({
	                traditional: config.traditional,
	                cache: config.cache,
	                mark: vars.mark,
	                log: config.log,
	                url: config.mock ? config.mockUrl : config.url,
	                method: config.method,
	                data: vars.data,
	                header: config.header,
	                withCredentials: config.withCredentials,
	                // 强制约定json
	                accept: 'json',
	                success: function success(response /*, xhr*/) {
	                    t.processResponse(vars, config, defer, response);
	                },
	                error: function error(status /*, xhr*/) {

	                    var message = undefined;
	                    var flag = undefined;
	                    switch (status) {
	                        case 404:
	                            message = 'Not Found';
	                            break;
	                        case 500:
	                            message = 'Internal Server Error';
	                            break;
	                        // TODO 是否要补充其他明确的服务端错误
	                        default:
	                            message = 'Unknown Server Error';
	                            break;
	                    }

	                    var error = {
	                        status: status,
	                        message: message + ': ' + vars.mark.__api
	                    };

	                    defer.reject(error);
	                    event.fire('g.reject', [error, config]);
	                    event.fire(t.api.contextId + '.reject', [error, config]);
	                },
	                complete: function complete() /*status, xhr*/{
	                    if (vars.retryTime === undefined || vars.retryTime === config.retry) {
	                        //C.log('ajax complete');

	                        t.api.pending = FALSE;
	                        t.api._requester = NULL;
	                    }
	                    //console.log('__complete: pending:', config.pending, 'retryTime:', retryTime, Math.random());
	                }
	            });
	        }

	        /**
	         * 发起jsonp请求
	         * @param vars {Object} 一次请求相关的私有数据
	         * @param config {Object} 请求配置
	         * @param defer {Object} defer对象
	         * @param retryTime {undefined|Number} 如果没有重试 将是undefined值 见`createAPI`方法
	         *                                     如果有重试 将是重试的当前次数 见`tryRequest`方法
	         * @returns {Object} 带有abort方法的对象
	         */
	    }, {
	        key: 'sendJSONP',
	        value: function sendJSONP(vars, config, defer) {
	            var t = this;
	            return jsonp({
	                traditional: config.traditional,
	                log: config.log,
	                mark: vars.mark,
	                url: config.mock ? config.mockUrl : config.url,
	                data: vars.data,
	                cache: config.cache,
	                flag: config.jsonpFlag,
	                callbackName: config.jsonpCallbackName,
	                success: function success(response) {
	                    t.processResponse(vars, config, defer, response);
	                },
	                error: function error() {
	                    var error = {
	                        message: 'Not Accessable JSONP: ' + vars.mark.__api
	                        // TODO show url
	                    };

	                    defer.reject(error);
	                    event.fire('g.reject', [error, config]);
	                    event.fire(t.api.contextId + '.reject', [error, config]);
	                },
	                complete: function complete() {
	                    if (vars.retryTime === undefined || vars.retryTime === config.retry) {
	                        t.api.pending = FALSE;
	                        t.api._requester = NULL;
	                    }
	                }
	            });
	        }
	    }]);

	    return API;
	})();

	var context = (function () {
	    var count = 0;

	    return function (contextId, options) {

	        if (isString(contextId)) {
	            options = options || {};
	        } else {
	            options = contextId || {};
	            contextId = 'c' + count++;
	        }

	        var storage = nattyStorage({
	            type: 'variable',
	            key: contextId
	        });

	        var ctx = {};

	        ctx.api = storage.get();

	        ctx._contextId = contextId;

	        // 插件是不能覆盖的, 应该追加
	        var plugins = [].concat(runtimeGlobalConfig.plugins || [], options.plugins || []);

	        ctx._config = extend({}, runtimeGlobalConfig, options, {
	            plugins: plugins
	        });

	        /**
	         * 创建api
	         * @param namespace {String} optional
	         * @param APIs {Object} 该`namespace`下的`api`配置
	         */
	        ctx.create = function (namespace, APIs) {
	            var hasNamespace = arguments.length === 2 && isString(namespace);

	            if (!hasNamespace) {
	                APIs = namespace;
	            }

	            for (var path in APIs) {
	                storage.set(hasNamespace ? namespace + '.' + path : path, new API(hasNamespace ? namespace + '.' + path : path, runAsFn(APIs[path]), ctx._config, contextId).api);
	            }

	            ctx.api = storage.get();
	        };

	        // 绑定上下文事件
	        ctx.on = function (name, fn) {
	            if (!isFunction(fn)) return;
	            event.on(ctx._contextId + '.' + name, fn);
	            return ctx;
	        };

	        return ctx;
	    };
	})();

	var VERSION = undefined;
	(VERSION = "2.1.3");

	var ONLY_FOR_MODERN_BROWSER = undefined;
	(ONLY_FOR_MODERN_BROWSER = true);

	/**
	 * 简易接口
	 * @param options
	 */
	var nattyFetch = {};

	nattyFetch.create = function (options) {
	    return new API('nattyFetch', runAsFn(options), defaultGlobalConfig, 'global').api;
	};

	extend(nattyFetch, {
	    onlyForModern: ONLY_FOR_MODERN_BROWSER,
	    version: VERSION,
	    // Context,
	    _util: util,
	    _event: event,
	    context: context,
	    ajax: ajax,
	    jsonp: jsonp,

	    /**
	     * 执行全局配置
	     * @param options
	     */
	    setGlobal: function setGlobal(options) {
	        runtimeGlobalConfig = extend({}, defaultGlobalConfig, options);
	        return this;
	    },

	    /**
	     * 获取全局配置
	     * @param property {String} optional
	     * @returns {*}
	     */
	    getGlobal: function getGlobal(property) {
	        return property ? runtimeGlobalConfig[property] : runtimeGlobalConfig;
	    },

	    // 绑定全局事件
	    on: function on(name, fn) {
	        if (!isFunction(fn)) return;
	        event.on('g.' + name, fn);
	        return this;
	    },

	    /**
	     * 插件名称空间
	     */
	    plugin: {
	        loop: pluginLoop,
	        soon: pluginSoon
	    }
	});

	// 内部直接将运行时的全局配置初始化到默认值
	nattyFetch.setGlobal(defaultGlobalConfig);

	module.exports = nattyFetch;

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

	/**
	 * file: ajax.js
	 * ref https://xhr.spec.whatwg.org
	 * ref https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
	 * ref https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
	 * ref https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	 * ref https://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
	 * ref http://www.html5rocks.com/en/tutorials/cors/
	 * @link http://enable-cors.org/index.html
	 */
	'use strict';

	var _require = __webpack_require__(4);

	var extend = _require.extend;
	var appendQueryString = _require.appendQueryString;
	var noop = _require.noop;
	var isCrossDomain = _require.isCrossDomain;
	var isBoolean = _require.isBoolean;
	var param = _require.param;

	var FALSE = false;
	var UNDEFINED = 'undefined';
	var NULL = null;
	var GET = 'GET';
	var SCRIPT = 'script';
	var XML = 'xml';
	var JS0N = 'json'; // NOTE 不能使用`JSON`，这里用数字零`0`代替了字母`O`

	var supportCORS = UNDEFINED !== typeof XMLHttpRequest && 'withCredentials' in new XMLHttpRequest();

	// minetype的简写映射
	// TODO 考虑是否优化
	var acceptToRequestHeader = {
	    // IIS returns `application/x-javascript` 但应该不需要支持
	    '*': '*/' + '*',
	    script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript',
	    json: 'application/json, text/json',
	    xml: 'application/xml, text/xml',
	    html: 'text/html',
	    text: 'text/plain'
	};

	// 设置请求头
	// 没有处理的事情：跨域时使用者传入的多余的Header没有屏蔽 没必要
	var setHeaders = function setHeaders(xhr, options) {
	    var header = {
	        Accept: acceptToRequestHeader[options.accept]
	    };
	    // 如果没有跨域 则打该标识 业界通用做法
	    // TODO 如果是跨域的 只有有限的requestHeader是可以使用的 待补充注释
	    if (!isCrossDomain(options.url)) {
	        header['X-Requested-With'] = 'XMLHttpRequest';
	    }

	    extend(header, options.header);

	    // 如果是`POST`请求，需要`urlencode`
	    if (options.method === 'POST' && !options.header['Content-Type']) {
	        header['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
	    }

	    for (var key in header) {
	        xhr.setRequestHeader(key, header[key]);
	    }
	};

	// 绑定事件
	// NOTE 还得继续使用readystatechange事件
	//      比较遗憾 到现在了依然不能安全的使用load和error等事件 就连PC端的chrome都有下面的问题
	//      500: 触发load loadend 不触发error
	//      404: 触发load loadend 不触发error
	var setEvents = function setEvents(xhr, options) {

	    // 再高级的浏览器都有低级错误! 已经不能在相信了!
	    // MAC OSX Yosemite Safari上的低级错误: 一次`ajax`请求的`loadend`事件完成之后,
	    // 如果执行`xhr.abort()`, 居然还能触发一遍`abort`和`loadend`事件!!!
	    // `__finished`标识一次完整的请求是否结束, 如果已结束, 则不再触发任何事件
	    xhr.__finished = FALSE;

	    var readyStateChangeFn = function readyStateChangeFn(e) {

	        //console.log('xhr.readyState', xhr.readyState, 'xhr.status', xhr.status, xhr);
	        if (xhr.readyState === 4) {
	            // 如果请求被取消(aborted) 则`xhr.status`会是0 所以不会进入`success`回调
	            if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
	                //let mime = xhr.getResponseHeader('Content-Type');
	                var data = xhr.responseText;
	                switch (options.accept) {
	                    case JS0N:
	                        try {
	                            data = JSON.parse(data);
	                        } catch (e) {
	                            console.warn('The response can NOT be parsed to JSON object.', data);
	                        }
	                        break;
	                    case SCRIPT:
	                        (1, eval)(data);
	                        break;
	                    case XML:
	                        data = xhr.responseXML;
	                        break;
	                    //case HTML:
	                    //case TEXT:
	                    default:
	                        break;
	                }
	                options.success(data, xhr);
	            } else {
	                // 如果请求被取消(aborted) 则`xhr.status`会是0 程序也会到达这里 需要排除 不应该触发error
	                !xhr.__aborted && options.error(xhr.status, xhr);
	            }
	        }
	    };

	    // readyState value:
	    //   0: UNSET 未初始化
	    //   1: OPENED
	    //   2: HEADERS_RECEIVED
	    //   3: LOADING
	    //   4: DONE 此时触发load事件
	    xhr.addEventListener("readystatechange", readyStateChangeFn);

	    //xhr.addEventListener('error', function () {
	    //    console.log('xhr event: error');
	    //});

	    //xhr.addEventListener('load', function () {
	    //    console.log('xhr event: load');
	    //});

	    var abortFn = function abortFn() {
	        if (xhr.__finished) {
	            return;
	        }
	        //options.log && console.info('~abort');
	        options.abort(xhr.status, xhr);
	    };

	    xhr.addEventListener('abort', abortFn);

	    var loadedFn = function loadedFn() {
	        if (xhr.__finished) {
	            return;
	        }
	        xhr.__finished = true;
	        //options.log && console.info('~loadend');
	        options.complete(xhr.status, xhr);
	        delete xhr.__aborted;
	    };

	    xhr.addEventListener('loadend', loadedFn);
	};

	var defaultOptions = {
	    url: '',
	    mark: {},
	    method: GET,
	    accept: '*',
	    data: null,
	    header: {},
	    withCredentials: NULL, // 根据`url`是否跨域决定默认值. 如果显式配置该值(必须是布尔值), 则个使用配置值
	    success: noop,
	    error: noop,
	    complete: noop,
	    abort: noop,
	    log: FALSE,
	    traditional: FALSE
	};

	var ajax = function ajax(options) {

	    options = extend({}, defaultOptions, options);

	    // 如果跨域了, 则禁止发送自定义的`header`信息
	    if (isCrossDomain(options.url)) {
	        // 重置`header`, 统一浏览器的行为.
	        // 如果在跨域时发送了自定义`header`, 则:
	        //   标准浏览器会报错: Request header field xxx is not allowed by Access-Control-Allow-Headers in preflight response.
	        //   IE浏览器不报错
	        options.header = {};
	    }

	    var xhr = new XMLHttpRequest();

	    setEvents(xhr, options);

	    xhr.open(options.method, appendQueryString(options.url, extend({}, options.mark, options.method === GET ? options.data : {}), options.traditional));

	    // NOTE 生产环境的Server端, `Access-Control-Allow-Origin`的值一定不要配置成`*`!!! 而且`Access-Control-Allow-Credentials`应该是true!!!
	    // NOTE 如果Server端的`responseHeader`配置了`Access-Control-Allow-Origin`的值是通配符`*` 则前端`withCredentials`是不能使用true值的
	    // NOTE 如果Client端`withCredentials`使用了true值 则后端`responseHeader`中必须配置`Access-Control-Allow-Credentials`是true
	    xhr.withCredentials = isBoolean(options.withCredentials) ? options.withCredentials : isCrossDomain(options.url);

	    // 设置requestHeader
	    setHeaders(xhr, options);

	    // 文档建议说 send方法如果不发送请求体数据 则null参数在某些浏览器上是必须的
	    xhr.send(options.method === GET ? NULL : options.data !== NULL ? param(options.data, options.traditional) : NULL);

	    var originAbort = xhr.abort;

	    // 重写`abort`方法
	    xhr.abort = function () {
	        xhr.__aborted = true;
	        // NOTE 直接调用`originAbort()`时 浏览器会报 `Illegal invocation` 错误
	        originAbort.call(xhr);
	    };

	    return xhr;
	};

	// 移动端不需要fallback
	ajax.fallback = false;
	ajax.supportCORS = supportCORS;

	module.exports = ajax;

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hasWindow = 'undefined' !== typeof window;
	var doc = hasWindow ? document : null;
	var escape = encodeURIComponent;
	var NULL = null;
	var toString = Object.prototype.toString;
	var ARRAY_TYPE = '[object Array]';
	var OBJECT_TYPE = '[object Object]';
	var TRUE = true;
	var FALSE = !TRUE;

	/**
	 * 伪造的`promise`对象
	 * NOTE 伪造的promise对象要支持链式调用 保证和`new Promise`返回的对象行为一致
	 *      dummyPromise.then().catch().finally()
	 */
	var dummyPromise = {
	    dummy: TRUE
	};
	dummyPromise.then = dummyPromise['catch'] = function () {
	    // NOTE 这里用了剪头函数 不能用`return this`
	    return dummyPromise;
	};

	/**
	 * 判断是否是IE8~11, 不包含Edge
	 * @returns {boolean}
	 * @note IE11下 window.ActiveXObject的值很怪异, 所以需要追加 'ActiveXObject' in window 来判断
	 */
	var isIE = hasWindow && (!!window.ActiveXObject || 'ActiveXObject' in window);

	var noop = function noop(v) {
	    return v;
	};

	/**
	 * 变换两个参数的函数到多个参数
	 * @param  {Function} fn 基函数
	 * @return {Function} 变换后的函数
	 * @demo
	 *      function add(x, y) { return x+y; }
	 *      add = redo(add);
	 *      add(1,2,3) => 6
	 */
	var redo = function redo(fn) {
	    return function () {
	        var args = arguments;
	        var ret = fn(args[0], args[1]);
	        for (var i = 2, l = args.length; i < l; i++) {
	            ret = fn(ret, args[i]);
	        }
	        return ret;
	    };
	};

	var random = Math.random;
	var floor = Math.floor;
	var makeRandom = function makeRandom() {
	    return floor(random() * 9e9);
	};

	var absoluteUrlReg = /^(https?:)?\/\//;
	var isAbsoluteUrl = function isAbsoluteUrl(url) {
	    return !!url.match(absoluteUrlReg);
	};

	var relativeUrlReg = /^[\.\/]/;
	var isRelativeUrl = function isRelativeUrl(url) {
	    return !!url.match(relativeUrlReg);
	};

	var BOOLEAN = 'boolean';
	var isBoolean = function isBoolean(v) {
	    return typeof v === BOOLEAN;
	};

	var STRING = 'string';
	var isString = function isString(v) {
	    return typeof v === STRING;
	};

	var FUNCTION = 'function';
	var isFunction = function isFunction(v) {
	    return typeof v === FUNCTION;
	};

	var runAsFn = function runAsFn(v) {
	    return isFunction(v) ? v() : v;
	};

	var NUMBER = 'number';
	var isNumber = function isNumber(v) {
	    return !isNaN(v) && typeof v === NUMBER;
	};

	var OBJECT = 'object';
	var isObject = function isObject(v) {
	    return typeof v === OBJECT && v !== NULL;
	};

	var isWindow = function isWindow(v) {
	    return v !== NULL && v === v.window;
	};

	// 参考了zepto
	var isPlainObject = function isPlainObject(v) {
	    return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype;
	};

	var isEmptyObject = function isEmptyObject(v) {
	    var count = 0;
	    for (var i in v) {
	        if (v.hasOwnProperty(i)) {
	            count++;
	        }
	    }
	    return count === 0;
	};

	var isArray = Array.isArray;
	if (false) {
	    if (!isArray) {
	        isArray = function (v) {
	            return toString.call(v) === ARRAY_TYPE;
	        };
	    }
	}

	/**
	 * 判断是否跨域
	 * @type {Element}
	 * @note 需要特别关注IE8~11的行为是不一样的!!!
	 */
	var originA = undefined;
	if (doc) {
	    originA = doc.createElement('a');
	    originA.href = location.href;
	}
	var isCrossDomain = function isCrossDomain(url) {

	    var requestA = doc.createElement('a');
	    requestA.href = url;
	    //console.log(originA.protocol + '//' + originA.host + '\n' + requestA.protocol + '//' + requestA.host);

	    // 如果`url`的值不包含`protocol`和`host`(比如相对路径), 在标准浏览器下, 会自定补全`requestA`对象的`protocal`和`host`属性.
	    // 但在IE8~11下, 不会自动补全. 即`requestA.protocol`和`requestA.host`的值都是空的.
	    // 在IE11的不同小版本下, requestA.protocol的值有的是`:`, 有的是空字符串, 太奇葩啦!
	    if (false) {
	        if (isIE && (requestA.protocol === ':' || requestA.protocol === '')) {
	            if (requestA.hostname === '') {
	                //alert(0)
	                return false;
	            } else {
	                //alert('1:'+(originA.hostname !== requestA.hostname || originA.port !== requestA.port))
	                return originA.hostname !== requestA.hostname || originA.port !== requestA.port;
	            }
	        }
	    }

	    //let log = {
	    //    'originA.hostname': originA.hostname,
	    //    'requestA.hostname': requestA.hostname,
	    //    'originA.port': originA.port,
	    //    'requestA.port': requestA.port,
	    //    'originA.protocol': originA.protocol,
	    //    'requestA.protocol': requestA.protocol
	    //}
	    //
	    //alert(JSON.stringify(log));

	    // 标准浏览器
	    return originA.hostname !== requestA.hostname || originA.port !== requestA.port || originA.protocol !== requestA.protocol;
	};

	/**
	 * 对象扩展
	 * @param  {Object} receiver
	 * @param  {Object} supplier
	 * @return {Object} 扩展后的receiver对象
	 * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!
	 * @note 这个extend方法是深拷贝方式的!!!
	 * TODO
	 */
	var extend = function extend() {
	    var receiver = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var supplier = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var deepCopy = arguments.length <= 2 || arguments[2] === undefined ? FALSE : arguments[2];

	    for (var key in supplier) {
	        // `supplier`中不是未定义的键 都可以执行扩展
	        if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {
	            if (deepCopy === TRUE) {
	                if (isArray(supplier[key])) {
	                    receiver[key] = [].concat(supplier[key]);
	                } else if (isPlainObject(supplier[key])) {
	                    receiver[key] = extend({}, supplier[key]);
	                } else {
	                    receiver[key] = supplier[key];
	                }
	            } else {
	                receiver[key] = supplier[key];
	            }
	        }
	    }
	    return receiver;
	};

	var likeArray = function likeArray(v) {
	    if (!v) {
	        return false;
	    }
	    return typeof v.length === NUMBER;
	};

	/**
	 *
	 * @param v {Array|Object} 遍历目标对象
	 * @param fn {Function} 遍历器 会被传入两个参数, 分别是`value`和`key`
	 */
	var each = function each(v, fn) {
	    var i = undefined,
	        l = undefined;
	    if (likeArray(v)) {
	        for (i = 0, l = v.length; i < l; i++) {
	            if (fn.call(v[i], v[i], i) === false) return;
	        }
	    } else {
	        for (i in v) {
	            if (fn.call(v[i], v[i], i) === false) return;
	        }
	    }
	};

	/**
	 * 将对象的`键`排序后 返回一个新对象
	 *
	 * @param obj {Object} 被操作的对象
	 * @returns {Object} 返回的新对象
	 * @case 这个函数用于对比两次请求的参数是否一致
	 */
	var sortPlainObjectKey = function sortPlainObjectKey(obj) {
	    var clone = {};
	    var key = undefined;
	    var keyArray = [];
	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            keyArray.push(key);
	            if (isPlainObject(obj[key])) {
	                obj[key] = sortPlainObjectKey(obj[key]);
	            }
	        }
	    }
	    keyArray.sort();
	    for (var i = 0, l = keyArray.length; i < l; i++) {
	        clone[keyArray[i]] = obj[keyArray[i]];
	    }
	    return clone;
	};

	var serialize = function serialize(params, obj, traditional, scope) {
	    var type = undefined,
	        array = isArray(obj),
	        hash = isPlainObject(obj);
	    each(obj, function (value, key) {
	        type = toString.call(value);
	        if (scope) {
	            key = traditional ? scope : scope + '[' + (hash || type == OBJECT_TYPE || type == ARRAY_TYPE ? key : '') + ']';
	        }

	        // 递归
	        if (!scope && array) {
	            params.add(value.name, value.value);
	        }
	        // recurse into nested objects
	        else if (type == ARRAY_TYPE || !traditional && type == OBJECT_TYPE) {
	                serialize(params, value, traditional, key);
	            } else {
	                params.add(key, value);
	            }
	    });
	};

	/**
	 * 功能和`Zepto.param`一样
	 * @param obj {Object}
	 * @param traditional {Boolean}
	 * @returns {string}
	 * $.param({ foo: { one: 1, two: 2 }}) // "foo[one]=1&foo[two]=2)"
	 * $.param({ ids: [1,2,3] })           // "ids[]=1&ids[]=2&ids[]=3"
	 * $.param({ ids: [1,2,3] }, true)     // "ids=1&ids=2&ids=3"
	 * $.param({ foo: 'bar', nested: { will: 'not be ignored' }})    // "foo=bar&nested[will]=not+be+ignored"
	 * $.param({ foo: 'bar', nested: { will: 'be ignored' }}, true)  // "foo=bar&nested=[object+Object]"
	 * $.param({ id: function(){ return 1 + 2 } })  // "id=3"
	 */
	var param = function param(obj, traditional) {
	    var params = [];
	    params.add = function (key, value) {
	        if (isFunction(value)) value = value();
	        if (value == NULL) value = '';
	        params.push(escape(key) + '=' + escape(value));
	    };
	    serialize(params, obj, traditional);
	    return params.join('&').replace(/%20/g, '+');
	};

	var decodeParam = function decodeParam(str) {
	    return decodeURIComponent(str.replace(/\+/g, ' '));
	};

	// 给URL追加查询字符串
	var appendQueryString = function appendQueryString(url, obj, traditional) {
	    var queryString = param(obj, traditional);

	    if (queryString) {
	        return url + (~url.indexOf('?') ? '&' : '?') + queryString;
	    } else {
	        return url;
	    }
	};

	module.exports = {
	    appendQueryString: appendQueryString,
	    decodeParam: decodeParam,
	    dummyPromise: dummyPromise,
	    each: each,
	    extend: redo(extend),
	    isAbsoluteUrl: isAbsoluteUrl,
	    isArray: isArray,
	    isBoolean: isBoolean,
	    isCrossDomain: isCrossDomain,
	    isEmptyObject: isEmptyObject,
	    isFunction: isFunction,
	    isIE: isIE,
	    isNumber: isNumber,
	    isPlainObject: isPlainObject,
	    isRelativeUrl: isRelativeUrl,
	    isString: isString,
	    makeRandom: makeRandom,
	    noop: noop,
	    sortPlainObjectKey: sortPlainObjectKey,
	    param: param,
	    runAsFn: runAsFn
	};

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _require = __webpack_require__(4);

	var appendQueryString = _require.appendQueryString;
	var noop = _require.noop;
	var extend = _require.extend;
	var makeRandom = _require.makeRandom;

	var hasWindow = 'undefined' !== typeof window;
	var win = hasWindow ? window : null;
	var doc = hasWindow ? document : null;
	var NULL = null;
	var SCRIPT = 'script';
	var FALSE = false;

	var removeScript = function removeScript(script) {
	    script.onerror = NULL;
	    script.parentNode.removeChild(script);
	};
	var head = NULL;
	var insertScript = function insertScript(url, options) {
	    var script = doc.createElement(SCRIPT);
	    script.src = url;
	    script.async = true;

	    script.onerror = function (e) {
	        win[options.callbackName] = NULL;
	        options.error(e);
	        options.complete();
	    };

	    head = head || doc.getElementsByTagName('head')[0];
	    head.insertBefore(script, head.firstChild);
	    return script;
	};

	var defaultOptions = {
	    url: '',
	    mark: {},
	    data: {},
	    success: noop,
	    error: noop,
	    complete: noop,
	    log: false,
	    flag: 'callback',
	    callbackName: 'jsonp{id}',
	    traditional: FALSE
	};

	var jsonp = function jsonp(options) {

	    options = extend({}, defaultOptions, options);

	    var callbackName = options.callbackName = options.callbackName.replace(/\{id\}/, makeRandom());

	    var originComplete = options.complete;

	    var script = undefined;

	    // 二次包装的`complete`回调
	    options.complete = function () {
	        // 删除脚本
	        removeScript(script);
	        originComplete();
	    };

	    // 成功回调
	    win[callbackName] = function (data) {
	        win[callbackName] = NULL;
	        options.success(data);
	        options.complete();
	    };

	    // 生成`url`
	    var url = appendQueryString(options.url, extend(_defineProperty({}, options.flag, callbackName), options.mark, options.data), options.traditional);

	    // 插入脚本
	    script = insertScript(url, options);

	    return {
	        abort: function abort() {
	            // 覆盖成功回调为无数据处理版本
	            win[callbackName] = function () {
	                win[callbackName] = NULL;
	            };
	            removeScript(script);
	        }
	    };
	};

	module.exports = jsonp;

	/***/ },
	/* 6 */
	/***/ function(module, exports) {

	"use strict";

	function Defer(Promise) {
	  var t = this;
	  t.promise = new Promise(function (resolve, reject) {
	    t._resolve = resolve;
	    t._reject = reject;
	  });
	}
	Defer.prototype.resolve = function (value) {
	  this._resolve.call(this.promise, value);
	};
	Defer.prototype.reject = function (reason) {
	  this._reject.call(this.promise, reason);
	};
	module.exports = Defer;

	/***/ },
	/* 7 */
	/***/ function(module, exports) {

	'use strict';

	var pre = '__';

	var Event = {
	    on: function on() {
	        var t = this;
	        var args = arguments;
	        if (typeof args[0] === 'string' && typeof args[1] === 'function') {
	            var type = rename(args[0]);
	            t[type] = t[type] || [];
	            t[type].push(args[1]);
	        } else if (typeof args[0] === 'object') {
	            var hash = args[0];
	            for (var i in hash) {
	                t.on(i, hash[i]);
	            }
	        }
	    },
	    off: function off(type, fn) {
	        var t = this;
	        var type = rename(type);
	        if (!fn) {
	            delete t[type];
	        } else {
	            var fns = t[type];
	            fns.splice(fns.indexOf(fn), 1);
	            if (!t[type].length) delete t[type];
	        }
	    },
	    // @param {array} args
	    fire: function fire(type, args, context) {
	        var t = this;
	        var fns = t[rename(type)];
	        if (!fns) return 'NO_EVENT';
	        for (var i = 0, fn; fn = fns[i]; i++) {
	            fn.apply(context || t, [].concat(args));
	        }
	    },
	    hasEvent: function hasEvent(type) {
	        return !!this[rename(type)];
	    }
	};

	function rename(type) {
	    return pre + type;
	}

	module.exports = Event;

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

	/**
	 * 创建轮询支持
	 * @param api {Function} 需要轮询的函数
	 */
	'use strict';

	var FALSE = false;
	var TRUE = true;
	var NULL = null;

	var _require = __webpack_require__(4);

	var isNumber = _require.isNumber;
	var noop = _require.noop;

	/**
	 * 创建轮询支持
	 * @param api {Function} 需要轮询的函数
	 */
	module.exports = function (apiInstance) {
	    var api = apiInstance.api;
	    api.loop = function (options) {
	        var resolveFn = arguments.length <= 1 || arguments[1] === undefined ? noop : arguments[1];
	        var rejectFn = arguments.length <= 2 || arguments[2] === undefined ? noop : arguments[2];

	        if (!options.duration || !isNumber(options.duration)) {
	            throw new Error('Illegal `duration` value for `startLoop` method.');
	            return;
	        }

	        var loopTimer = NULL;

	        var stop = function stop() {
	            clearTimeout(loopTimer);
	            loopTimer = NULL;
	            stop.looping = FALSE;
	        };

	        var sleepAndRequest = function sleepAndRequest() {
	            stop.looping = TRUE;
	            loopTimer = setTimeout(function () {
	                api(options.data).then(resolveFn, rejectFn);
	                sleepAndRequest();
	            }, options.duration);
	        };

	        // NOTE 轮询过程中是不响应服务器端错误的 所以第二个参数是`noop`
	        api(options.data).then(resolveFn, rejectFn);
	        sleepAndRequest();

	        return stop;
	    };
	};

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FALSE = false;
	var TRUE = true;

	var _require = __webpack_require__(4);

	var noop = _require.noop;
	var isEmptyObject = _require.isEmptyObject;
	var sortPlainObjectKey = _require.sortPlainObjectKey;

	module.exports = function (apiInstance) {
	    var t = this;
	    var api = apiInstance.api;
	    var config = api.config;

	    api.soon = function (data) {
	        var successFn = arguments.length <= 1 || arguments[1] === undefined ? noop : arguments[1];
	        var errorFn = arguments.length <= 2 || arguments[2] === undefined ? noop : arguments[2];

	        // 是否忽略自身的并发请求
	        // NOTE 这个地方和内置的api方法不一致
	        if (config.ignoreSelfConcurrent && config.pending) {
	            return;
	        }

	        if (config.overrideSelfConcurrent && config._lastRequester) {
	            config._lastRequester.abort();
	            delete config._lastRequester;
	        }

	        // 一次请求的私有相关数据
	        var vars = t.makeVars(data);

	        var remoteRequest = function remoteRequest() {
	            t.remoteRequest(vars, config).then(function (content) {
	                successFn({
	                    fromStorage: FALSE,
	                    content: content
	                });
	            })['catch'](function (e) {
	                errorFn(e);
	            });
	        };

	        if (api.storageUseable) {

	            // 只有GET和JSONP才会有storage生效
	            vars.queryString = isEmptyObject(vars.data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(vars.data));

	            api.storage.has(vars.queryString).then(function (result) {

	                // console.warn('has cached: ', hasValue);
	                if (result.has) {
	                    successFn({
	                        fromStorage: TRUE,
	                        content: result.value
	                    });
	                }

	                // 在`storage`可用的情况下, 远程请求返回的数据会同步到`storage`
	                remoteRequest();
	            });
	        } else {
	            remoteRequest();
	        }
	    };
	};

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(375);

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}

	module.exports = isEqual;


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(376),
	    isObjectLike = __webpack_require__(227);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(172),
	    equalArrays = __webpack_require__(377),
	    equalByTag = __webpack_require__(383),
	    equalObjects = __webpack_require__(384),
	    getTag = __webpack_require__(260),
	    isArray = __webpack_require__(228),
	    isBuffer = __webpack_require__(229),
	    isTypedArray = __webpack_require__(233);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(378),
	    arraySome = __webpack_require__(381),
	    cacheHas = __webpack_require__(382);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(201),
	    setCacheAdd = __webpack_require__(379),
	    setCacheHas = __webpack_require__(380);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;


/***/ },
/* 379 */
/***/ function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;


/***/ },
/* 380 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;


/***/ },
/* 381 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 382 */
/***/ function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(191),
	    Uint8Array = __webpack_require__(268),
	    eq = __webpack_require__(177),
	    equalArrays = __webpack_require__(377),
	    mapToArray = __webpack_require__(273),
	    setToArray = __webpack_require__(277);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var getAllKeys = __webpack_require__(257);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var CellField = __webpack_require__(3);
	var assign = __webpack_require__(6);
	var RadioGroup = __webpack_require__(386);
	var React = __webpack_require__(7);

	var Item = RadioGroup.Item;

	var RadioField = function (_CellField) {
	  _inherits(RadioField, _CellField);

	  function RadioField() {
	    _classCallCheck(this, RadioField);

	    return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
	  }

	  RadioField.prototype.getTextMap = function getTextMap() {
	    var me = this;
	    var obj = {};
	    var _me$props = me.props,
	        column = _me$props.column,
	        rowData = _me$props.rowData;
	    var config = column.config,
	        renderChildren = column.renderChildren;

	    if (column.renderChildren) {
	      renderChildren().forEach(function (item) {
	        obj[item.props.value] = item.props.text;
	      });
	    } else if (config && config.data) {
	      var configData = [];
	      if (typeof config.data === 'function') {
	        configData = config.data(rowData);
	      }
	      if (config.data instanceof Array) {
	        configData = config.data;
	      }
	      configData.forEach(function (item) {
	        obj[item.value] = item.text;
	      });
	    }
	    return obj;
	  };

	  RadioField.prototype.renderChildren = function renderChildren() {
	    var me = this;
	    var _me$props2 = me.props,
	        column = _me$props2.column,
	        rowData = _me$props2.rowData;
	    var renderChildren = column.renderChildren,
	        config = column.config;

	    if (renderChildren) {
	      return renderChildren(rowData);
	    }
	    if (config) {
	      var configData = [];
	      if (typeof config.data === 'function') {
	        configData = config.data(rowData);
	      }
	      if (config.data instanceof Array) {
	        configData = config.data;
	      }
	      return configData.map(function (item, index) {
	        return React.createElement(Item, { key: index, value: item.value, text: item.text, disabled: item.disabled });
	      });
	    }
	    return [];
	  };

	  RadioField.prototype.renderContent = function renderContent() {
	    var me = this;
	    var textMap = me.getTextMap();
	    var fieldProps = {
	      onChange: function onChange(value) {
	        me.handleDataChange({
	          text: textMap[value],
	          value: value
	        });
	      },
	      value: me.props.value
	    };
	    if (me.props.column.config) {
	      (function () {
	        var customProps = _extends({}, me.props.column.config);
	        Object.keys(fieldProps).forEach(function (item) {
	          delete customProps[item];
	        });
	        assign(fieldProps, customProps);
	      })();
	    }
	    return React.createElement(
	      RadioGroup,
	      fieldProps,
	      me.renderChildren()
	    );
	  };

	  return RadioField;
	}(CellField);

	RadioField.propTypes = assign({}, CellField.propTypes);

	RadioField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = RadioField;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Radiogroup Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(387);

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	* thanks for https://github.com/chenglou/react-radio-group
	* @author: zhouquan.yezq
	* @time  : 5/25 2015
	*/

	var React = __webpack_require__(7);
	var classnames = __webpack_require__(5);

	var Item = __webpack_require__(388);

	var Radiogroup = function (_React$Component) {
	  _inherits(Radiogroup, _React$Component);

	  function Radiogroup(props) {
	    _classCallCheck(this, Radiogroup);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      defaultValue: props.defaultValue
	    };
	    return _this;
	  }

	  Radiogroup.prototype.handleChange = function handleChange(value) {
	    var me = this;
	    me.props.onChange(value);
	  };

	  Radiogroup.prototype.processChild = function processChild() {
	    var me = this;
	    var length = React.Children.count(me.props.children);
	    if (!length) return false;
	    var elements = React.Children.map(me.props.children, function (child, index) {
	      if (!!child.type && child.type.displayName === 'RadiogroupItem') {
	        return React.cloneElement(child, {
	          jsxdisabled: me.props.disabled,
	          onChange: me.handleChange.bind(me),
	          key: index,
	          checked: me.props.value === child.props.value
	        });
	      }
	      return null;
	    });
	    return elements;
	  };

	  Radiogroup.prototype.render = function render() {
	    var me = this;
	    return React.createElement(
	      'div',
	      {
	        className: classnames(_defineProperty({
	          'kuma-radio-group': true
	        }, me.props.className, !!me.props.className))
	      },
	      me.processChild()
	    );
	  };

	  return Radiogroup;
	}(React.Component);

	Radiogroup.displayName = 'Radiogroup';
	Radiogroup.propTypes = {
	  value: React.PropTypes.string,
	  defaultValue: React.PropTypes.string,
	  onChange: React.PropTypes.func
	};
	Radiogroup.defaultProps = {
	  value: '',
	  onChange: function onChange() {}
	};

	Radiogroup.Item = Item;

	module.exports = Radiogroup;

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var React = __webpack_require__(7);

	var RadiogroupItem = function (_React$Component) {
	  _inherits(RadiogroupItem, _React$Component);

	  function RadiogroupItem() {
	    _classCallCheck(this, RadiogroupItem);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  RadiogroupItem.prototype.handleChange = function handleChange() {
	    var me = this;
	    me.props.onChange(me.props.value);
	  };

	  RadiogroupItem.prototype.render = function render() {
	    var me = this;
	    var disabled = false;
	    if (me.props.disabled !== undefined) {
	      disabled = me.props.disabled;
	    } else if (me.props.jsxdisabled !== undefined) {
	      disabled = me.props.jsxdisabled;
	    }
	    return React.createElement(
	      "label",
	      { className: "" + me.props.prefixCls },
	      React.createElement("input", {
	        type: "radio",
	        disabled: disabled,
	        className: "kuma-checkbox",
	        checked: me.props.checked,
	        onChange: me.handleChange.bind(me)
	      }),
	      React.createElement("s", null),
	      React.createElement(
	        "span",
	        { className: me.props.prefixCls + "-content" },
	        me.props.text
	      )
	    );
	  };

	  return RadiogroupItem;
	}(React.Component);

	RadiogroupItem.displayName = 'RadiogroupItem';
	RadiogroupItem.propTypes = {
	  prefixCls: React.PropTypes.string,
	  text: React.PropTypes.string,
	  value: React.PropTypes.string,
	  className: React.PropTypes.string,
	  disabled: React.PropTypes.bool,
	  onChange: React.PropTypes.func
	};
	RadiogroupItem.defaultProps = {
	  prefixCls: 'kuma-radio-group-item',
	  text: '',
	  value: '',
	  className: 'kuma-checkbox',
	  onChange: function onChange() {}
	};

	module.exports = RadiogroupItem;

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	var debounce = __webpack_require__(390),
	    isObject = __webpack_require__(196);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	module.exports = throttle;


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(196),
	    now = __webpack_require__(391),
	    toNumber = __webpack_require__(392);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	module.exports = debounce;


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(192);

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	module.exports = now;


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(196),
	    isSymbol = __webpack_require__(393);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = toNumber;


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(190),
	    isObjectLike = __webpack_require__(227);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * EmptyData Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(395);

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * EmptyData Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2015-2016, Uxcore Team, Alinw.
	 * All rights reserved.
	 */
	var React = __webpack_require__(7);
	var classnames = __webpack_require__(5);

	var EmptyData = function (_React$Component) {
	  _inherits(EmptyData, _React$Component);

	  function EmptyData(props) {
	    _classCallCheck(this, EmptyData);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {};
	    return _this;
	  }

	  EmptyData.prototype.render = function render() {
	    var _classnames;

	    var me = this;
	    var _me$props = me.props,
	        prefixCls = _me$props.prefixCls,
	        children = _me$props.children,
	        type = _me$props.type,
	        icon = _me$props.icon,
	        largeIcon = _me$props.largeIcon,
	        style = _me$props.style,
	        className = _me$props.className;

	    var iconMap = {
	      normal: icon,
	      large: largeIcon
	    };
	    return React.createElement(
	      'div',
	      {
	        className: classnames((_classnames = {}, _defineProperty(_classnames, prefixCls + ' ' + type, true), _defineProperty(_classnames, className, !!className), _classnames)),
	        style: style
	      },
	      React.createElement('div', {
	        className: prefixCls + '-icon',
	        style: {
	          backgroundImage: 'url(' + iconMap[type] + ')'
	        }
	      }),
	      React.createElement(
	        'div',
	        { className: prefixCls + '-content' },
	        children
	      )
	    );
	  };

	  return EmptyData;
	}(React.Component);

	EmptyData.defaultProps = {
	  prefixCls: 'kuma-empty-data',
	  children: '暂无数据',
	  type: 'normal',
	  icon: 'https://img.alicdn.com/tps/TB1SFFFOpXXXXXzXVXXXXXXXXXX-166-168.png',
	  largeIcon: 'https://img.alicdn.com/tps/TB1oWW_OXXXXXXyapXXXXXXXXXX-390-390.png'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	EmptyData.propTypes = {
	  prefixCls: React.PropTypes.string,
	  icon: React.PropTypes.string,
	  largeIcon: React.PropTypes.string,
	  style: React.PropTypes.object,
	  type: React.PropTypes.oneOf(['normal', 'large'])
	};

	EmptyData.displayName = 'EmptyData';

	module.exports = EmptyData;

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ActionBar = __webpack_require__(397);

	var _ActionBar2 = _interopRequireDefault(_ActionBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _ActionBar2["default"];
	module.exports = exports['default'];

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var _uxcoreButton = __webpack_require__(359);

	var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _SearchBar = __webpack_require__(398);

	var _SearchBar2 = _interopRequireDefault(_SearchBar);

	var _ColumnPicker = __webpack_require__(399);

	var _ColumnPicker2 = _interopRequireDefault(_ColumnPicker);

	var _LinkBar = __webpack_require__(406);

	var _LinkBar2 = _interopRequireDefault(_LinkBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Grid Component for uxcore
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zhouquan.yezq
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2015, UXCore Team, Alinw.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var ActionBar = function (_React$Component) {
	  _inherits(ActionBar, _React$Component);

	  function ActionBar() {
	    _classCallCheck(this, ActionBar);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  /**
	   *  convert ActionBar config from hash to array
	   */
	  ActionBar.prototype.getActionItem = function getActionItem(config) {
	    var items = [];
	    if (config instanceof Array) {
	      items = config;
	    } else if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
	      Object.keys(config).forEach(function (item) {
	        items.push({
	          title: item,
	          callback: config[item]
	        });
	      });
	    }
	    return items;
	  };

	  ActionBar.prototype.handleSearch = function handleSearch(value) {
	    this.props.onSearch(value);
	  };

	  ActionBar.prototype.renderActionBtn = function renderActionBtn(item, index) {
	    var me = this;
	    var itemProps = {
	      className: me.props.prefixCls + '-item',
	      onClick: item.callback || function () {},
	      type: 'secondary',
	      key: index
	    };
	    if (!!item.render && typeof item.render === 'function') {
	      return _react2["default"].createElement(
	        'div',
	        itemProps,
	        item.render(item.title)
	      );
	    }
	    if (index === 0) {
	      itemProps.type = 'outline';
	    }
	    return _react2["default"].createElement(
	      _uxcoreButton2["default"],
	      _extends({
	        size: 'medium',
	        disabled: item.disabled || false
	      }, itemProps),
	      item.title
	    );
	  };

	  ActionBar.prototype.renderLinkBar = function renderLinkBar() {
	    var me = this;
	    var linkBar = me.props.linkBar;

	    return _react2["default"].createElement(_LinkBar2["default"], { config: linkBar });
	  };

	  ActionBar.prototype.renderSearchBar = function renderSearchBar() {
	    if (this.props.showSearch) {
	      var me = this;
	      var searchBarProps = {
	        onSearch: me.handleSearch.bind(me),
	        key: 'searchbar',
	        placeholder: me.props.searchBarPlaceholder
	      };
	      return _react2["default"].createElement(_SearchBar2["default"], searchBarProps);
	    }
	    return null;
	  };

	  ActionBar.prototype.renderColumnPicker = function renderColumnPicker() {
	    var me = this;
	    var _me$props = me.props,
	        showColumnPicker = _me$props.showColumnPicker,
	        columns = _me$props.columns,
	        handleColumnPickerChange = _me$props.handleColumnPickerChange,
	        checkboxColumnKey = _me$props.checkboxColumnKey,
	        width = _me$props.width,
	        locale = _me$props.locale;

	    if (!showColumnPicker) {
	      return null;
	    }
	    return _react2["default"].createElement(_ColumnPicker2["default"], {
	      columns: columns,
	      locale: locale,
	      dropdownMaxWidth: width,
	      checkboxColumnKey: checkboxColumnKey,
	      handleColumnPickerChange: handleColumnPickerChange
	    });
	  };

	  ActionBar.prototype.render = function render() {
	    var _classnames;

	    var me = this;
	    var props = me.props;
	    var barConfig = props.actionBarConfig;

	    return _react2["default"].createElement(
	      'div',
	      {
	        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, props.prefixCls, !!props.prefixCls), _defineProperty(_classnames, 'fn-clear', true), _classnames))
	      },
	      me.getActionItem(barConfig).map(function (item, index) {
	        return me.renderActionBtn(item, index);
	      }),
	      me.renderSearchBar(),
	      me.renderColumnPicker(),
	      me.renderLinkBar()
	    );
	  };

	  return ActionBar;
	}(_react2["default"].Component);

	ActionBar.propTypes = {
	  showSearch: _react2["default"].PropTypes.bool,
	  onSearch: _react2["default"].PropTypes.func,
	  prefixCls: _react2["default"].PropTypes.string
	};

	ActionBar.defaultProps = {
	  prefixCls: 'kuma-uxtable-actionbar'
	};

	module.exports = ActionBar;

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * Grid Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, UXCore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(7);

	var SearchBar = function (_React$Component) {
	  _inherits(SearchBar, _React$Component);

	  function SearchBar(props) {
	    _classCallCheck(this, SearchBar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      searchTxt: ''
	    };
	    return _this;
	  }

	  SearchBar.prototype.onKeyDown = function onKeyDown(e) {
	    if (e.keyCode === 13) {
	      this.doSearch();
	    }
	  };

	  SearchBar.prototype.doSearch = function doSearch() {
	    this.props.onSearch(this.state.searchTxt);
	  };

	  SearchBar.prototype.handleChange = function handleChange(e) {
	    this.setState({
	      searchTxt: e.target.value
	    });
	  };

	  SearchBar.prototype.render = function render() {
	    var me = this;
	    var placeholder = me.props.placeholder;

	    return React.createElement(
	      'div',
	      { className: this.props.prefixCls },
	      React.createElement('input', {
	        type: 'text',
	        className: 'kuma-input',
	        placeholder: placeholder,
	        value: this.state.value,
	        onKeyDown: this.onKeyDown.bind(this),
	        onChange: this.handleChange.bind(this)
	      }),
	      React.createElement('i', { className: 'kuma-icon kuma-icon-search', onClick: this.doSearch.bind(this) })
	    );
	  };

	  return SearchBar;
	}(React.Component);

	SearchBar.propTypes = {
	  onSearch: React.PropTypes.func,
	  prefixCls: React.PropTypes.string
	};

	SearchBar.defaultProps = {
	  prefixCls: 'kuma-uxtable-searchbar',
	  onSearch: function onSearch() {}
	};

	module.exports = SearchBar;

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var _uxcoreTree = __webpack_require__(400);

	var _uxcoreTree2 = _interopRequireDefault(_uxcoreTree);

	var _i18n = __webpack_require__(369);

	var _i18n2 = _interopRequireDefault(_i18n);

	var _util = __webpack_require__(290);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var TreeNode = _uxcoreTree2["default"].TreeNode;

	var ColumnPicker = function (_React$Component) {
	  _inherits(ColumnPicker, _React$Component);

	  function ColumnPicker(props) {
	    _classCallCheck(this, ColumnPicker);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      visible: false
	    };
	    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
	    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
	    return _this;
	  }

	  ColumnPicker.prototype.componentDidUpdate = function componentDidUpdate() {
	    var me = this;
	    if (me.state.visible) {
	      var dropDownDOMNode = me.getDropDownDOMNOde();
	      var commonTreeDOMNode = me.commonTree.refs.tree;
	      var width = commonTreeDOMNode.offsetWidth + 41;
	      for (var i = 0; i < me.groupNum; i++) {
	        width += me['groupTree-' + i].refs.tree.offsetWidth;
	      }
	      var maxWidth = typeof me.props.dropdownMaxWidth === 'number' ? me.props.dropdownMaxWidth : 1000;
	      dropDownDOMNode.style.width = (width <= maxWidth ? width : maxWidth) + 'px';
	    }
	  };

	  ColumnPicker.prototype.getDropDownDOMNOde = function getDropDownDOMNOde() {
	    return this.dropDownDOMNode;
	  };

	  // getSelectedKeys() {
	  //   const me = this;
	  //   const { columns } = me.props;
	  //   const realColumns = [];
	  //   const selectedKeys = [];
	  //   columns.forEach((item) => {
	  //     const isGroup = {}.hasOwnProperty.call(item, 'columns') && typeof item.columns === 'object';
	  //     if (isGroup) {
	  //       // realColumns = realColumns.concat(item.columns);
	  //     } else {
	  //       realColumns.push(item);
	  //     }
	  //   });
	  //   realColumns.forEach((item) => {
	  //     if (!item.hidden) {
	  //       selectedKeys.push(item.dataKey);
	  //     }
	  //   });
	  //   return selectedKeys;
	  // }

	  ColumnPicker.prototype.handlePickerSelect = function handlePickerSelect(groupName, selectedKeys) {
	    this.props.handleColumnPickerChange(selectedKeys, groupName);
	  };

	  ColumnPicker.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	      return false;
	    };
	  };

	  ColumnPicker.prototype.handleMouseEnter = function handleMouseEnter() {
	    var me = this;
	    if (me.hideDropDownTimer) {
	      clearTimeout(me.hideDropDownTimer);
	    }
	    if (!me.state.visible) {
	      me.setState({
	        visible: true
	      });
	    }
	  };

	  ColumnPicker.prototype.handleMouseLeave = function handleMouseLeave() {
	    var me = this;
	    me.hideDropDownTimer = setTimeout(function () {
	      me.setState({
	        visible: false
	      });
	    }, 200);
	  };

	  ColumnPicker.prototype.renderTree = function renderTree() {
	    var me = this;
	    var columns = me.props.columns;

	    var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
	    notRenderColumns.push(me.props.checkboxColumnKey);
	    var options = [];
	    var groupTree = [];
	    var selectedKeys = (0, _util.getSelectedKeys)(columns);
	    me.groupNum = 0;
	    columns.forEach(function (item) {
	      // the column is not the notRender one and is not the group.
	      var isGroup = {}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object';
	      if (isGroup) {
	        me.hasGroup = true;
	      }
	      if (notRenderColumns.indexOf(item.dataKey) === -1 && !isGroup) {
	        if (item.dataKey) {
	          options.push(_react2["default"].createElement(TreeNode, {
	            key: item.dataKey,
	            title: typeof item.title === 'function' ? item.title() : item.title
	          }));
	        }
	      } else if (isGroup) {
	        groupTree.push(me.renderGroupTree(item, me.groupNum));
	        me.groupNum++;
	      }
	    });

	    var commonGroupName = (0, _util.getConsts)().commonGroup;
	    var commonTree = _react2["default"].createElement(
	      _uxcoreTree2["default"],
	      {
	        checkable: true,
	        multiple: true,
	        selectable: false,
	        className: !me.hasGroup ? 'no-group' : '',
	        ref: me.saveRef('commonTree'),
	        checkedKeys: selectedKeys,
	        onCheck: me.handlePickerSelect.bind(me, commonGroupName)
	      },
	      options
	    );

	    if (!me.hasGroup) {
	      return commonTree;
	    }

	    return _react2["default"].createElement(
	      'div',
	      null,
	      commonTree,
	      groupTree
	    );
	  };

	  ColumnPicker.prototype.renderDropDown = function renderDropDown() {
	    var me = this;
	    var prefixCls = me.props.prefixCls;

	    var style = {
	      display: me.state.visible ? 'block' : 'none'
	    };
	    return _react2["default"].createElement(
	      'div',
	      {
	        className: prefixCls + '-dropdown',
	        style: style,
	        ref: me.saveRef('dropDownDOMNode'),
	        onMouseEnter: me.handleMouseEnter,
	        onMouseLeave: me.handleMouseLeave
	      },
	      me.renderTree()
	    );
	  };

	  ColumnPicker.prototype.renderGroupTree = function renderGroupTree(group, index) {
	    var me = this;
	    var options = (group.columns || []).map(function (item) {
	      return _react2["default"].createElement(TreeNode, {
	        key: item.dataKey,
	        title: typeof item.title === 'function' ? item.title() : item.title
	      });
	    });

	    var selectedKeys = (0, _util.getSelectedKeys)(group.columns);

	    return _react2["default"].createElement(
	      _uxcoreTree2["default"],
	      {
	        key: group.group,
	        ref: this.saveRef('groupTree-' + index),
	        checkable: true,
	        multiple: true,
	        selectable: false,
	        defaultExpandAll: true,
	        checkedKeys: selectedKeys,
	        onCheck: me.handlePickerSelect.bind(me, group.group)
	      },
	      _react2["default"].createElement(
	        TreeNode,
	        { title: group.group, key: group.group },
	        options
	      )
	    );
	  };

	  ColumnPicker.prototype.render = function render() {
	    var _classnames;

	    var me = this;
	    var _me$props = me.props,
	        prefixCls = _me$props.prefixCls,
	        locale = _me$props.locale;

	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls },
	      _react2["default"].createElement(
	        'div',
	        {
	          className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-trigger', true), _defineProperty(_classnames, prefixCls + '-trigger__dropdown-visible', !!me.state.visible), _classnames)),
	          onMouseEnter: me.handleMouseEnter,
	          onMouseLeave: me.handleMouseLeave
	        },
	        _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-list' }),
	        _react2["default"].createElement(
	          'span',
	          { className: prefixCls + '-title' },
	          _i18n2["default"][locale]['templated-column']
	        )
	      ),
	      me.renderDropDown()
	    );
	  };

	  return ColumnPicker;
	}(_react2["default"].Component);

	ColumnPicker.defaultProps = {
	  prefixCls: 'kuma-uxtable-column-picker',
	  locale: 'zh-cn',
	  columns: []
	};
	ColumnPicker.propTypes = {
	  prefixCls: _react2["default"].PropTypes.string,
	  locale: _react2["default"].PropTypes.string,
	  columns: _react2["default"].PropTypes.array,
	  handleColumnPickerChange: _react2["default"].PropTypes.func
	};

	ColumnPicker.displayName = 'ColumnPicker';

	exports["default"] = ColumnPicker;
	module.exports = exports['default'];

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tree Component for uxcore
	 * @author
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(401);

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _rcTree = __webpack_require__(402);

	var _rcTree2 = _interopRequireDefault(_rcTree);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _util = __webpack_require__(404);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/* eslint-disable no-underscore-dangle */

	var Tree = function (_RcTree) {
	  _inherits(Tree, _RcTree);

	  function Tree() {
	    _classCallCheck(this, Tree);

	    return _possibleConstructorReturn(this, _RcTree.apply(this, arguments));
	  }

	  Tree.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var supportSVG = false;
	    if (document) {
	      supportSVG = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	    }
	    var domProps = {
	      className: (0, _classnames2["default"])(props.className, props.prefixCls, {
	        'use-svg': supportSVG,
	        'no-svg': !supportSVG
	      }),
	      role: 'tree-node'
	    };
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    // console.log(this.state.expandedKeys, this._rawExpandedKeys, props.children);
	    if (props.checkable && (this.checkedKeysChange || props.loadData)) {
	      if (props.checkStrictly) {
	        this.treeNodesStates = {};
	        (0, _util.loopAllChildren)(props.children, function (item, index, pos, keyOrPos, siblingPosition) {
	          _this2.treeNodesStates[pos] = {
	            siblingPosition: siblingPosition
	          };
	        });
	      } else if (props._treeNodesStates) {
	        this.treeNodesStates = props._treeNodesStates.treeNodesStates;
	        this.halfCheckedKeys = props._treeNodesStates.halfCheckedKeys;
	        this.checkedKeys = props._treeNodesStates.checkedKeys;
	      } else {
	        (function () {
	          var checkedKeys = _this2.state.checkedKeys;
	          var checkKeys = void 0;
	          if (!props.loadData && _this2.checkKeys && _this2._checkedKeys && (0, _util.arraysEqual)(_this2._checkedKeys, checkedKeys)) {
	            // if checkedKeys the same as _checkedKeys from onCheck, use _checkedKeys.
	            checkKeys = _this2.checkKeys;
	          } else {
	            (function () {
	              var checkedPositions = [];
	              _this2.treeNodesStates = {};
	              (0, _util.loopAllChildren)(props.children, function (item, index, pos, keyOrPos, siblingPosition) {
	                _this2.treeNodesStates[pos] = {
	                  node: item,
	                  key: keyOrPos,
	                  checked: false,
	                  halfChecked: false,
	                  siblingPosition: siblingPosition
	                };
	                if (checkedKeys.indexOf(keyOrPos) !== -1) {
	                  _this2.treeNodesStates[pos].checked = true;
	                  checkedPositions.push(pos);
	                }
	              });
	              // if the parent node's key exists, it all children node will be checked
	              (0, _util.handleCheckState)(_this2.treeNodesStates, (0, _util.filterParentPosition)(checkedPositions), true);
	              checkKeys = (0, _util.getCheck)(_this2.treeNodesStates);
	            })();
	          }
	          _this2.halfCheckedKeys = checkKeys.halfCheckedKeys;
	          _this2.checkedKeys = checkKeys.checkedKeys;
	        })();
	      }
	    }

	    return _react2["default"].createElement(
	      'ul',
	      _extends({}, domProps, { unselectable: true, ref: 'tree' }),
	      _react2["default"].Children.map(props.children, this.renderTreeNode, this)
	    );
	  };

	  return Tree;
	}(_rcTree2["default"]);

	Tree.displayName = 'Tree';
	Tree.propTypes = _rcTree2["default"].propTypes;
	Tree.defaultProps = (0, _objectAssign2["default"])(_rcTree2["default"].defaultProps, {
	  prefixCls: 'kuma-tree',
	  showIcon: false
	});

	Tree.TreeNode = _rcTree2["default"].TreeNode;

	exports["default"] = Tree;
	module.exports = exports['default'];

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Tree = __webpack_require__(403);

	var _Tree2 = _interopRequireDefault(_Tree);

	var _TreeNode = __webpack_require__(405);

	var _TreeNode2 = _interopRequireDefault(_TreeNode);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_Tree2["default"].TreeNode = _TreeNode2["default"];

	exports["default"] = _Tree2["default"];
	module.exports = exports['default'];

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _util = __webpack_require__(404);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function noop() {}

	var Tree = function (_React$Component) {
	  _inherits(Tree, _React$Component);

	  function Tree(props) {
	    _classCallCheck(this, Tree);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    ['onKeyDown', 'onCheck'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	    _this.contextmenuKeys = [];
	    _this.checkedKeysChange = true;

	    _this.state = {
	      expandedKeys: _this.getDefaultExpandedKeys(props),
	      checkedKeys: _this.getDefaultCheckedKeys(props),
	      selectedKeys: _this.getDefaultSelectedKeys(props),
	      dragNodesKeys: '',
	      dragOverNodeKey: '',
	      dropNodeKey: ''
	    };
	    return _this;
	  }

	  Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var expandedKeys = this.getDefaultExpandedKeys(nextProps, true);
	    var checkedKeys = this.getDefaultCheckedKeys(nextProps, true);
	    var selectedKeys = this.getDefaultSelectedKeys(nextProps, true);
	    var st = {};
	    if (expandedKeys) {
	      st.expandedKeys = expandedKeys;
	    }
	    if (checkedKeys) {
	      if (nextProps.checkedKeys === this.props.checkedKeys) {
	        this.checkedKeysChange = false;
	      } else {
	        this.checkedKeysChange = true;
	      }
	      st.checkedKeys = checkedKeys;
	    }
	    if (selectedKeys) {
	      st.selectedKeys = selectedKeys;
	    }
	    this.setState(st);
	  };

	  Tree.prototype.onDragStart = function onDragStart(e, treeNode) {
	    this.dragNode = treeNode;
	    this.dragNodesKeys = this.getDragNodes(treeNode);
	    var st = {
	      dragNodesKeys: this.dragNodesKeys
	    };
	    var expandedKeys = this.getExpandedKeys(treeNode, false);
	    if (expandedKeys) {
	      // Controlled expand, save and then reset
	      this.getRawExpandedKeys();
	      st.expandedKeys = expandedKeys;
	    }
	    this.setState(st);
	    this.props.onDragStart({
	      event: e,
	      node: treeNode
	    });
	    this._dropTrigger = false;
	  };

	  Tree.prototype.onDragEnterGap = function onDragEnterGap(e, treeNode) {
	    var offsetTop = (0, _util.getOffset)(treeNode.refs.selectHandle).top;
	    var offsetHeight = treeNode.refs.selectHandle.offsetHeight;
	    var pageY = e.pageY;
	    var gapHeight = 2;
	    if (pageY > offsetTop + offsetHeight - gapHeight) {
	      this.dropPosition = 1;
	      return 1;
	    }
	    if (pageY < offsetTop + gapHeight) {
	      this.dropPosition = -1;
	      return -1;
	    }
	    this.dropPosition = 0;
	    return 0;
	  };

	  Tree.prototype.onDragEnter = function onDragEnter(e, treeNode) {
	    var enterGap = this.onDragEnterGap(e, treeNode);
	    if (this.dragNode.props.eventKey === treeNode.props.eventKey && enterGap === 0) {
	      this.setState({
	        dragOverNodeKey: ''
	      });
	      return;
	    }
	    var st = {
	      dragOverNodeKey: treeNode.props.eventKey
	    };
	    var expandedKeys = this.getExpandedKeys(treeNode, true);
	    if (expandedKeys) {
	      this.getRawExpandedKeys();
	      st.expandedKeys = expandedKeys;
	    }
	    this.setState(st);
	    this.props.onDragEnter({
	      event: e,
	      node: treeNode,
	      expandedKeys: expandedKeys && [].concat(_toConsumableArray(expandedKeys)) || [].concat(_toConsumableArray(this.state.expandedKeys))
	    });
	  };

	  Tree.prototype.onDragOver = function onDragOver(e, treeNode) {
	    this.props.onDragOver({ event: e, node: treeNode });
	  };

	  Tree.prototype.onDragLeave = function onDragLeave(e, treeNode) {
	    this.props.onDragLeave({ event: e, node: treeNode });
	  };

	  Tree.prototype.onDrop = function onDrop(e, treeNode) {
	    var key = treeNode.props.eventKey;
	    this.setState({
	      dragOverNodeKey: '',
	      dropNodeKey: key
	    });
	    if (this.dragNodesKeys.indexOf(key) > -1) {
	      if (console.warn) {
	        console.warn('can not drop to dragNode(include it\'s children node)');
	      }
	      return false;
	    }

	    var posArr = treeNode.props.pos.split('-');
	    var res = {
	      event: e,
	      node: treeNode,
	      dragNode: this.dragNode,
	      dragNodesKeys: [].concat(_toConsumableArray(this.dragNodesKeys)),
	      dropPosition: this.dropPosition + Number(posArr[posArr.length - 1])
	    };
	    if (this.dropPosition !== 0) {
	      res.dropToGap = true;
	    }
	    if ('expandedKeys' in this.props) {
	      res.rawExpandedKeys = [].concat(_toConsumableArray(this._rawExpandedKeys)) || [].concat(_toConsumableArray(this.state.expandedKeys));
	    }
	    this.props.onDrop(res);
	    this._dropTrigger = true;
	  };

	  Tree.prototype.onExpand = function onExpand(treeNode) {
	    var _this2 = this;

	    var expanded = !treeNode.props.expanded;
	    var controlled = 'expandedKeys' in this.props;
	    var expandedKeys = [].concat(_toConsumableArray(this.state.expandedKeys));
	    var index = expandedKeys.indexOf(treeNode.props.eventKey);
	    if (expanded && index === -1) {
	      expandedKeys.push(treeNode.props.eventKey);
	    } else if (!expanded && index > -1) {
	      expandedKeys.splice(index, 1);
	    }
	    if (!controlled) {
	      this.setState({ expandedKeys: expandedKeys });
	    }
	    this.props.onExpand(expandedKeys, { node: treeNode, expanded: expanded });

	    // after data loaded, need set new expandedKeys
	    if (expanded && this.props.loadData) {
	      return this.props.loadData(treeNode).then(function () {
	        if (!controlled) {
	          _this2.setState({ expandedKeys: expandedKeys });
	        }
	      });
	    }
	  };

	  Tree.prototype.onCheck = function onCheck(treeNode) {
	    var _this3 = this;

	    var checked = !treeNode.props.checked;
	    if (treeNode.props.halfChecked) {
	      checked = true;
	    }
	    var key = treeNode.props.eventKey;
	    var checkedKeys = [].concat(_toConsumableArray(this.state.checkedKeys));
	    var index = checkedKeys.indexOf(key);

	    var newSt = {
	      event: 'check',
	      node: treeNode,
	      checked: checked
	    };

	    if (this.props.checkStrictly && 'checkedKeys' in this.props) {
	      if (checked && index === -1) {
	        checkedKeys.push(key);
	      }
	      if (!checked && index > -1) {
	        checkedKeys.splice(index, 1);
	      }
	      newSt.checkedNodes = [];
	      (0, _util.loopAllChildren)(this.props.children, function (item, ind, pos, keyOrPos) {
	        if (checkedKeys.indexOf(keyOrPos) !== -1) {
	          newSt.checkedNodes.push(item);
	        }
	      });
	      this.props.onCheck((0, _util.getStrictlyValue)(checkedKeys, this.props.checkedKeys.halfChecked), newSt);
	    } else {
	      if (checked && index === -1) {
	        (function () {
	          _this3.treeNodesStates[treeNode.props.pos].checked = true;
	          var checkedPositions = [];
	          Object.keys(_this3.treeNodesStates).forEach(function (i) {
	            if (_this3.treeNodesStates[i].checked) {
	              checkedPositions.push(i);
	            }
	          });
	          (0, _util.handleCheckState)(_this3.treeNodesStates, (0, _util.filterParentPosition)(checkedPositions), true);
	        })();
	      }
	      if (!checked) {
	        this.treeNodesStates[treeNode.props.pos].checked = false;
	        this.treeNodesStates[treeNode.props.pos].halfChecked = false;
	        (0, _util.handleCheckState)(this.treeNodesStates, [treeNode.props.pos], false);
	      }
	      var checkKeys = (0, _util.getCheck)(this.treeNodesStates);
	      newSt.checkedNodes = checkKeys.checkedNodes;
	      newSt.checkedNodesPositions = checkKeys.checkedNodesPositions;
	      newSt.halfCheckedKeys = checkKeys.halfCheckedKeys;
	      this.checkKeys = checkKeys;

	      this._checkedKeys = checkedKeys = checkKeys.checkedKeys;
	      if (!('checkedKeys' in this.props)) {
	        this.setState({
	          checkedKeys: checkedKeys
	        });
	      }
	      this.props.onCheck(checkedKeys, newSt);
	    }
	  };

	  Tree.prototype.onSelect = function onSelect(treeNode) {
	    var props = this.props;
	    var selectedKeys = [].concat(_toConsumableArray(this.state.selectedKeys));
	    var eventKey = treeNode.props.eventKey;
	    var index = selectedKeys.indexOf(eventKey);
	    var selected = void 0;
	    if (index !== -1) {
	      selected = false;
	      selectedKeys.splice(index, 1);
	    } else {
	      selected = true;
	      if (!props.multiple) {
	        selectedKeys.length = 0;
	      }
	      selectedKeys.push(eventKey);
	    }
	    var selectedNodes = [];
	    if (selectedKeys.length) {
	      (0, _util.loopAllChildren)(this.props.children, function (item) {
	        if (selectedKeys.indexOf(item.key) !== -1) {
	          selectedNodes.push(item);
	        }
	      });
	    }
	    var newSt = {
	      event: 'select',
	      node: treeNode,
	      selected: selected,
	      selectedNodes: selectedNodes
	    };
	    if (!('selectedKeys' in this.props)) {
	      this.setState({
	        selectedKeys: selectedKeys
	      });
	    }
	    props.onSelect(selectedKeys, newSt);
	  };

	  Tree.prototype.onMouseEnter = function onMouseEnter(e, treeNode) {
	    this.props.onMouseEnter({ event: e, node: treeNode });
	  };

	  Tree.prototype.onMouseLeave = function onMouseLeave(e, treeNode) {
	    this.props.onMouseLeave({ event: e, node: treeNode });
	  };

	  Tree.prototype.onContextMenu = function onContextMenu(e, treeNode) {
	    var selectedKeys = [].concat(_toConsumableArray(this.state.selectedKeys));
	    var eventKey = treeNode.props.eventKey;
	    if (this.contextmenuKeys.indexOf(eventKey) === -1) {
	      this.contextmenuKeys.push(eventKey);
	    }
	    this.contextmenuKeys.forEach(function (key) {
	      var index = selectedKeys.indexOf(key);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	    });
	    if (selectedKeys.indexOf(eventKey) === -1) {
	      selectedKeys.push(eventKey);
	    }
	    this.setState({
	      selectedKeys: selectedKeys
	    });
	    this.props.onRightClick({ event: e, node: treeNode });
	  };

	  // all keyboard events callbacks run from here at first


	  Tree.prototype.onKeyDown = function onKeyDown(e) {
	    e.preventDefault();
	  };

	  Tree.prototype.getFilterExpandedKeys = function getFilterExpandedKeys(props, expandKeyProp, expandAll) {
	    var keys = props[expandKeyProp];
	    if (!expandAll && !props.autoExpandParent) {
	      return keys || [];
	    }
	    var expandedPositionArr = [];
	    if (props.autoExpandParent) {
	      (0, _util.loopAllChildren)(props.children, function (item, index, pos, newKey) {
	        if (keys.indexOf(newKey) > -1) {
	          expandedPositionArr.push(pos);
	        }
	      });
	    }
	    var filterExpandedKeys = [];
	    (0, _util.loopAllChildren)(props.children, function (item, index, pos, newKey) {
	      if (expandAll) {
	        filterExpandedKeys.push(newKey);
	      } else if (props.autoExpandParent) {
	        expandedPositionArr.forEach(function (p) {
	          if ((p.split('-').length > pos.split('-').length && (0, _util.isInclude)(pos.split('-'), p.split('-')) || pos === p) && filterExpandedKeys.indexOf(newKey) === -1) {
	            filterExpandedKeys.push(newKey);
	          }
	        });
	      }
	    });
	    return filterExpandedKeys.length ? filterExpandedKeys : keys;
	  };

	  Tree.prototype.getDefaultExpandedKeys = function getDefaultExpandedKeys(props, willReceiveProps) {
	    var expandedKeys = willReceiveProps ? undefined : this.getFilterExpandedKeys(props, 'defaultExpandedKeys', props.defaultExpandedKeys.length ? false : props.defaultExpandAll);
	    if ('expandedKeys' in props) {
	      expandedKeys = (props.autoExpandParent ? this.getFilterExpandedKeys(props, 'expandedKeys', false) : props.expandedKeys) || [];
	    }
	    return expandedKeys;
	  };

	  Tree.prototype.getDefaultCheckedKeys = function getDefaultCheckedKeys(props, willReceiveProps) {
	    var checkedKeys = willReceiveProps ? undefined : props.defaultCheckedKeys;
	    if ('checkedKeys' in props) {
	      checkedKeys = props.checkedKeys || [];
	      if (props.checkStrictly) {
	        if (props.checkedKeys.checked) {
	          checkedKeys = props.checkedKeys.checked;
	        } else if (!Array.isArray(props.checkedKeys)) {
	          checkedKeys = [];
	        }
	      }
	    }
	    return checkedKeys;
	  };

	  Tree.prototype.getDefaultSelectedKeys = function getDefaultSelectedKeys(props, willReceiveProps) {
	    var getKeys = function getKeys(keys) {
	      if (props.multiple) {
	        return [].concat(_toConsumableArray(keys));
	      }
	      if (keys.length) {
	        return [keys[0]];
	      }
	      return keys;
	    };
	    var selectedKeys = willReceiveProps ? undefined : getKeys(props.defaultSelectedKeys);
	    if ('selectedKeys' in props) {
	      selectedKeys = getKeys(props.selectedKeys);
	    }
	    return selectedKeys;
	  };

	  Tree.prototype.getRawExpandedKeys = function getRawExpandedKeys() {
	    if (!this._rawExpandedKeys && 'expandedKeys' in this.props) {
	      this._rawExpandedKeys = [].concat(_toConsumableArray(this.state.expandedKeys));
	    }
	  };

	  Tree.prototype.getOpenTransitionName = function getOpenTransitionName() {
	    var props = this.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  };

	  Tree.prototype.getDragNodes = function getDragNodes(treeNode) {
	    var dragNodesKeys = [];
	    var tPArr = treeNode.props.pos.split('-');
	    (0, _util.loopAllChildren)(this.props.children, function (item, index, pos, newKey) {
	      var pArr = pos.split('-');
	      if (treeNode.props.pos === pos || tPArr.length < pArr.length && (0, _util.isInclude)(tPArr, pArr)) {
	        dragNodesKeys.push(newKey);
	      }
	    });
	    return dragNodesKeys;
	  };

	  Tree.prototype.getExpandedKeys = function getExpandedKeys(treeNode, expand) {
	    var key = treeNode.props.eventKey;
	    var expandedKeys = this.state.expandedKeys;
	    var expandedIndex = expandedKeys.indexOf(key);
	    var exKeys = void 0;
	    if (expandedIndex > -1 && !expand) {
	      exKeys = [].concat(_toConsumableArray(expandedKeys));
	      exKeys.splice(expandedIndex, 1);
	      return exKeys;
	    }
	    if (expand && expandedKeys.indexOf(key) === -1) {
	      return expandedKeys.concat([key]);
	    }
	  };

	  Tree.prototype.filterTreeNode = function filterTreeNode(treeNode) {
	    var filterTreeNode = this.props.filterTreeNode;
	    if (typeof filterTreeNode !== 'function' || treeNode.props.disabled) {
	      return false;
	    }
	    return filterTreeNode.call(this, treeNode);
	  };

	  Tree.prototype.renderTreeNode = function renderTreeNode(child, index) {
	    var level = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	    var pos = level + '-' + index;
	    var key = child.key || pos;
	    var state = this.state;
	    var props = this.props;

	    // prefer to child's own selectable property if passed
	    var selectable = props.selectable;
	    if (child.props.hasOwnProperty('selectable')) {
	      selectable = child.props.selectable;
	    }

	    var cloneProps = {
	      ref: 'treeNode-' + key,
	      root: this,
	      eventKey: key,
	      pos: pos,
	      selectable: selectable,
	      loadData: props.loadData,
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      onRightClick: props.onRightClick,
	      prefixCls: props.prefixCls,
	      showLine: props.showLine,
	      showIcon: props.showIcon,
	      draggable: props.draggable,
	      dragOver: state.dragOverNodeKey === key && this.dropPosition === 0,
	      dragOverGapTop: state.dragOverNodeKey === key && this.dropPosition === -1,
	      dragOverGapBottom: state.dragOverNodeKey === key && this.dropPosition === 1,
	      _dropTrigger: this._dropTrigger,
	      expanded: state.expandedKeys.indexOf(key) !== -1,
	      selected: state.selectedKeys.indexOf(key) !== -1,
	      openTransitionName: this.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      filterTreeNode: this.filterTreeNode.bind(this)
	    };
	    if (props.checkable) {
	      cloneProps.checkable = props.checkable;
	      if (props.checkStrictly) {
	        if (state.checkedKeys) {
	          cloneProps.checked = state.checkedKeys.indexOf(key) !== -1 || false;
	        }
	        if (props.checkedKeys.halfChecked) {
	          cloneProps.halfChecked = props.checkedKeys.halfChecked.indexOf(key) !== -1 || false;
	        } else {
	          cloneProps.halfChecked = false;
	        }
	      } else {
	        if (this.checkedKeys) {
	          cloneProps.checked = this.checkedKeys.indexOf(key) !== -1 || false;
	        }
	        cloneProps.halfChecked = this.halfCheckedKeys.indexOf(key) !== -1;
	      }

	      if (this.treeNodesStates[pos]) {
	        (0, _objectAssign2["default"])(cloneProps, this.treeNodesStates[pos].siblingPosition);
	      }
	    }
	    return _react2["default"].cloneElement(child, cloneProps);
	  };

	  Tree.prototype.render = function render() {
	    var _this4 = this;

	    var props = this.props;
	    var domProps = {
	      className: (0, _classnames2["default"])(props.className, props.prefixCls),
	      role: 'tree-node'
	    };
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    // console.log(this.state.expandedKeys, this._rawExpandedKeys, props.children);
	    if (props.checkable && (this.checkedKeysChange || props.loadData)) {
	      if (props.checkStrictly) {
	        this.treeNodesStates = {};
	        (0, _util.loopAllChildren)(props.children, function (item, index, pos, keyOrPos, siblingPosition) {
	          _this4.treeNodesStates[pos] = {
	            siblingPosition: siblingPosition
	          };
	        });
	      } else if (props._treeNodesStates) {
	        this.treeNodesStates = props._treeNodesStates.treeNodesStates;
	        this.halfCheckedKeys = props._treeNodesStates.halfCheckedKeys;
	        this.checkedKeys = props._treeNodesStates.checkedKeys;
	      } else {
	        (function () {
	          var checkedKeys = _this4.state.checkedKeys;
	          var checkKeys = void 0;
	          if (!props.loadData && _this4.checkKeys && _this4._checkedKeys && (0, _util.arraysEqual)(_this4._checkedKeys, checkedKeys)) {
	            // if checkedKeys the same as _checkedKeys from onCheck, use _checkedKeys.
	            checkKeys = _this4.checkKeys;
	          } else {
	            (function () {
	              var checkedPositions = [];
	              _this4.treeNodesStates = {};
	              (0, _util.loopAllChildren)(props.children, function (item, index, pos, keyOrPos, siblingPosition) {
	                _this4.treeNodesStates[pos] = {
	                  node: item,
	                  key: keyOrPos,
	                  checked: false,
	                  halfChecked: false,
	                  siblingPosition: siblingPosition
	                };
	                if (checkedKeys.indexOf(keyOrPos) !== -1) {
	                  _this4.treeNodesStates[pos].checked = true;
	                  checkedPositions.push(pos);
	                }
	              });
	              // if the parent node's key exists, it all children node will be checked
	              (0, _util.handleCheckState)(_this4.treeNodesStates, (0, _util.filterParentPosition)(checkedPositions), true);
	              checkKeys = (0, _util.getCheck)(_this4.treeNodesStates);
	            })();
	          }
	          _this4.halfCheckedKeys = checkKeys.halfCheckedKeys;
	          _this4.checkedKeys = checkKeys.checkedKeys;
	        })();
	      }
	    }

	    return _react2["default"].createElement(
	      'ul',
	      _extends({}, domProps, { unselectable: true, ref: 'tree' }),
	      _react2["default"].Children.map(props.children, this.renderTreeNode, this)
	    );
	  };

	  return Tree;
	}(_react2["default"].Component);

	Tree.propTypes = {
	  prefixCls: _react.PropTypes.string,
	  children: _react.PropTypes.any,
	  showLine: _react.PropTypes.bool,
	  showIcon: _react.PropTypes.bool,
	  selectable: _react.PropTypes.bool,
	  multiple: _react.PropTypes.bool,
	  checkable: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.node]),
	  _treeNodesStates: _react.PropTypes.object,
	  checkStrictly: _react.PropTypes.bool,
	  draggable: _react.PropTypes.bool,
	  autoExpandParent: _react.PropTypes.bool,
	  defaultExpandAll: _react.PropTypes.bool,
	  defaultExpandedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  expandedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  defaultCheckedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  checkedKeys: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string), _react.PropTypes.object]),
	  defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  onExpand: _react.PropTypes.func,
	  onCheck: _react.PropTypes.func,
	  onSelect: _react.PropTypes.func,
	  loadData: _react.PropTypes.func,
	  onMouseEnter: _react.PropTypes.func,
	  onMouseLeave: _react.PropTypes.func,
	  onRightClick: _react.PropTypes.func,
	  onDragStart: _react.PropTypes.func,
	  onDragEnter: _react.PropTypes.func,
	  onDragOver: _react.PropTypes.func,
	  onDragLeave: _react.PropTypes.func,
	  onDrop: _react.PropTypes.func,
	  filterTreeNode: _react.PropTypes.func,
	  openTransitionName: _react.PropTypes.string,
	  openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object])
	};

	Tree.defaultProps = {
	  prefixCls: 'rc-tree',
	  showLine: false,
	  showIcon: true,
	  selectable: true,
	  multiple: false,
	  checkable: false,
	  checkStrictly: false,
	  draggable: false,
	  autoExpandParent: true,
	  defaultExpandAll: false,
	  defaultExpandedKeys: [],
	  defaultCheckedKeys: [],
	  defaultSelectedKeys: [],
	  onExpand: noop,
	  onCheck: noop,
	  onSelect: noop,
	  onDragStart: noop,
	  onDragEnter: noop,
	  onDragOver: noop,
	  onDragLeave: noop,
	  onDrop: noop
	};

	exports["default"] = Tree;
	module.exports = exports['default'];

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.browser = browser;
	exports.getOffset = getOffset;
	exports.loopAllChildren = loopAllChildren;
	exports.isInclude = isInclude;
	exports.filterParentPosition = filterParentPosition;
	exports.handleCheckState = handleCheckState;
	exports.getCheck = getCheck;
	exports.getStrictlyValue = getStrictlyValue;
	exports.arraysEqual = arraysEqual;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function browser(navigator) {
	  var tem = void 0;
	  var ua = navigator.userAgent;
	  var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
	  if (/trident/i.test(M[1])) {
	    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
	    return 'IE ' + (tem[1] || '');
	  }
	  if (M[1] === 'Chrome') {
	    tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
	    if (tem) return tem.slice(1).join(' ').replace('OPR', 'Opera');
	  }
	  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	  tem = ua.match(/version\/(\d+)/i);
	  if (tem) {
	    M.splice(1, 1, tem[1]);
	  }
	  return M.join(' ');
	}

	// export function getOffset(el) {
	//   const obj = el.getBoundingClientRect();
	//   return {
	//     left: obj.left + document.body.scrollLeft,
	//     top: obj.top + document.body.scrollTop,
	//     width: obj.width,
	//     height: obj.height
	//   };
	// }

	// // iscroll offset
	// offset = function (el) {
	//   var left = -el.offsetLeft,
	//     top = -el.offsetTop;

	//   // jshint -W084
	//   while (el = el.offsetParent) {
	//     left -= el.offsetLeft;
	//     top -= el.offsetTop;
	//   }
	//   // jshint +W084

	//   return {
	//     left: left,
	//     top: top
	//   };
	// }

	/* eslint-disable */
	/* eslint no-loop-func: 0*/

	function getOffset(ele) {
	  var doc = void 0,
	      win = void 0,
	      docElem = void 0,
	      rect = void 0;

	  if (!ele.getClientRects().length) {
	    return { top: 0, left: 0 };
	  }

	  rect = ele.getBoundingClientRect();

	  if (rect.width || rect.height) {
	    doc = ele.ownerDocument;
	    win = doc.defaultView;
	    docElem = doc.documentElement;

	    return {
	      top: rect.top + win.pageYOffset - docElem.clientTop,
	      left: rect.left + win.pageXOffset - docElem.clientLeft
	    };
	  }

	  return rect;
	}
	/* eslint-enable */

	function getChildrenlength(children) {
	  var len = 1;
	  if (Array.isArray(children)) {
	    len = children.length;
	  }
	  return len;
	}

	function getSiblingPosition(index, len, siblingPosition) {
	  if (len === 1) {
	    siblingPosition.first = true;
	    siblingPosition.last = true;
	  } else {
	    siblingPosition.first = index === 0;
	    siblingPosition.last = index === len - 1;
	  }
	  return siblingPosition;
	}

	function loopAllChildren(childs, callback, parent) {
	  var loop = function loop(children, level, _parent) {
	    var len = getChildrenlength(children);
	    _react2["default"].Children.forEach(children, function (item, index) {
	      var pos = level + '-' + index;
	      if (item.props.children && item.type && item.type.isTreeNode) {
	        loop(item.props.children, pos, { node: item, pos: pos });
	      }
	      callback(item, index, pos, item.key || pos, getSiblingPosition(index, len, {}), _parent);
	    });
	  };
	  loop(childs, 0, parent);
	}

	function isInclude(smallArray, bigArray) {
	  return smallArray.every(function (ii, i) {
	    return ii === bigArray[i];
	  });
	}
	// console.log(isInclude(['0', '1'], ['0', '10', '1']));


	// arr.length === 628, use time: ~20ms
	function filterParentPosition(arr) {
	  var levelObj = {};
	  arr.forEach(function (item) {
	    var posLen = item.split('-').length;
	    if (!levelObj[posLen]) {
	      levelObj[posLen] = [];
	    }
	    levelObj[posLen].push(item);
	  });
	  var levelArr = Object.keys(levelObj).sort();

	  var _loop = function _loop(i) {
	    if (levelArr[i + 1]) {
	      levelObj[levelArr[i]].forEach(function (ii) {
	        var _loop2 = function _loop2(j) {
	          levelObj[levelArr[j]].forEach(function (_i, index) {
	            if (isInclude(ii.split('-'), _i.split('-'))) {
	              levelObj[levelArr[j]][index] = null;
	            }
	          });
	          levelObj[levelArr[j]] = levelObj[levelArr[j]].filter(function (p) {
	            return p;
	          });
	        };

	        for (var j = i + 1; j < levelArr.length; j++) {
	          _loop2(j);
	        }
	      });
	    }
	  };

	  for (var i = 0; i < levelArr.length; i++) {
	    _loop(i);
	  }
	  var nArr = [];
	  levelArr.forEach(function (i) {
	    nArr = nArr.concat(levelObj[i]);
	  });
	  return nArr;
	}
	// console.log(filterParentPosition(
	//   ['0-2', '0-3-3', '0-10', '0-10-0', '0-0-1', '0-0', '0-1-1', '0-1']
	// ));


	function stripTail(str) {
	  var arr = str.match(/(.+)(-[^-]+)$/);
	  var st = '';
	  if (arr && arr.length === 3) {
	    st = arr[1];
	  }
	  return st;
	}
	function splitPosition(pos) {
	  return pos.split('-');
	}

	function handleCheckState(obj, checkedPositionArr, checkIt) {
	  // console.log(stripTail('0-101-000'));
	  var objKeys = Object.keys(obj);
	  // let s = Date.now();
	  objKeys.forEach(function (i, index) {
	    var iArr = splitPosition(i);
	    var saved = false;
	    checkedPositionArr.forEach(function (_pos) {
	      // 设置子节点，全选或全不选
	      var _posArr = splitPosition(_pos);
	      if (iArr.length > _posArr.length && isInclude(_posArr, iArr)) {
	        obj[i].halfChecked = false;
	        obj[i].checked = checkIt;
	        objKeys[index] = null;
	      }
	      if (iArr[0] === _posArr[0] && iArr[1] === _posArr[1]) {
	        // 如果
	        saved = true;
	      }
	    });
	    if (!saved) {
	      objKeys[index] = null;
	    }
	  });
	  // TODO: 循环 2470000 次耗时约 1400 ms。 性能瓶颈！
	  // console.log(Date.now()-s, checkedPositionArr.length * objKeys.length);
	  objKeys = objKeys.filter(function (i) {
	    return i;
	  }); // filter non null;

	  var _loop3 = function _loop3(_pIndex) {
	    // 循环设置父节点的 选中 或 半选状态
	    var loop = function loop(__pos) {
	      var _posLen = splitPosition(__pos).length;
	      if (_posLen <= 2) {
	        // e.g. '0-0', '0-1'
	        return;
	      }
	      var sibling = 0;
	      var siblingChecked = 0;
	      var parentPosition = stripTail(__pos);
	      objKeys.forEach(function (i /* , index*/) {
	        var iArr = splitPosition(i);
	        if (iArr.length === _posLen && isInclude(splitPosition(parentPosition), iArr)) {
	          sibling++;
	          if (obj[i].checked) {
	            siblingChecked++;
	            var _i = checkedPositionArr.indexOf(i);
	            if (_i > -1) {
	              checkedPositionArr.splice(_i, 1);
	              if (_i <= _pIndex) {
	                _pIndex--;
	              }
	            }
	          } else if (obj[i].halfChecked) {
	            siblingChecked += 0.5;
	          }
	          // objKeys[index] = null;
	        }
	      });
	      // objKeys = objKeys.filter(i => i); // filter non null;
	      var parent = obj[parentPosition];
	      // sibling 不会等于0
	      // 全不选 - 全选 - 半选
	      if (siblingChecked === 0) {
	        parent.checked = false;
	        parent.halfChecked = false;
	      } else if (siblingChecked === sibling) {
	        parent.checked = true;
	        parent.halfChecked = false;
	      } else {
	        parent.halfChecked = true;
	        parent.checked = false;
	      }
	      loop(parentPosition);
	    };
	    loop(checkedPositionArr[_pIndex], _pIndex);
	    pIndex = _pIndex;
	  };

	  for (var pIndex = 0; pIndex < checkedPositionArr.length; pIndex++) {
	    _loop3(pIndex);
	  }
	  // console.log(Date.now()-s, objKeys.length, checkIt);
	}

	function getCheck(treeNodesStates) {
	  var halfCheckedKeys = [];
	  var checkedKeys = [];
	  var checkedNodes = [];
	  var checkedNodesPositions = [];
	  Object.keys(treeNodesStates).forEach(function (item) {
	    var itemObj = treeNodesStates[item];
	    if (itemObj.checked) {
	      checkedKeys.push(itemObj.key);
	      checkedNodes.push(itemObj.node);
	      checkedNodesPositions.push({ node: itemObj.node, pos: item });
	    } else if (itemObj.halfChecked) {
	      halfCheckedKeys.push(itemObj.key);
	    }
	  });
	  return {
	    halfCheckedKeys: halfCheckedKeys, checkedKeys: checkedKeys, checkedNodes: checkedNodes, checkedNodesPositions: checkedNodesPositions, treeNodesStates: treeNodesStates
	  };
	}

	function getStrictlyValue(checkedKeys, halfChecked) {
	  if (halfChecked) {
	    return { checked: checkedKeys, halfChecked: halfChecked };
	  }
	  return checkedKeys;
	}

	function arraysEqual(a, b) {
	  if (a === b) return true;
	  if (a === null || typeof a === 'undefined' || b === null || typeof b === 'undefined') {
	    return false;
	  }
	  if (a.length !== b.length) return false;

	  // If you don't care about the order of the elements inside
	  // the array, you should sort both arrays here.

	  for (var i = 0; i < a.length; ++i) {
	    if (a[i] !== b[i]) return false;
	  }
	  return true;
	}

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _rcAnimate = __webpack_require__(104);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _util = __webpack_require__(404);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var browserUa = typeof window !== 'undefined' ? (0, _util.browser)(window.navigator) : '';
	var ieOrEdge = /.*(IE|Edge).+/.test(browserUa);
	// const uaArray = browserUa.split(' ');
	// const gtIE8 = uaArray.length !== 2 || uaArray[0].indexOf('IE') === -1 || Number(uaArray[1]) > 8;

	var defaultTitle = '---';

	var TreeNode = function (_React$Component) {
	  _inherits(TreeNode, _React$Component);

	  function TreeNode(props) {
	    _classCallCheck(this, TreeNode);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    ['onExpand', 'onCheck', 'onContextMenu', 'onMouseEnter', 'onMouseLeave', 'onDragStart', 'onDragEnter', 'onDragOver', 'onDragLeave', 'onDrop'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	    _this.state = {
	      dataLoading: false,
	      dragNodeHighlight: false
	    };
	    return _this;
	  }

	  TreeNode.prototype.componentDidMount = function componentDidMount() {
	    if (!this.props.root._treeNodeInstances) {
	      this.props.root._treeNodeInstances = [];
	    }
	    this.props.root._treeNodeInstances.push(this);
	  };
	  // shouldComponentUpdate(nextProps) {
	  //   if (!nextProps.expanded) {
	  //     return false;
	  //   }
	  //   return true;
	  // }

	  TreeNode.prototype.onCheck = function onCheck() {
	    this.props.root.onCheck(this);
	  };

	  TreeNode.prototype.onSelect = function onSelect() {
	    this.props.root.onSelect(this);
	  };

	  TreeNode.prototype.onMouseEnter = function onMouseEnter(e) {
	    e.preventDefault();
	    this.props.root.onMouseEnter(e, this);
	  };

	  TreeNode.prototype.onMouseLeave = function onMouseLeave(e) {
	    e.preventDefault();
	    this.props.root.onMouseLeave(e, this);
	  };

	  TreeNode.prototype.onContextMenu = function onContextMenu(e) {
	    e.preventDefault();
	    this.props.root.onContextMenu(e, this);
	  };

	  TreeNode.prototype.onDragStart = function onDragStart(e) {
	    // console.log('dragstart', this.props.eventKey, e);
	    // e.preventDefault();
	    e.stopPropagation();
	    this.setState({
	      dragNodeHighlight: true
	    });
	    this.props.root.onDragStart(e, this);
	    try {
	      // ie throw error
	      // firefox-need-it
	      e.dataTransfer.setData('text/plain', '');
	    } finally {
	      // empty
	    }
	  };

	  TreeNode.prototype.onDragEnter = function onDragEnter(e) {
	    // console.log('dragenter', this.props.eventKey, e);
	    e.preventDefault();
	    e.stopPropagation();
	    this.props.root.onDragEnter(e, this);
	  };

	  TreeNode.prototype.onDragOver = function onDragOver(e) {
	    // console.log(this.props.eventKey, e);
	    // todo disabled
	    e.preventDefault();
	    e.stopPropagation();
	    this.props.root.onDragOver(e, this);
	    return false;
	  };

	  TreeNode.prototype.onDragLeave = function onDragLeave(e) {
	    // console.log(this.props.eventKey, e);
	    e.stopPropagation();
	    this.props.root.onDragLeave(e, this);
	  };

	  TreeNode.prototype.onDrop = function onDrop(e) {
	    e.preventDefault();
	    e.stopPropagation();
	    this.setState({
	      dragNodeHighlight: false
	    });
	    this.props.root.onDrop(e, this);
	  };

	  TreeNode.prototype.onExpand = function onExpand() {
	    var _this2 = this;

	    var callbackPromise = this.props.root.onExpand(this);
	    if (callbackPromise && (typeof callbackPromise === 'undefined' ? 'undefined' : _typeof(callbackPromise)) === 'object') {
	      (function () {
	        var setLoading = function setLoading(dataLoading) {
	          _this2.setState({ dataLoading: dataLoading });
	        };
	        setLoading(true);
	        callbackPromise.then(function () {
	          setLoading(false);
	        }, function () {
	          setLoading(false);
	        });
	      })();
	    }
	  };

	  // keyboard event support


	  TreeNode.prototype.onKeyDown = function onKeyDown(e) {
	    e.preventDefault();
	  };

	  TreeNode.prototype.renderSwitcher = function renderSwitcher(props, expandedState) {
	    var prefixCls = props.prefixCls;
	    var switcherCls = _defineProperty({}, prefixCls + '-switcher', true);
	    if (!props.showLine) {
	      switcherCls[prefixCls + '-noline_' + expandedState] = true;
	    } else if (props.pos === '0-0') {
	      switcherCls[prefixCls + '-roots_' + expandedState] = true;
	    } else {
	      switcherCls[prefixCls + '-center_' + expandedState] = !props.last;
	      switcherCls[prefixCls + '-bottom_' + expandedState] = props.last;
	    }
	    if (props.disabled) {
	      switcherCls[prefixCls + '-switcher-disabled'] = true;
	      return _react2["default"].createElement('span', { className: (0, _classnames2["default"])(switcherCls) });
	    }
	    return _react2["default"].createElement('span', { className: (0, _classnames2["default"])(switcherCls), onClick: this.onExpand });
	  };

	  TreeNode.prototype.renderCheckbox = function renderCheckbox(props) {
	    var prefixCls = props.prefixCls;
	    var checkboxCls = _defineProperty({}, prefixCls + '-checkbox', true);
	    if (props.checked) {
	      checkboxCls[prefixCls + '-checkbox-checked'] = true;
	    } else if (props.halfChecked) {
	      checkboxCls[prefixCls + '-checkbox-indeterminate'] = true;
	    }
	    var customEle = null;
	    if (typeof props.checkable !== 'boolean') {
	      customEle = props.checkable;
	    }
	    if (props.disabled || props.disableCheckbox) {
	      checkboxCls[prefixCls + '-checkbox-disabled'] = true;
	      return _react2["default"].createElement(
	        'span',
	        { ref: 'checkbox', className: (0, _classnames2["default"])(checkboxCls) },
	        customEle
	      );
	    }
	    return _react2["default"].createElement(
	      'span',
	      { ref: 'checkbox',
	        className: (0, _classnames2["default"])(checkboxCls),
	        onClick: this.onCheck
	      },
	      customEle
	    );
	  };

	  TreeNode.prototype.renderChildren = function renderChildren(props) {
	    var renderFirst = this.renderFirst;
	    this.renderFirst = 1;
	    var transitionAppear = true;
	    if (!renderFirst && props.expanded) {
	      transitionAppear = false;
	    }
	    var children = props.children;
	    var newChildren = children;
	    if (children && (children.type === TreeNode || Array.isArray(children) && children.every(function (item) {
	      return item.type === TreeNode;
	    }))) {
	      var _cls;

	      var cls = (_cls = {}, _defineProperty(_cls, props.prefixCls + '-child-tree', true), _defineProperty(_cls, props.prefixCls + '-child-tree-open', props.expanded), _cls);
	      if (props.showLine) {
	        cls[props.prefixCls + '-line'] = !props.last;
	      }
	      var animProps = {};
	      if (props.openTransitionName) {
	        animProps.transitionName = props.openTransitionName;
	      } else if (_typeof(props.openAnimation) === 'object') {
	        animProps.animation = (0, _objectAssign2["default"])({}, props.openAnimation);
	        if (!transitionAppear) {
	          delete animProps.animation.appear;
	        }
	      }
	      newChildren = _react2["default"].createElement(
	        _rcAnimate2["default"],
	        _extends({}, animProps, {
	          showProp: 'data-expanded',
	          transitionAppear: transitionAppear,
	          component: ''
	        }),
	        !props.expanded ? null : _react2["default"].createElement(
	          'ul',
	          { className: (0, _classnames2["default"])(cls), 'data-expanded': props.expanded },
	          _react2["default"].Children.map(children, function (item, index) {
	            return props.root.renderTreeNode(item, index, props.pos);
	          }, props.root)
	        )
	      );
	    }
	    return newChildren;
	  };

	  TreeNode.prototype.render = function render() {
	    var _iconEleCls,
	        _this3 = this;

	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var expandedState = props.expanded ? 'open' : 'close';

	    var iconEleCls = (_iconEleCls = {}, _defineProperty(_iconEleCls, prefixCls + '-iconEle', true), _defineProperty(_iconEleCls, prefixCls + '-icon_loading', this.state.dataLoading), _defineProperty(_iconEleCls, prefixCls + '-icon__' + expandedState, true), _iconEleCls);

	    var canRenderSwitcher = true;
	    var content = props.title;
	    var newChildren = this.renderChildren(props);
	    if (!newChildren || newChildren === props.children) {
	      // content = newChildren;
	      newChildren = null;
	      if (!props.loadData || props.isLeaf) {
	        canRenderSwitcher = false;
	      }
	    }
	    // For performance, does't render children into dom when `!props.expanded` (move to Animate)
	    // if (!props.expanded) {
	    //   newChildren = null;
	    // }

	    var selectHandle = function selectHandle() {
	      var icon = props.showIcon || props.loadData && _this3.state.dataLoading ? _react2["default"].createElement('span', { className: (0, _classnames2["default"])(iconEleCls) }) : null;
	      var title = _react2["default"].createElement(
	        'span',
	        { className: prefixCls + '-title' },
	        content
	      );
	      var domProps = {
	        className: prefixCls + '-node-content-wrapper'
	      };
	      if (!props.disabled) {
	        if (props.selected || !props._dropTrigger && _this3.state.dragNodeHighlight) {
	          domProps.className += ' ' + prefixCls + '-node-selected';
	        }
	        domProps.onClick = function (e) {
	          e.preventDefault();
	          if (props.selectable) {
	            _this3.onSelect();
	          }
	          // not fire check event
	          // if (props.checkable) {
	          //   this.onCheck();
	          // }
	        };
	        if (props.onRightClick) {
	          domProps.onContextMenu = _this3.onContextMenu;
	        }
	        if (props.onMouseEnter) {
	          domProps.onMouseEnter = _this3.onMouseEnter;
	        }
	        if (props.onMouseLeave) {
	          domProps.onMouseLeave = _this3.onMouseLeave;
	        }
	        if (props.draggable) {
	          domProps.className += ' draggable';
	          if (ieOrEdge) {
	            // ie bug!
	            domProps.href = '#';
	          }
	          domProps.draggable = true;
	          domProps['aria-grabbed'] = true;
	          domProps.onDragStart = _this3.onDragStart;
	        }
	      }
	      return _react2["default"].createElement(
	        'a',
	        _extends({ ref: 'selectHandle', title: typeof content === 'string' ? content : '' }, domProps),
	        icon,
	        title
	      );
	    };

	    var liProps = {};
	    if (props.draggable) {
	      liProps.onDragEnter = this.onDragEnter;
	      liProps.onDragOver = this.onDragOver;
	      liProps.onDragLeave = this.onDragLeave;
	      liProps.onDrop = this.onDrop;
	    }

	    var disabledCls = '';
	    var dragOverCls = '';
	    if (props.disabled) {
	      disabledCls = prefixCls + '-treenode-disabled';
	    } else if (props.dragOver) {
	      dragOverCls = 'drag-over';
	    } else if (props.dragOverGapTop) {
	      dragOverCls = 'drag-over-gap-top';
	    } else if (props.dragOverGapBottom) {
	      dragOverCls = 'drag-over-gap-bottom';
	    }

	    var filterCls = props.filterTreeNode(this) ? 'filter-node' : '';

	    var noopSwitcher = function noopSwitcher() {
	      var _cls2;

	      var cls = (_cls2 = {}, _defineProperty(_cls2, prefixCls + '-switcher', true), _defineProperty(_cls2, prefixCls + '-switcher-noop', true), _cls2);
	      if (props.showLine) {
	        cls[prefixCls + '-center_docu'] = !props.last;
	        cls[prefixCls + '-bottom_docu'] = props.last;
	      } else {
	        cls[prefixCls + '-noline_docu'] = true;
	      }
	      return _react2["default"].createElement('span', { className: (0, _classnames2["default"])(cls) });
	    };

	    return _react2["default"].createElement(
	      'li',
	      _extends({}, liProps, { ref: 'li',
	        className: (0, _classnames2["default"])(props.className, disabledCls, dragOverCls, filterCls)
	      }),
	      canRenderSwitcher ? this.renderSwitcher(props, expandedState) : noopSwitcher(),
	      props.checkable ? this.renderCheckbox(props) : null,
	      selectHandle(),
	      newChildren
	    );
	  };

	  return TreeNode;
	}(_react2["default"].Component);

	TreeNode.isTreeNode = 1;

	TreeNode.propTypes = {
	  prefixCls: _react.PropTypes.string,
	  disabled: _react.PropTypes.bool,
	  disableCheckbox: _react.PropTypes.bool,
	  expanded: _react.PropTypes.bool,
	  isLeaf: _react.PropTypes.bool,
	  root: _react.PropTypes.object,
	  onSelect: _react.PropTypes.func
	};

	TreeNode.defaultProps = {
	  title: defaultTitle
	};

	exports["default"] = TreeNode;
	module.exports = exports['default'];

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var LinkBar = function (_React$Component) {
	  _inherits(LinkBar, _React$Component);

	  function LinkBar() {
	    _classCallCheck(this, LinkBar);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  LinkBar.prototype.renderActionBtn = function renderActionBtn(item, index, last) {
	    var me = this;
	    var itemProps = {
	      onClick: item.callback || function () {}
	    };
	    var action = void 0;
	    var cutOff = _react2["default"].createElement('div', { className: me.props.prefixCls + '-cutoff' });
	    if (!!item.render && typeof item.render === 'function') {
	      action = _react2["default"].createElement(
	        'div',
	        itemProps,
	        item.render(item.title)
	      );
	    } else {
	      action = _react2["default"].createElement(
	        'a',
	        itemProps,
	        item.title
	      );
	    }

	    return _react2["default"].createElement(
	      'div',
	      { className: me.props.prefixCls + '-item', key: index },
	      action,
	      last ? null : cutOff
	    );
	  };

	  LinkBar.prototype.render = function render() {
	    var me = this;
	    var _me$props = me.props,
	        config = _me$props.config,
	        prefixCls = _me$props.prefixCls;

	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls },
	      config.map(function (item, index) {
	        return me.renderActionBtn(item, index, index === config.length - 1);
	      })
	    );
	  };

	  return LinkBar;
	}(_react2["default"].Component);

	LinkBar.propTypes = {
	  prefixCls: _react2["default"].PropTypes.string,
	  config: _react2["default"].PropTypes.array
	};
	LinkBar.defaultProps = {
	  prefixCls: 'kuma-uxtable-linkbar',
	  config: []
	};
	LinkBar.displayName = 'LinkBar';

	exports["default"] = LinkBar;
	module.exports = exports['default'];

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepcopy = __webpack_require__(170);
	var Const = __webpack_require__(168);
	var util = __webpack_require__(290);

	function addEmptyRow() {
	  this.insertRecords({});
	}

	function addRow(rowData) {
	  this.insertRecords(rowData);
	}

	function resetRow(rowData) {
	  var me = this;
	  var updateData = {};
	  var data = me.data.datas || me.data.data;
	  for (var i = 0; i < data.length; i++) {
	    if (data[i].jsxid === rowData.jsxid) {
	      updateData = deepcopy(data[i]);
	      break;
	    }
	  }
	  updateData.__mode__ = Const.MODE.EDIT;
	  this.updateRecord(updateData);
	}

	function delRow(rowData) {
	  this.removeRecords(rowData);
	}

	function editRow(rowData) {
	  var newRowData = deepcopy(rowData);
	  newRowData.__mode__ = Const.MODE.EDIT;
	  this.updateRecord(newRowData);
	}

	function viewRow(rowData) {
	  var newRowData = deepcopy(rowData);
	  newRowData.__mode__ = Const.MODE.VIEW;
	  this.updateRecord(newRowData);
	}

	function saveRow(rowData) {
	  var newRowData = deepcopy(rowData);
	  newRowData.__mode__ = Const.MODE.VIEW;
	  newRowData.__edited__ = true;
	  this.syncRecord(newRowData);
	}

	function saveAllRow() {
	  var me = this;
	  var data = deepcopy(me.state.data.data || me.state.data.datas);
	  // data.forEach((item) => {
	  //   me.saveRow(item);
	  // });
	  for (var i = 0; i < data.length; i++) {
	    var item = data[i];
	    item.__mode__ = Const.MODE.VIEW;
	    item.__edited__ = true;
	  }
	  this.syncRecord(data);
	}

	function editAllRow() {
	  var me = this;
	  var data = deepcopy(me.data.data || me.data.datas);
	  for (var i = 0; i < data.length; i++) {
	    var item = data[i];
	    item.__mode__ = Const.MODE.EDIT;
	  }
	  this.updateRecord(data);
	}

	function toggleSubComp(rowData) {
	  var content = deepcopy(this.state.data);
	  var data = content.data || content.datas;

	  if (data) {
	    for (var i = 0; i < data.length; i++) {
	      var item = data[i];
	      if (item.jsxid === rowData.jsxid) {
	        item.showSubComp = !item.showSubComp;
	        break;
	      }
	    }
	    this.setState({
	      data: content
	    });
	  }
	}

	function moveRowUp(rowData) {
	  var content = deepcopy(this.state.data);
	  var data = content.data || content.datas;
	  var index = -1;
	  if (data) {
	    for (var i = 0; i < data.length; i++) {
	      var item = data[i];
	      if (item.jsxid === rowData.jsxid) {
	        index = i;
	        break;
	      }
	    }
	    if (index > 0) {
	      data.splice(index, 1);
	      data.splice(index - 1, 0, rowData);
	      this.setState({
	        data: content
	      });
	      this.data = content;
	    }
	  }
	}

	function moveRowDown(rowData) {
	  var content = deepcopy(this.state.data);
	  var data = content.data || content.datas;
	  var index = -1;
	  if (data) {
	    for (var i = 0; i < data.length; i++) {
	      var item = data[i];
	      if (item.jsxid === rowData.jsxid) {
	        index = i;
	        break;
	      }
	    }
	    if (index > -1 && index < data.length - 1) {
	      data.splice(index, 1);
	      data.splice(index + 1, 0, rowData);
	      this.setState({
	        data: content
	      });
	      this.data = content;
	    }
	  }
	}

	function getData(validate) {
	  var me = this;
	  var pass = true;
	  if (validate !== false) {
	    var fieldKeys = Object.keys(me.fields);
	    fieldKeys.forEach(function (name) {
	      var fieldPass = me.fields[name]();
	      // if one field fails to pass, the table fails to pass
	      if (pass) {
	        pass = fieldPass;
	      }
	    });
	  }
	  if (me.props.getSavedData) {
	    // 滤除可能为空的元素
	    var data = deepcopy(me.data);
	    data.data = data.data.filter(function (item) {
	      return item !== undefined;
	    });
	    return {
	      data: data,
	      pass: pass
	    };
	  }
	  return {
	    data: me.state.data,
	    pass: pass
	  };
	}

	function toggleTreeExpanded(rowData) {
	  var expandedKeys = deepcopy(this.state.expandedKeys);
	  util.toggleItemInArr(rowData.jsxid, expandedKeys);
	  this.setState({
	    expandedKeys: expandedKeys
	  });
	}

	module.exports = {
	  addEmptyRow: addEmptyRow,
	  addRow: addRow,
	  resetRow: resetRow,
	  delRow: delRow,
	  editAllRow: editAllRow,
	  editRow: editRow,
	  viewRow: viewRow,
	  saveAllRow: saveAllRow,
	  saveRow: saveRow,
	  toggleSubComp: toggleSubComp,
	  toggleTreeExpanded: toggleTreeExpanded,
	  getData: getData,
	  moveRowUp: moveRowUp,
	  moveRowDown: moveRowDown
	};

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var CellField = __webpack_require__(3);
	var assign = __webpack_require__(6);
	var React = __webpack_require__(7);

	var Input = function Input(props) {
	  return React.createElement('input', _extends({ className: 'kuma-input' }, props, { value: props.value, onChange: function onChange(e) {
	      props.onChange(e.target.value);
	    } }));
	};

	Input.propTypes = {
	  value: React.PropTypes.string,
	  onChange: React.PropTypes.func
	};

	var createCellField = function createCellField(options) {
	  var CustomField = function (_CellField) {
	    _inherits(CustomField, _CellField);

	    function CustomField() {
	      _classCallCheck(this, CustomField);

	      return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
	    }

	    CustomField.prototype.renderContent = function renderContent() {
	      var _extends2;

	      var me = this;
	      var defaultOptions = {
	        valuePropName: 'value',
	        changePropName: 'onChange',
	        component: React.createElement(Input, null),
	        processValue: function processValue(value) {
	          return value;
	        },
	        processText: function processText(value) {
	          return JSON.stringify(value);
	        }
	      };
	      var newOptions = assign({}, defaultOptions, options);
	      return React.cloneElement(newOptions.component, _extends((_extends2 = {}, _defineProperty(_extends2, newOptions.valuePropName, me.props.value), _defineProperty(_extends2, newOptions.changePropName, function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        me.handleDataChange({
	          value: newOptions.processValue.apply(me, args),
	          text: newOptions.processText.apply(me, args)
	        });
	      }), _extends2), me.props.column.config || {}));
	    };

	    return CustomField;
	  }(CellField);

	  return CustomField;
	};

	module.exports = createCellField;

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Dialog Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(410);

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _uxcoreButton = __webpack_require__(359);

	var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _RcDialog = __webpack_require__(411);

	var _RcDialog2 = _interopRequireDefault(_RcDialog);

	var _confirm = __webpack_require__(417);

	var _confirm2 = _interopRequireDefault(_confirm);

	var _i18n = __webpack_require__(418);

	var _i18n2 = _interopRequireDefault(_i18n);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author: vincent
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date: 15/5/19
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	function noop() {}

	var htmlNode = document.documentElement;
	var supportClassList = !!htmlNode.classList;

	var getIEVer = function getIEVer() {
	  if (window) {
	    var ua = window.navigator.userAgent;
	    var idx = ua.indexOf('MSIE');
	    if (idx > 0) {
	      // "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64;
	      // Trident/6.0; SLCC2; .NET CLR 2.0.50727)"
	      return parseInt(ua.substring(idx + 5, ua.indexOf('.', idx)), 10);
	    }
	    if (ua.match(/Trident\/7\./)) {
	      // "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2;
	      // .NET CLR 2.0.50727; rv:11.0) like Gecko"
	      return 11;
	    }
	    return 0;
	  }
	  return 0;
	};

	var Dialog = function (_React$Component) {
	  _inherits(Dialog, _React$Component);

	  function Dialog(props) {
	    _classCallCheck(this, Dialog);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      confirmLoading: false
	    };
	    return _this;
	  }

	  Dialog.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    var htmlClassName = this.props.htmlClassName;

	    if (htmlClassName) {
	      if (nextProps.visible) {
	        if (supportClassList) {
	          htmlNode.classList.add(htmlClassName);
	        } else {
	          htmlNode.className += ' ' + htmlClassName;
	        }
	      } else if (supportClassList) {
	        htmlNode.classList.remove(htmlClassName);
	      } else {
	        var cls = htmlNode.className;
	        cls = cls.replace(new RegExp('\\s?' + htmlClassName), '');
	        htmlNode.className = cls;
	      }
	    }
	  };

	  Dialog.prototype.saveRef = function saveRef(refName) {
	    var me = this;
	    return function (c) {
	      me[refName] = c;
	    };
	  };

	  Dialog.prototype.handleCancel = function handleCancel() {
	    this.props.onCancel();
	  };

	  Dialog.prototype.handleOk = function handleOk() {
	    this.props.onOk();
	  };

	  Dialog.prototype.render = function render() {
	    var _classnames,
	        _this2 = this;

	    var props = this.props;
	    var locale = _i18n2["default"][props.locale];

	    var defaultFooter = [_react2["default"].createElement(
	      _uxcoreButton2["default"],
	      {
	        key: 'confirm',
	        type: 'primary',
	        size: 'medium',
	        onClick: this.handleOk.bind(this)
	      },
	      locale.ok
	    ), _react2["default"].createElement(
	      _uxcoreButton2["default"],
	      {
	        key: 'cancel',
	        type: 'secondary',
	        size: 'medium',
	        onClick: this.handleCancel.bind(this)
	      },
	      locale.cancel
	    )];
	    var footer = props.footer || defaultFooter;
	    var className = void 0;
	    if (!props.title) {
	      className = props.className + ' ' + props.prefixCls + '-noheader';
	    } else {
	      className = props.className;
	    }
	    var wrapClassName = (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, props.wrapClassName, !!props.wrapClassName), _defineProperty(_classnames, 'vertical-center-dialog', getIEVer() < 8), _classnames));
	    return _react2["default"].createElement(_RcDialog2["default"], _extends({
	      onClose: this.handleCancel.bind(this),
	      footer: footer
	    }, props, {
	      className: className,
	      wrapClassName: wrapClassName,
	      visible: props.visible,
	      ref: function ref(c) {
	        _this2.dialog = c;
	      }
	    }));
	  };

	  return Dialog;
	}(_react2["default"].Component);

	exports["default"] = Dialog;


	Dialog.propTypes = {
	  onCancel: _react2["default"].PropTypes.func,
	  onOk: _react2["default"].PropTypes.func,
	  htmlClassName: _react2["default"].PropTypes.string,
	  getContainer: _react2["default"].PropTypes.func
	};

	Dialog.defaultProps = {
	  prefixCls: 'kuma-dlg',
	  className: '',
	  wrapClassName: '',
	  onOk: noop,
	  locale: 'zh-cn',
	  onCancel: noop,
	  width: 520,
	  transitionName: 'dialogSlideDown',
	  maskTransitionName: 'dialogFade',
	  confirmLoading: false,
	  visible: false,
	  closable: true,
	  maskClosable: false,
	  title: '',
	  htmlClassName: ''
	};

	Dialog.info = function (props) {
	  (0, _objectAssign2["default"])(props, {
	    iconClassName: 'kuma-icon-information',
	    okCancel: false
	  });
	  return (0, _confirm2["default"])(props);
	};

	Dialog.success = function (props) {
	  (0, _objectAssign2["default"])(props, {
	    iconClassName: 'kuma-icon-success',
	    okCancel: false
	  });
	  return (0, _confirm2["default"])(props);
	};

	Dialog.error = function (props) {
	  (0, _objectAssign2["default"])(props, {
	    iconClassName: 'kuma-icon-error',
	    okCancel: false
	  });
	  return (0, _confirm2["default"])(props);
	};

	Dialog.confirm = function (props) {
	  (0, _objectAssign2["default"])(props, {
	    okCancel: true
	  });
	  return (0, _confirm2["default"])(props);
	};
	module.exports = exports['default'];

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _rcDialog = __webpack_require__(412);

	var _rcDialog2 = _interopRequireDefault(_rcDialog);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultGetContainer = function defaultGetContainer() {
	  var container = document.createElement('div');
	  document.body.appendChild(container);
	  return container;
	};

	var NewDialog = function (_RcDialog) {
	  _inherits(NewDialog, _RcDialog);

	  function NewDialog(props) {
	    _classCallCheck(this, NewDialog);

	    var _this = _possibleConstructorReturn(this, _RcDialog.call(this, props));

	    var getContainer = props.getContainer;

	    if (document) {
	      /* eslint-disable no-underscore-dangle */
	      _this._container = getContainer ? getContainer() : defaultGetContainer();
	      /* eslint-enable no-underscore-dangle */
	    }
	    return _this;
	  }

	  return NewDialog;
	}(_rcDialog2["default"]);

	exports["default"] = NewDialog;
	module.exports = exports['default'];

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(413);

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _Dialog = __webpack_require__(414);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	var _getContainerRenderMixin = __webpack_require__(416);

	var _getContainerRenderMixin2 = _interopRequireDefault(_getContainerRenderMixin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var DialogWrap = _react2["default"].createClass({
	  displayName: 'DialogWrap',

	  propTypes: {
	    visible: _react.PropTypes.bool
	  },
	  mixins: [(0, _getContainerRenderMixin2["default"])({
	    isVisible: function isVisible(instance) {
	      return instance.props.visible;
	    },

	    autoDestroy: false,
	    getComponent: function getComponent(instance, extra) {
	      return _react2["default"].createElement(_Dialog2["default"], (0, _extends3["default"])({}, instance.props, extra, {
	        key: 'dialog'
	      }));
	    }
	  })],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      visible: false
	    };
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(_ref) {
	    var visible = _ref.visible;

	    return !!(this.props.visible || visible);
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this.props.visible) {
	      this.renderComponent({
	        onAfterClose: this.removeContainer,
	        onClose: function onClose() {},

	        visible: false
	      });
	    } else {
	      this.removeContainer();
	    }
	  },
	  getElement: function getElement(part) {
	    return this._component.getElement(part);
	  },
	  render: function render() {
	    return null;
	  }
	});

	exports["default"] = DialogWrap;
	module.exports = exports['default'];

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _KeyCode = __webpack_require__(57);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _rcAnimate = __webpack_require__(104);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _LazyRenderBox = __webpack_require__(415);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var uuid = 0;
	var openCount = 0;

	// Measure scrollbar width for padding body during modal show/hide
	var scrollbarMeasure = {
	  position: 'absolute',
	  top: '-9999px',
	  width: '50px',
	  height: '50px',
	  overflow: 'scroll'
	};

	/* eslint react/no-is-mounted:0 */

	function noop() {}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function setTransformOrigin(node, value) {
	  var style = node.style;
	  ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
	    style[prefix + 'TransformOrigin'] = value;
	  });
	  style['transformOrigin'] = value;
	}

	function offset(el) {
	  var rect = el.getBoundingClientRect();
	  var pos = {
	    left: rect.left,
	    top: rect.top
	  };
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScroll(w);
	  pos.top += getScroll(w, 1);
	  return pos;
	}

	var Dialog = _react2["default"].createClass({
	  displayName: 'Dialog',

	  propTypes: {
	    className: _react.PropTypes.string,
	    keyboard: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    mask: _react.PropTypes.bool,
	    children: _react.PropTypes.any,
	    onAfterClose: _react.PropTypes.func,
	    onClose: _react.PropTypes.func,
	    closable: _react.PropTypes.bool,
	    maskClosable: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    mousePosition: _react.PropTypes.object,
	    wrapStyle: _react.PropTypes.object,
	    maskStyle: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    wrapClassName: _react.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onAfterClose: noop,
	      className: '',
	      mask: true,
	      visible: false,
	      keyboard: true,
	      closable: true,
	      maskClosable: true,
	      prefixCls: 'rc-dialog',
	      onClose: noop
	    };
	  },
	  componentWillMount: function componentWillMount() {
	    this.titleId = 'rcDialogTitle' + uuid++;
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate({});
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    var mousePosition = this.props.mousePosition;
	    if (props.visible) {
	      // first show
	      if (!prevProps.visible) {
	        this.lastOutSideFocusNode = document.activeElement;
	        this.addScrollingEffect();
	        this.refs.wrap.focus();
	        var dialogNode = _reactDom2["default"].findDOMNode(this.refs.dialog);
	        if (mousePosition) {
	          var elOffset = offset(dialogNode);
	          setTransformOrigin(dialogNode, mousePosition.x - elOffset.left + 'px ' + (mousePosition.y - elOffset.top) + 'px');
	        } else {
	          setTransformOrigin(dialogNode, '');
	        }
	      }
	    } else if (prevProps.visible) {
	      if (props.mask && this.lastOutSideFocusNode) {
	        try {
	          this.lastOutSideFocusNode.focus();
	        } catch (e) {
	          this.lastOutSideFocusNode = null;
	        }
	        this.lastOutSideFocusNode = null;
	      }
	    }
	  },
	  onAnimateLeave: function onAnimateLeave() {
	    // need demo?
	    // https://github.com/react-component/dialog/pull/28
	    if (this.refs.wrap) {
	      this.refs.wrap.style.display = 'none';
	    }
	    this.removeScrollingEffect();
	    this.props.onAfterClose();
	  },
	  onMaskClick: function onMaskClick(e) {
	    if (e.target === e.currentTarget && this.props.closable && this.props.maskClosable) {
	      this.close(e);
	    }
	  },
	  onKeyDown: function onKeyDown(e) {
	    var props = this.props;
	    if (props.closable && props.keyboard) {
	      if (e.keyCode === _KeyCode2["default"].ESC) {
	        this.close(e);
	      }
	    }
	    // keep focus inside dialog
	    if (props.visible) {
	      if (e.keyCode === _KeyCode2["default"].TAB) {
	        var activeElement = document.activeElement;
	        var dialogRoot = this.refs.wrap;
	        var sentinel = this.refs.sentinel;
	        if (e.shiftKey) {
	          if (activeElement === dialogRoot) {
	            sentinel.focus();
	          }
	        } else if (activeElement === this.refs.sentinel) {
	          dialogRoot.focus();
	        }
	      }
	    }
	  },
	  getDialogElement: function getDialogElement() {
	    var props = this.props;
	    var closable = props.closable;
	    var prefixCls = props.prefixCls;
	    var dest = {};
	    if (props.width !== undefined) {
	      dest.width = props.width;
	    }
	    if (props.height !== undefined) {
	      dest.height = props.height;
	    }

	    var footer = void 0;
	    if (props.footer) {
	      footer = _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-footer', ref: 'footer' },
	        props.footer
	      );
	    }

	    var header = void 0;
	    if (props.title) {
	      header = _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-header', ref: 'header' },
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-title', id: this.titleId },
	          props.title
	        )
	      );
	    }

	    var closer = void 0;
	    if (closable) {
	      closer = _react2["default"].createElement(
	        'button',
	        {
	          onClick: this.close,
	          'aria-label': 'Close',
	          className: prefixCls + '-close'
	        },
	        _react2["default"].createElement('span', { className: prefixCls + '-close-x' })
	      );
	    }

	    var style = (0, _extends3["default"])({}, props.style, dest);
	    var transitionName = this.getTransitionName();
	    var dialogElement = _react2["default"].createElement(
	      _LazyRenderBox2["default"],
	      {
	        role: 'document',
	        ref: 'dialog',
	        style: style,
	        className: prefixCls + ' ' + (props.className || ''),
	        visible: props.visible
	      },
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-content' },
	        closer,
	        header,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body', style: props.bodyStyle, ref: 'body' },
	          props.children
	        ),
	        footer
	      ),
	      _react2["default"].createElement(
	        'div',
	        { tabIndex: '0', ref: 'sentinel', style: { width: 0, height: 0, overflow: 'hidden' } },
	        'sentinel'
	      )
	    );
	    return _react2["default"].createElement(
	      _rcAnimate2["default"],
	      {
	        key: 'dialog',
	        showProp: 'visible',
	        onLeave: this.onAnimateLeave,
	        transitionName: transitionName,
	        component: '',
	        transitionAppear: true
	      },
	      dialogElement
	    );
	  },
	  getZIndexStyle: function getZIndexStyle() {
	    var style = {};
	    var props = this.props;
	    if (props.zIndex !== undefined) {
	      style.zIndex = props.zIndex;
	    }
	    return style;
	  },
	  getWrapStyle: function getWrapStyle() {
	    return (0, _extends3["default"])({}, this.getZIndexStyle(), this.props.wrapStyle);
	  },
	  getMaskStyle: function getMaskStyle() {
	    return (0, _extends3["default"])({}, this.getZIndexStyle(), this.props.maskStyle);
	  },
	  getMaskElement: function getMaskElement() {
	    var props = this.props;
	    var maskElement = void 0;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = _react2["default"].createElement(_LazyRenderBox2["default"], {
	        style: this.getMaskStyle(),
	        key: 'mask',
	        className: props.prefixCls + '-mask',
	        hiddenClassName: props.prefixCls + '-mask-hidden',
	        visible: props.visible
	      });
	      if (maskTransition) {
	        maskElement = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            key: 'mask',
	            showProp: 'visible',
	            transitionAppear: true,
	            component: '',
	            transitionName: maskTransition
	          },
	          maskElement
	        );
	      }
	    }
	    return maskElement;
	  },
	  getMaskTransitionName: function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },
	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    var animation = props.animation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },
	  getElement: function getElement(part) {
	    return this.refs[part];
	  },
	  setScrollbar: function setScrollbar() {
	    if (this.bodyIsOverflowing && this.scrollbarWidth) {
	      document.body.style.paddingRight = this.scrollbarWidth + 'px';
	    }
	  },
	  addScrollingEffect: function addScrollingEffect() {
	    openCount++;
	    if (openCount !== 1) {
	      return;
	    }
	    this.checkScrollbar();
	    this.setScrollbar();
	    document.body.style.overflow = 'hidden';
	    // this.adjustDialog();
	  },
	  removeScrollingEffect: function removeScrollingEffect() {
	    openCount--;
	    if (openCount !== 0) {
	      return;
	    }
	    document.body.style.overflow = '';
	    this.resetScrollbar();
	    // this.resetAdjustments();
	  },
	  close: function close(e) {
	    this.props.onClose(e);
	  },
	  checkScrollbar: function checkScrollbar() {
	    var fullWindowWidth = window.innerWidth;
	    if (!fullWindowWidth) {
	      // workaround for missing window.innerWidth in IE8
	      var documentElementRect = document.documentElement.getBoundingClientRect();
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
	    if (this.bodyIsOverflowing) {
	      this.scrollbarWidth = this.measureScrollbar();
	    }
	  },
	  resetScrollbar: function resetScrollbar() {
	    document.body.style.paddingRight = '';
	  },
	  measureScrollbar: function measureScrollbar() {
	    if (this.scrollbarWidth !== undefined) {
	      return this.scrollbarWidth;
	    }
	    var scrollDiv = document.createElement('div');
	    for (var scrollProp in scrollbarMeasure) {
	      if (scrollbarMeasure.hasOwnProperty(scrollProp)) {
	        scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
	      }
	    }
	    document.body.appendChild(scrollDiv);
	    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	    document.body.removeChild(scrollDiv);
	    this.scrollbarWidth = scrollbarWidth;
	    return scrollbarWidth;
	  },
	  adjustDialog: function adjustDialog() {
	    if (this.refs.wrap && this.scrollbarWidth) {
	      var modalIsOverflowing = this.refs.wrap.scrollHeight > document.documentElement.clientHeight;
	      this.refs.wrap.style.paddingLeft = (!this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '') + 'px';
	      this.refs.wrap.style.paddingRight = (this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : '') + 'px';
	    }
	  },
	  resetAdjustments: function resetAdjustments() {
	    if (this.refs.wrap) {
	      this.refs.wrap.style.paddingLeft = this.refs.wrap.style.paddingLeft = '';
	    }
	  },
	  render: function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var style = this.getWrapStyle();
	    // clear hide display
	    // and only set display after async anim, not here for hide
	    if (props.visible) {
	      style.display = null;
	    }
	    return _react2["default"].createElement(
	      'div',
	      null,
	      this.getMaskElement(),
	      _react2["default"].createElement(
	        'div',
	        {
	          tabIndex: '-1',
	          onKeyDown: this.onKeyDown,
	          className: prefixCls + '-wrap ' + (props.wrapClassName || ''),
	          ref: 'wrap',
	          onClick: this.onMaskClick,
	          role: 'dialog',
	          'aria-labelledby': props.title ? this.titleId : null,
	          style: style
	        },
	        this.getDialogElement()
	      )
	    );
	  }
	});

	exports["default"] = Dialog;
	module.exports = exports['default'];

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(33);

	var _extends3 = _interopRequireDefault(_extends2);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var LazyRenderBox = _react2["default"].createClass({
	  displayName: 'LazyRenderBox',

	  propTypes: {
	    className: _react.PropTypes.string,
	    visible: _react.PropTypes.bool,
	    hiddenClassName: _react.PropTypes.string
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return nextProps.hiddenClassName || nextProps.visible;
	  },
	  render: function render() {
	    var className = this.props.className;
	    if (this.props.hiddenClassName && !this.props.visible) {
	      className += ' ' + this.props.hiddenClassName;
	    }
	    var props = (0, _extends3["default"])({}, this.props);
	    delete props.hiddenClassName;
	    delete props.visible;
	    props.className = className;
	    return _react2["default"].createElement('div', props);
	  }
	});

	exports["default"] = LazyRenderBox;
	module.exports = exports['default'];

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = getContainerRenderMixin;

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function defaultGetContainer() {
	  var container = document.createElement('div');
	  document.body.appendChild(container);
	  return container;
	}

	function getContainerRenderMixin(config) {
	  var _config$autoMount = config.autoMount;
	  var autoMount = _config$autoMount === undefined ? true : _config$autoMount;
	  var _config$autoDestroy = config.autoDestroy;
	  var autoDestroy = _config$autoDestroy === undefined ? true : _config$autoDestroy;
	  var isVisible = config.isVisible;
	  var getComponent = config.getComponent;
	  var _config$getContainer = config.getContainer;
	  var getContainer = _config$getContainer === undefined ? defaultGetContainer : _config$getContainer;


	  var mixin = void 0;

	  function _renderComponent(instance, componentArg, ready) {
	    if (!isVisible || instance._component || isVisible(instance)) {
	      if (!instance._container) {
	        instance._container = getContainer(instance);
	      }
	      _reactDom2["default"].unstable_renderSubtreeIntoContainer(instance, getComponent(instance, componentArg), instance._container, function callback() {
	        instance._component = this;
	        if (ready) {
	          ready.call(this);
	        }
	      });
	    }
	  }

	  if (autoMount) {
	    mixin = _extends({}, mixin, {
	      componentDidMount: function componentDidMount() {
	        _renderComponent(this);
	      },
	      componentDidUpdate: function componentDidUpdate() {
	        _renderComponent(this);
	      }
	    });
	  }

	  if (!autoMount || !autoDestroy) {
	    mixin = _extends({}, mixin, {
	      renderComponent: function renderComponent(componentArg, ready) {
	        _renderComponent(this, componentArg, ready);
	      }
	    });
	  }

	  function _removeContainer(instance) {
	    if (instance._container) {
	      var container = instance._container;
	      _reactDom2["default"].unmountComponentAtNode(container);
	      container.parentNode.removeChild(container);
	      instance._container = null;
	    }
	  }

	  if (autoDestroy) {
	    mixin = _extends({}, mixin, {
	      componentWillUnmount: function componentWillUnmount() {
	        _removeContainer(this);
	      }
	    });
	  } else {
	    mixin = _extends({}, mixin, {
	      removeContainer: function removeContainer() {
	        _removeContainer(this);
	      }
	    });
	  }

	  return mixin;
	}
	module.exports = exports['default'];

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function () {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  var div = document.createElement('div');
	  document.body.appendChild(div);

	  var newProps = (0, _objectAssign2["default"])({
	    iconClassName: 'kuma-icon-caution',
	    width: 300,
	    locale: 'zh-cn'
	  }, props);
	  var locale = _i18n2["default"][newProps.locale];

	  // 默认为 true，保持向下兼容
	  if (!('okCancel' in newProps)) {
	    newProps.okCancel = true;
	  }

	  function close() {
	    if (newProps.htmlClassName) {
	      if (supportClassList) {
	        htmlNode.classList.remove(newProps.htmlClassName);
	      } else {
	        var cls = htmlNode.className;
	        cls = cls.replace(new RegExp('\\s?' + newProps.htmlClassName), '');
	        htmlNode.className = cls;
	      }
	    }
	    _reactDom2["default"].unmountComponentAtNode(div);
	    document.body.removeChild(div);
	  }

	  if (newProps.timer) {
	    setTimeout(function () {
	      close();
	    }, newProps.timer);
	  }

	  function onCancel() {
	    var cancelFn = newProps.onCancel;
	    if (cancelFn) {
	      var ret = void 0;
	      if (cancelFn.length) {
	        ret = cancelFn(close);
	      } else {
	        ret = cancelFn();
	        if (!ret) {
	          close();
	        }
	      }
	      if (ret && ret.then) {
	        ret.then(close);
	      }
	    } else {
	      close();
	    }
	  }

	  function onOk() {
	    var okFn = newProps.onOk;
	    if (okFn) {
	      var ret = void 0;
	      if (okFn.length) {
	        ret = okFn(close);
	      } else {
	        ret = okFn();
	        if (!ret) {
	          close();
	        }
	      }
	      if (ret && ret.then) {
	        ret.then(close);
	      }
	    } else {
	      close();
	    }
	  }

	  var body = _react2["default"].createElement(
	    'div',
	    { className: 'kuma-confirm-body' },
	    _react2["default"].createElement('i', { className: 'kuma-icon ' + newProps.iconClassName }),
	    _react2["default"].createElement(
	      'span',
	      { className: 'kuma-confirm-title' },
	      newProps.title
	    ),
	    _react2["default"].createElement(
	      'div',
	      { className: 'kuma-confirm-content' },
	      newProps.content
	    )
	  );
	  var footer = void 0;

	  if (newProps.okCancel) {
	    footer = _react2["default"].createElement(
	      'div',
	      { className: 'kuma-confirm-action' },
	      _react2["default"].createElement(
	        _uxcoreButton2["default"],
	        { size: newProps.buttonSize || 'small', onClick: onOk },
	        locale.confirm
	      ),
	      _react2["default"].createElement(
	        _uxcoreButton2["default"],
	        { type: 'secondary', size: newProps.buttonSize || 'small', onClick: onCancel },
	        locale.cancel
	      )
	    );
	  } else {
	    footer = _react2["default"].createElement(
	      'div',
	      { className: 'kuma-confirm-action' },
	      _react2["default"].createElement(
	        _uxcoreButton2["default"],
	        { size: newProps.buttonSize || 'small', onClick: onOk },
	        locale.isee
	      )
	    );
	  }

	  if (newProps.htmlClassName) {
	    if (supportClassList) {
	      htmlNode.classList.add(newProps.htmlClassName);
	    } else {
	      htmlNode.className += ' ' + newProps.htmlClassName;
	    }
	  }

	  _reactDom2["default"].render(_react2["default"].createElement(
	    _Dialog2["default"],
	    {
	      prefixCls: 'kuma-dlg',
	      className: 'kuma-dlg-confirm',
	      onCancel: onCancel,
	      visible: true,
	      closable: true,
	      title: '',
	      footer: '',
	      transitionName: newProps.transitionName,
	      maskTransitionName: newProps.maskTransitionName,
	      width: newProps.width,
	      htmlClassName: newProps.htmlClassName,
	      getContainer: newProps.getContainer
	    },
	    _react2["default"].createElement(
	      'div',
	      null,
	      body,
	      ' ',
	      footer
	    )
	  ), div);
	};

	var _uxcoreButton = __webpack_require__(359);

	var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _objectAssign = __webpack_require__(6);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _Dialog = __webpack_require__(410);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	var _i18n = __webpack_require__(418);

	var _i18n2 = _interopRequireDefault(_i18n);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var htmlNode = document.documentElement;
	var supportClassList = !!htmlNode.classList;

	module.exports = exports['default'];

/***/ },
/* 418 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'zh-cn': {
	    ok: '确定',
	    cancel: '取消',
	    isee: '知道了',
	    confirm: '确定'
	  },
	  'en-us': {
	    ok: 'OK',
	    cancel: 'Cancel',
	    isee: 'OK',
	    confirm: 'Yes'
	  },
	  'pl-pl': {
	    ok: 'OK',
	    cancel: 'anuluj',
	    isee: 'OK',
	    confirm: 'tak'
	  }
	};

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Message Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	module.exports = __webpack_require__(420);

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var Notification = __webpack_require__(421);
	var classnames = __webpack_require__(5);
	var defaultDuration = 1.5;
	var messageInstance = void 0;
	var key = 1;
	var prefixCls = 'kuma-message';
	var transitionName = 'moveUp';
	var React = __webpack_require__(7);
	var className = void 0;

	function getMessageInstance() {
	    messageInstance = messageInstance || Notification.newInstance({
	        prefixCls: prefixCls,
	        className: className,
	        transitionName: transitionName,
	        style: {
	            left: '50%'
	        } // 覆盖原来的样式
	    });
	    return messageInstance;
	}

	function notice(content) {
	    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;

	    var _classnames;

	    var type = arguments[2];
	    var onClose = arguments[3];

	    var iconClass = {
	        'info': 'kuma-icon kuma-icon-information',
	        'success': 'kuma-icon kuma-icon-success',
	        'error': 'kuma-icon kuma-icon-error',
	        'loading': 'kuma-loading'
	    }[type];

	    var instance = getMessageInstance();
	    instance.notice({
	        key: key,
	        duration: duration,
	        style: {
	            right: '50%'
	        },
	        content: React.createElement(
	            'div',
	            { className: classnames((_classnames = {}, _defineProperty(_classnames, prefixCls + '-container ' + prefixCls + '-container-' + type, true), _defineProperty(_classnames, 'fn-clear', true), _classnames)) },
	            React.createElement('i', { className: iconClass }),
	            React.createElement(
	                'div',
	                { className: prefixCls + '-content' },
	                content
	            )
	        ),
	        onClose: onClose
	    });
	    return function () {
	        var target = key++;
	        return function () {
	            instance.removeNotice(target);
	        };
	    }();
	}

	module.exports = {
	    info: function info(content, duration, onClose) {
	        return notice(content, duration, 'info', onClose);
	    },
	    success: function success(content, duration, onClose) {
	        return notice(content, duration, 'success', onClose);
	    },
	    error: function error(content, duration, onClose) {
	        return notice(content, duration, 'error', onClose);
	    },
	    loading: function loading(content, duration, onClose) {
	        return notice(content, duration, 'loading', onClose);
	    },
	    config: function config(options) {
	        prefixCls = options.prefixCls || prefixCls;
	        transitionName = options.transitionName || transitionName;
	        className = options.className || className;
	    }
	};

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Notification = __webpack_require__(422);

	var _Notification2 = _interopRequireDefault(_Notification);

	exports['default'] = _Notification2['default'];
	module.exports = exports['default'];

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(56);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcAnimate = __webpack_require__(104);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _rcUtil = __webpack_require__(423);

	var _Notice = __webpack_require__(435);

	var _Notice2 = _interopRequireDefault(_Notice);

	var seed = 0;
	var now = Date.now();

	function getUuid() {
	  return 'rcNotification_' + now + '_' + seed++;
	}

	var Notification = _react2['default'].createClass({
	  displayName: 'Notification',

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-notification',
	      animation: 'fade',
	      style: {
	        'top': 65,
	        left: '50%'
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      notices: []
	    };
	  },

	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  },

	  add: function add(notice) {
	    var key = notice.key = notice.key || getUuid();
	    var notices = this.state.notices;
	    if (!notices.filter(function (v) {
	      return v.key === key;
	    }).length) {
	      this.setState({
	        notices: notices.concat(notice)
	      });
	    }
	  },

	  remove: function remove(key) {
	    var notices = this.state.notices.filter(function (notice) {
	      return notice.key !== key;
	    });
	    this.setState({
	      notices: notices
	    });
	  },

	  render: function render() {
	    var _className,
	        _this = this;

	    var props = this.props;
	    var noticeNodes = this.state.notices.map(function (notice) {
	      var onClose = (0, _rcUtil.createChainedFunction)(_this.remove.bind(_this, notice.key), notice.onClose);
	      return _react2['default'].createElement(
	        _Notice2['default'],
	        _extends({ prefixCls: props.prefixCls }, notice, { onClose: onClose }),
	        notice.content
	      );
	    });
	    var className = (_className = {}, _defineProperty(_className, props.prefixCls, 1), _defineProperty(_className, props.className, !!props.className), _className);
	    return _react2['default'].createElement(
	      'div',
	      { className: (0, _rcUtil.classSet)(className), style: props.style },
	      _react2['default'].createElement(
	        _rcAnimate2['default'],
	        { transitionName: this.getTransitionName() },
	        noticeNodes
	      )
	    );
	  }
	});

	Notification.newInstance = function (properties) {
	  var props = properties || {};
	  var div = document.createElement('div');
	  document.body.appendChild(div);
	  var notification = _reactDom2['default'].render(_react2['default'].createElement(Notification, props), div);
	  return {
	    notice: function notice(noticeProps) {
	      notification.add(noticeProps);
	    },
	    removeNotice: function removeNotice(key) {
	      notification.remove(key);
	    },
	    component: notification,
	    destroy: function destroy() {
	      _reactDom2['default'].unmountComponentAtNode(div);
	      document.body.removeChild(div);
	    }
	  };
	};

	exports['default'] = Notification;
	module.exports = exports['default'];

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  guid: __webpack_require__(424),
	  classSet: __webpack_require__(425),
	  joinClasses: __webpack_require__(426),
	  KeyCode: __webpack_require__(427),
	  PureRenderMixin: __webpack_require__(428),
	  shallowEqual: __webpack_require__(429),
	  createChainedFunction: __webpack_require__(430),
	  Dom: {
	    addEventListener: __webpack_require__(431),
	    contains: __webpack_require__(432)
	  },
	  Children: {
	    toArray: __webpack_require__(433),
	    mapSelf: __webpack_require__(434)
	  }
	};


/***/ },
/* 424 */
/***/ function(module, exports) {

	var seed = 0;
	module.exports = function () {
	  return Date.now() + '_' + (seed++);
	};


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5);


/***/ },
/* 426 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This file contains an unmodified version of:
	 * https://github.com/facebook/react/blob/v0.12.0/src/utils/joinClasses.js
	 *
	 * This source code is licensed under the BSD-style license found here:
	 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
	 * An additional grant of patent rights can be found here:
	 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
	 */

	"use strict";

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */

	function joinClasses(className /*, ... */ ) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 427 */
/***/ function(module, exports) {

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function (e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	      // Function keys don't generate text
	    keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function (keyCode) {
	  if (keyCode >= KeyCode.ZERO &&
	    keyCode <= KeyCode.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode.NUM_ZERO &&
	    keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode.A &&
	    keyCode <= KeyCode.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

	module.exports = KeyCode;


/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	"use strict";

	var shallowEqual = __webpack_require__(429);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 429 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	"use strict";

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 430 */
/***/ function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = arguments;

	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}

	module.exports = createChainedFunction;


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var addDOMEventListener = __webpack_require__(128);

	module.exports = addDOMEventListener['default'] || addDOMEventListener;


/***/ },
/* 432 */
/***/ function(module, exports) {

	module.exports = function (root, node) {
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
	};


/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(7);

	module.exports = function (children) {
	  var ret = [];
	  React.Children.forEach(children, function (c) {
	    ret.push(c);
	  });
	  return ret;
	};


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(7);

	function mirror(o) {
	  return o;
	}

	module.exports = function (children) {
	  // return ReactFragment
	  return React.Children.map(children, mirror);
	};


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _rcUtil = __webpack_require__(423);

	var Notice = _react2['default'].createClass({
	  displayName: 'Notice',

	  propTypes: {
	    duration: _react2['default'].PropTypes.number,
	    onClose: _react2['default'].PropTypes.func,
	    children: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onEnd: function onEnd() {},
	      duration: 1.5,
	      style: {
	        right: '50%'
	      }
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    this.clearCloseTimer();
	    if (this.props.duration) {
	      this.closeTimer = setTimeout(function () {
	        _this.close();
	      }, this.props.duration * 1000);
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this.componentDidMount();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.clearCloseTimer();
	  },

	  clearCloseTimer: function clearCloseTimer() {
	    if (this.closeTimer) {
	      clearTimeout(this.closeTimer);
	      this.closeTimer = null;
	    }
	  },

	  close: function close() {
	    this.clearCloseTimer();
	    this.props.onClose();
	  },

	  render: function render() {
	    var _className;

	    var props = this.props;
	    var componentClass = props.prefixCls + '-notice';
	    var className = (_className = {}, _defineProperty(_className, '' + componentClass, 1), _defineProperty(_className, componentClass + '-closable', props.closable), _defineProperty(_className, props.className, !!props.className), _className);
	    return _react2['default'].createElement(
	      'div',
	      { className: (0, _rcUtil.classSet)(className), style: props.style },
	      _react2['default'].createElement(
	        'div',
	        { className: componentClass + '-content' },
	        this.props.children
	      ),
	      props.closable ? _react2['default'].createElement(
	        'a',
	        { tabIndex: '0', onClick: this.close, className: componentClass + '-close' },
	        _react2['default'].createElement('span', { className: componentClass + '-close-x' })
	      ) : null
	    );
	  }
	});

	exports['default'] = Notice;
	module.exports = exports['default'];

/***/ }
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,